_id,kebabCaseName,pythonTests,javascriptTests,pythonDataStructures,javascriptDataStructures
63b594e78ad4593d6b7b01cc,contains-duplicate,"params = [
  {
    ""nums"" :  [1,2,3,1],
    ""ret"" : True
  },
  {
    ""nums"" :  [1,2,3,4],
    ""ret"" : False
  },
  {
    ""nums"" :  [1,1,1,3,3,4,3,2,4,2],
    ""ret"" : True
  },
  {
    ""nums"" :  [1,2,3,4,5,6,7,8,9,10],
    ""ret"" : False
  },
  {
    ""nums"" :  [1],
    ""ret"" : False
  },
  {
    ""nums"" :  [],
    ""ret"" : False
  },
  {
    ""nums"" :  [-1,-2,3,4,3,4,5,6,7,8,9,10],
    ""ret"" : True
  },
  {
    ""nums"" :  [-1,0,1,2,3,4,5,6,7,8,9,10],
    ""ret"" : False
  },
  {
    ""nums"" :  [-1,-1,-1,-1,-1,0,1,2,3,4,5,6,7,8],
    ""ret"" : True
  },
  {
    ""nums"" :  [10,20,30,40,50,10],
    ""ret"" : True
  }
]

obj = Solution()

for args in params:
    result = obj.containsDuplicate(args['nums'])
    print(""\u2705 Test Passed."") if result == args['ret'] else print(f""\u274c Test Failed. nums={args['nums']}, expected: {args['ret']}, but got {result}"")","let testCases = [
  {
    ""nums"" :  [1,2,3,1],
    ""ret"" : true
  },
  {
    ""nums"" :  [1,2,3,4],
    ""ret"" : false
  },
  {
    ""nums"" :  [1,1,1,3,3,4,3,2,4,2],
    ""ret"" : true
  },
  {
    ""nums"" :  [1,2,3,4,5,6,7,8,9,10],
    ""ret"" : false
  },
  {
    ""nums"" :  [1],
    ""ret"" : false
  },
  {
    ""nums"" :  [],
    ""ret"" : false
  },
  {
    ""nums"" :  [-1,-2,3,4,3,4,5,6,7,8,9,10],
    ""ret"" : true
  },
  {
    ""nums"" :  [-1,0,1,2,3,4,5,6,7,8,9,10],
    ""ret"" : false
  },
  {
    ""nums"" :  [-1,-1,-1,-1,-1,0,1,2,3,4,5,6,7,8],
    ""ret"" : true
  },
  {
    ""nums"" :  [10,20,30,40,50,10],
    ""ret"" : true
  }
];

testCases.forEach(testCase => {
  if (containsDuplicate(testCase.nums) == testCase.ret) {
    console.log(""\u2705 Test Passed."")
  } else {
    console.log(`\u274c Test Failed. nums=${testCase.nums}, expected: ${testCase.ret}`)
  }
});",,
63b594e88ad4593d6b7b01cd,valid-anagram,"params = [
  {
    ""s"" :  ""anagram"",
    ""t"" : ""nagaram"",
    ""ret"" : True
  },
  {
    ""s"" :  ""rat"",
    ""t"" : ""car"",
    ""ret"" : False
  },
  {
    ""s"" :  ""hello"",
    ""t"" : ""olleh"",
    ""ret"" : True
  },
  {
    ""s"" :  ""a"",
    ""t"" : ""a"",
    ""ret"" : True
  },
  {
    ""s"" :  """",
    ""t"" : """",
    ""ret"" : True
  },
  {
    ""s"" :  ""abcd"",
    ""t"" : ""dcba"",
    ""ret"" : True
  },
  {
    ""s"" :  ""abcdefgh"",
    ""t"" : ""hgfedcba"",
    ""ret"" : True
  },
  {
    ""s"" :  ""abcdefgh"",
    ""t"" : ""hgfedcb"",
    ""ret"" : False
  },
  {
    ""s"" :  ""abcdefghijklmnopqrstuvwxyz"",
    ""t"" : ""zyxwvutsrqponmlkjihgfedcba"",
    ""ret"" : True
  },
  {
    ""s"" :  ""abcdefghijklmnopqrstuvwxyz"",
    ""t"" : ""zyxwvutsrqponmlkjihgfedcb"",
    ""ret"" : False
  }
]

obj = Solution()

for args in params:
    result = obj.isAnagram(args['s'], args['t'])
    print(""\u2705 Test Passed."") if result == args['ret'] else print(f""\u274c Test Failed. s={args['s']}, t={args['t']}, expected: {args['ret']}, but got {result}"")","let testCases = [
  {
    ""s"" :  ""anagram"",
    ""t"" : ""nagaram"",
    ""ret"" : true
  },
  {
    ""s"" :  ""rat"",
    ""t"" : ""car"",
    ""ret"" : false
  },
  {
    ""s"" :  ""hello"",
    ""t"" : ""olleh"",
    ""ret"" : true
  },
  {
    ""s"" :  ""a"",
    ""t"" : ""a"",
    ""ret"" : true
  },
  {
    ""s"" :  """",
    ""t"" : """",
    ""ret"" : true
  },
  {
    ""s"" :  ""abcd"",
    ""t"" : ""dcba"",
    ""ret"" : true
  },
  {
    ""s"" :  ""abcdefgh"",
    ""t"" : ""hgfedcba"",
    ""ret"" : true
  },
  {
    ""s"" :  ""abcdefgh"",
    ""t"" : ""hgfedcb"",
    ""ret"" : false
  },
  {
    ""s"" :  ""abcdefghijklmnopqrstuvwxyz"",
    ""t"" : ""zyxwvutsrqponmlkjihgfedcba"",
    ""ret"" : true
  },
  {
    ""s"" :  ""abcdefghijklmnopqrstuvwxyz"",
    ""t"" : ""zyxwvutsrqponmlkjihgfedcb"",
    ""ret"" : false
  }
];

testCases.forEach(testCase => {
  if (isAnagram(testCase.s, testCase.t) == testCase.ret) {
    console.log(""\u2705 Test Passed."")
  } else {
    console.log(`\u274c Test Failed. s=${testCase.s}, t=${test}`)
  }})",,
63b594e98ad4593d6b7b01ce,two-sum,"params = [
  {
    ""nums"" :  [2, 7, 11, 15],
    ""target"" : 9,
    ""ret"" : [0, 1]
  },
  {
    ""nums"" :  [3, 2, 4],
    ""target"" : 6,
    ""ret"" : [1, 2]
  },
  {
    ""nums"" :  [3, 3],
    ""target"" : 6,
    ""ret"" : [0, 1]
  },
  {
    ""nums"" :  [-1, -2, -3, -4, -5],
    ""target"" : -8,
    ""ret"" : [2, 4]
  },
  {
    ""nums"" :  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""target"" : 15,
    ""ret"" : [6, 7]
  },
  {
    ""nums"" :  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""target"" : 11,
    ""ret"" : [4, 5]
  },
  {
    ""nums"" : [1,9,13,20,47],
    ""target"": 10,
    ""ret"": [0, 1]
  },
  {
    ""nums"": [3,2,4,1,9],
    ""target"": 12,
    ""ret"": [0, 4]
  }
]

obj = Solution()
for args in params:
  res = obj.twoSum(args['nums'], args['target'])
  if res == args['ret']:
      print(""\u2705 Test Passed."")
  else:
      print(f""\u274c Test Failed. nums={args['nums']}, target={args['target']}, expected: {args['ret']} but got {res}"")","const testCases = [
  {
    ""nums"" :  [2, 7, 11, 15],
    ""target"" : 9,
    ""ret"" : [0, 1]
  },
  {
    ""nums"" :  [3, 2, 4],
    ""target"" : 6,
    ""ret"" : [1, 2]
  },
  {
    ""nums"" :  [3, 3],
    ""target"" : 6,
    ""ret"" : [0, 1]
  },
  {
    ""nums"" :  [-1, -2, -3, -4, -5],
    ""target"" : -8,
    ""ret"" : [2, 4]
  },
  {
    ""nums"" :  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""target"" : 15,
    ""ret"" : [4, 5]
  },
  {
    ""nums"" :  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""target"" : 11,
    ""ret"" : [1, 9]
  },
  {
    ""nums"" :  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""target"" : 20,
    ""ret"" : [8, 9]
  },
  {
    ""nums"" :  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""target"" : 21,
    ""ret"" : [0, 9]
  },
  {
    ""nums"" :  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""target"" : 30,
    ""ret"" : [9, 9]
  },
  {
    ""nums"" :  [1],
    ""target"" : 1,
    ""ret"" : [0, 0]
  }
];

for (let args of testCases) {
  if (JSON.stringify(twoSum(args.nums, args.target)) === JSON.stringify(args.ret)) {
    console.log(""\u2705 Test Passed."");
  } else {
    console.log(`\u274c Test Failed. nums=${args.nums}, target=${args.target}, expected=${args.ret}`);
  }
}",,
63b594ea8ad4593d6b7b01cf,group-anagrams,"params = [  
  { 
    ""strs"" : [""eat"",""tea"",""tan"",""ate"",""nat"",""bat""],
    ""ret"" : [[""bat""],[""nat"",""tan""],[""ate"",""eat"",""tea""]]
  },
  {
    ""strs"" : [""a""],
    ""ret"" : [[""a""]]
  },
  {
    ""strs"" : [""a"",""aa"",""aaa"",""aaaa"",""aaaaa"",""aaaaaa""],
    ""ret"" : [[""a""],[""aa""],[""aaa""],[""aaaa""],[""aaaaa""],[""aaaaaa""]]
  },
  {
    ""strs"" : [""a"",""ab"",""abc"",""abcd"",""abcde"",""abcdef""],
    ""ret"" : [['a'], ['ab'], ['abc'], ['abcd'], ['abcde'], ['abcdef']]
  },
  {
    ""strs"" : [""""],
    ""ret"" : [[""""]]
  },
  {
    ""strs"" : [""abc"",""cba"",""cab"",""acb"",""bac"",""bca""],
    ""ret"" : [[""abc"",""cba"",""cab"",""acb"",""bac"",""bca""]]
  },
  {
    ""strs"" : [""abc"",""cba"",""cab"",""acb"",""bac"",""bca"",""xyz""],
    ""ret"" : [[""abc"",""cba"",""cab"",""acb"",""bac"",""bca""],[""xyz""]]
  },
  {
    ""strs"" : [""abc"",""cba"",""cab"",""acb"",""bac"",""bca"",""xyz"",""zyx""],
    ""ret"" : [[""abc"",""cba"",""cab"",""acb"",""bac"",""bca""],[""xyz"",""zyx""]]
  },
  {
    ""strs"" : ["""",""a"",""aa"",""aaa""],
    ""ret"" : [[''], ['a'], ['aa'], ['aaa']]
  },
  {
    ""strs"" : ["""",""a"",""aa"",""aaa"",""ab"",""ba"",""aba"",""aab"",""baa"",""aab""],
    ""ret"" : [[''], ['a'], ['aa'], ['aaa'], ['ab', 'ba'], ['aba', 'aab', 'baa', 'aab']]
  },
  {
    ""strs"" : ["""",""a"",""aa"",""aaa"",""ab"",""ba"",""aba"",""aab"",""baa"",""aab"",""abc"",""cba"",""cab"",""acb"",""bac"",""bca"",""xyz"",""zyx""],
    ""ret"" : [[''], ['a'], ['aa'], ['aaa'], ['ab', 'ba'], ['aba', 'aab', 'baa', 'aab'], ['abc', 'cba', 'cab', 'acb', 'bac', 'bca'], ['xyz', 'zyx']]
  },
  {
    ""strs"" : ["""",""a"",""aa"",""aaa"",""ab"",""ba"",""aba"",""aab"",""baa"",""aab"",""abc"",""cba"",""cab"",""acb"",""bac"",""bca"",""xyz"",""zyx"",""aaaa"",""aaa"",""aaa"",""aaaa"",""aaa"",""aaaa"",""aaaa"",""aaa"",""aaa"",""aaa"",""aaaa""],
    ""ret"" : [[''], ['a'], ['aa'], ['aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa'], ['ab', 'ba'], ['aba', 'aab', 'baa', 'aab'], ['abc', 'cba', 'cab', 'acb', 'bac', 'bca'], ['xyz', 'zyx'], ['aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa']]
  }
]

obj = Solution()

for args in params:
  res = obj.groupAnagrams(args['strs'])
  args_ret = args['ret']
  
  def compare(lst1, lst2):
    # Sort the strings in each nested list
    lst1 = [sorted(sublist) for sublist in lst1]
    lst2 = [sorted(sublist) for sublist in lst2]
    # Sort the nested lists
    lst1.sort()
    lst2.sort()
    # Compare the two lists
    return lst1 == lst2


  print(""\u2705 Test Passed."") if compare(res, args_ret) else print(f""\u274c Test Failed. strs={args['strs']}, expected: {args_ret} but got {res}"")","let params = [  
  { 
    ""strs"" : [""eat"",""tea"",""tan"",""ate"",""nat"",""bat""],
    ""ret"" : [[""bat""],[""nat"",""tan""],[""ate"",""eat"",""tea""]]
  },
  {
    ""strs"" : [""a""],
    ""ret"" : [[""a""]]
  },
  {
    ""strs"" : [""a"",""aa"",""aaa"",""aaaa"",""aaaaa"",""aaaaaa""],
    ""ret"" : [[""a""],[""aa""],[""aaa""],[""aaaa""],[""aaaaa""],[""aaaaaa""]]
  },
  {
    ""strs"" : [""a"",""ab"",""abc"",""abcd"",""abcde"",""abcdef""],
    ""ret"" : [['a'], ['ab'], ['abc'], ['abcd'], ['abcde'], ['abcdef']]
  },
  {
    ""strs"" : [""""],
    ""ret"" : [[""""]]
  },
  {
    ""strs"" : [""abc"",""cba"",""cab"",""acb"",""bac"",""bca""],
    ""ret"" : [[""abc"",""cba"",""cab"",""acb"",""bac"",""bca""]]
  },
  {
    ""strs"" : [""abc"",""cba"",""cab"",""acb"",""bac"",""bca"",""xyz""],
    ""ret"" : [[""abc"",""cba"",""cab"",""acb"",""bac"",""bca""],[""xyz""]]
  },
  {
    ""strs"" : [""abc"",""cba"",""cab"",""acb"",""bac"",""bca"",""xyz"",""zyx""],
    ""ret"" : [[""abc"",""cba"",""cab"",""acb"",""bac"",""bca""],[""xyz"",""zyx""]]
  },
  {
    ""strs"" : ["""",""a"",""aa"",""aaa""],
    ""ret"" : [[''], ['a'], ['aa'], ['aaa']]
  },
  {
    ""strs"" : ["""",""a"",""aa"",""aaa"",""ab"",""ba"",""aba"",""aab"",""baa"",""aab""],
    ""ret"" : [[''], ['a'], ['aa'], ['aaa'], ['ab', 'ba'], ['aba', 'aab', 'baa', 'aab']]
  },
  {
    ""strs"" : ["""",""a"",""aa"",""aaa"",""ab"",""ba"",""aba"",""aab"",""baa"",""aab"",""abc"",""cba"",""cab"",""acb"",""bac"",""bca"",""xyz"",""zyx""],
    ""ret"" : [[''], ['a'], ['aa'], ['aaa'], ['ab', 'ba'], ['aba', 'aab', 'baa', 'aab'], ['abc', 'cba', 'cab', 'acb', 'bac', 'bca'], ['xyz', 'zyx']]
  },
  {
    ""strs"" : ["""",""a"",""aa"",""aaa"",""ab"",""ba"",""aba"",""aab"",""baa"",""aab"",""abc"",""cba"",""cab"",""acb"",""bac"",""bca"",""xyz"",""zyx"",""aaaa"",""aaa"",""aaa"",""aaaa"",""aaa"",""aaaa"",""aaaa"",""aaa"",""aaa"",""aaa"",""aaaa""],
    ""ret"" : [[''], ['a'], ['aa'], ['aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa'], ['ab', 'ba'], ['aba', 'aab', 'baa', 'aab'], ['abc', 'cba', 'cab', 'acb', 'bac', 'bca'], ['xyz', 'zyx'], ['aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa']]
  }
]

function compare(lst1, lst2) {
  // Sort the strings in each nested list
  lst1 = lst1.map(sublist => sublist.sort());
  lst2 = lst2.map(sublist => sublist.sort());
  // Sort the nested lists
  lst1.sort();
  lst2.sort();
  // Compare the two lists
  return JSON.stringify(lst1) === JSON.stringify(lst2);
}

for (let args of params) {
  let res = groupAnagrams(args.strs);
  let args_ret = args.ret;

  console.log(compare(res, args_ret) ? ""\u2705 Test Passed."" : `\u274c Test Failed. strs=${args.strs}, expected: ${args_ret} but got ${res}`);
}",,
63b594eb8ad4593d6b7b01d0,top-k-frequent-elements,"params = [
  {
    ""nums"" : [1,1,1,2,2,3],
    ""k"" : 2,
    ""ret"" : [1,2]
  },
  {
    ""nums"" : [1],
    ""k"" : 1,
    ""ret"" : [1]
  },
  {
    ""nums"" : [1,2,2,2,3,3,3],
    ""k"" : 2,
    ""ret"" : [2,3]
  },
  {
    ""nums"" : [1,1,1,2,2,3,3,3,4,4,4,4],
    ""k"" : 3,
    ""ret"" : [4,1,3]
  },
  {
    ""nums"" : [1,1,1,2,2,3,3,3,4,4,4,4],
    ""k"" : 4,
    ""ret"" : [4,1,3,2]
  },
  {
    ""nums"" : [1,1,1,2,2,3,3,3,4,4,4,4],
    ""k"" : 5,
    ""ret"" : [4,1,3,2]
  },
  {
    ""nums"" : [1,1,1,2,2,3,3,3,4,4,4,4],
    ""k"" : 1,
    ""ret"" : [4]
  },
  {
    ""nums"" : [1,1,1,2,2,3,3,3,4,4,4,4],
    ""k"" : 6,
    ""ret"" : [4,1,3,2]
  },
  {
    ""nums"" : [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5],
    ""k"" : 4,
    ""ret"" : [1,2,3,4]
  },
  {
    ""nums"" : [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6],
    ""k"" : 6,
    ""ret"" : [1,2,3,4,5,6]
  }
]
obj = Solution()
for args in params:
    print(""\u2705 Test Passed."") if obj.topKFrequent(args['nums'], args['k']) == args['ret'] else print(f""\u274c Test Failed. nums={args['nums']}, k={args['k']}, expected: {args['ret']}"")","let params = [
  {
    ""nums"" : [1,1,1,2,2,3],
    ""k"" : 2,
    ""ret"" : [1,2]
  },
  {
    ""nums"" : [1],
    ""k"" : 1,
    ""ret"" : [1]
  },
  {
    ""nums"" : [1,2,2,2,3,3,3],
    ""k"" : 2,
    ""ret"" : [2,3]
  },
  {
    ""nums"" : [1,1,1,2,2,3,3,3,4,4,4,4],
    ""k"" : 3,
    ""ret"" : [4,1,3]
  },
  {
    ""nums"" : [1,1,1,2,2,3,3,3,4,4,4,4],
    ""k"" : 4,
    ""ret"" : [4,1,3,2]
  },
  {
    ""nums"" : [1,1,1,2,2,3,3,3,4,4,4,4],
    ""k"" : 5,
    ""ret"" : [4,1,3,2]
  },
  {
    ""nums"" : [1,1,1,2,2,3,3,3,4,4,4,4],
    ""k"" : 1,
    ""ret"" : [4]
  },
  {
    ""nums"" : [1,1,1,2,2,3,3,3,4,4,4,4],
    ""k"" : 6,
    ""ret"" : [4,1,3,2]
  },
  {
    ""nums"" : [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5],
    ""k"" : 4,
    ""ret"" : [1,2,3,4]
  },
  {
    ""nums"" : [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6],
    ""k"" : 6,
    ""ret"" : [1,2,3,4,5,6]
  }
]

for (let args of params) {
  if (JSON.stringify(topKFrequent(args.nums, args.k)) === JSON.stringify(args.ret)) {
      console.log(""\u2705 Test Passed."")
  } else {
      console.log(`\u274c Test Failed. nums=${args.nums}, k=${args.k}, expected: ${args.ret}`)
  }
}",,
63b594eb8ad4593d6b7b01d1,product-of-array-except-self,"params = [
  {
    ""nums"" : [1,2,3,4],
    ""ret"" : [24,12,8,6]
  },
  {
    ""nums"" : [-1,1,0,-3,3],
    ""ret"" : [0,0,9,0,0]
  },
  {
    ""nums"" : [1,2,3,4,5],
    ""ret"" : [120,60,40,30,24]
  },
  {
    ""nums"" : [-1,0,1],
    ""ret"" : [0, -1, 0]
  },
  {
    ""nums"" : [1,1,1,1],
    ""ret"" : [1,1,1,1]
  },
  {
    ""nums"" : [1,2,3],
    ""ret"" : [6,3,2]
  },
  {
    ""nums"" : [-1,-2,-3],
    ""ret"" : [6, 3, 2]
  },
  {
    ""nums"" : [0,1,2],
    ""ret"" : [2,0,0]
  },
  {
    ""nums"" : [1,1,2,2],
    ""ret"" : [4,4,2,2]
  },
  {
    ""nums"" : [1,2,3,4,5,6],
    ""ret"" : [720,360,240,180,144,120]
  }
]

obj = Solution()
for args in params:
  result = obj.productExceptSelf(args[""nums""])
  print(""\u2705 Test Passed."") if result == args[""ret""] else print(f""\u274c Test Failed. nums={args['nums']}, expected: {args['ret']} but got {result}"")","let params = [
  {
    ""nums"" : [1,2,3,4],
    ""ret"" : [24,12,8,6]
  },
  {
    ""nums"" : [-1,1,0,-3,3],
    ""ret"" : [0,0,9,0,0]
  },
  {
    ""nums"" : [1,2,3,4,5],
    ""ret"" : [120,60,40,30,24]
  },
  {
    ""nums"" : [-1,0,1],
    ""ret"" : [0, -1, 0]
  },
  {
    ""nums"" : [1,1,1,1],
    ""ret"" : [1,1,1,1]
  },
  {
    ""nums"" : [1,2,3],
    ""ret"" : [6,3,2]
  },
  {
    ""nums"" : [-1,-2,-3],
    ""ret"" : [6, 3, 2]
  },
  {
    ""nums"" : [0,1,2],
    ""ret"" : [2,0,0]
  },
  {
    ""nums"" : [1,1,2,2],
    ""ret"" : [4,4,2,2]
  },
  {
    ""nums"" : [1,2,3,4,5,6],
    ""ret"" : [720,360,240,180,144,120]
  }
]

params.forEach(args => {
  if (JSON.stringify(productExceptSelf(args.nums)) === JSON.stringify(args.ret)) console.log(""\u2705 Test Passed."")
  else console.log(`\u274c Test Failed. nums=${args.nums}, expected: ${args.ret}`)
})",,
63b594ec8ad4593d6b7b01d2,valid-sudoku,"params = [    
    {       
      ""board"": [[""5"",""3"",""."",""."",""7"",""."",""."",""."","".""],
                [""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],
                [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],
                [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],
                [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],
                [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],
                [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],
                [""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],
                [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]],
      ""ret"": True
    },
    {
      ""board"": [[""8"",""3"",""."",""."",""7"",""."",""."",""."","".""],
                [""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],
                [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],
                [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],
                [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],
                [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],
                [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],
                [""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],
                [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]],
      ""ret"": False
    },
    {
      ""board"": [[""."",""."",""."",""."",""5"",""."",""."",""1"","".""],
                [""."",""4"",""."",""3"",""."",""."",""."",""."","".""],
                [""."",""."",""."",""."",""."",""3"",""."",""."",""1""],
                [""8"",""."",""."",""."",""."",""."",""."",""2"","".""],
                [""."",""."",""2"",""."",""7"",""."",""."",""."","".""],
                [""."",""1"",""5"",""."",""."",""."",""."",""."","".""],
                [""."",""."",""."",""."",""."",""2"",""."",""."","".""],
                [""."",""2"",""."",""9"",""."",""."",""."",""."","".""],
                [""."",""."",""4"",""."",""."",""."",""."",""."","".""]],
      ""ret"": False
    },
    {
      ""board"": [[""5"",""3"",""."",""."",""7"",""."",""."",""."",""5""],
                [""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],
                [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],
                [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],
                [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],
                [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],
                [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],
                [""."",""."",""."",""4"",""1"",""9"",""."",""."","".""],
                [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]],
      ""ret"" : False
    },
    {
      ""board"": [[""5"",""3"",""4"",""6"",""7"",""8"",""9"",""1"",""2""]
              ,[""6"",""7"",""2"",""1"",""9"",""5"",""3"",""4"",""8""]
              ,[""1"",""9"",""8"",""3"",""4"",""2"",""5"",""6"",""7""]
              ,[""8"",""5"",""9"",""7"",""6"",""1"",""4"",""2"",""3""]
              ,[""4"",""2"",""6"",""8"",""5"",""3"",""7"",""9"",""1""]
              ,[""7"",""1"",""3"",""9"",""2"",""4"",""8"",""5"",""6""]
              ,[""9"",""6"",""1"",""5"",""3"",""7"",""2"",""8"",""4""]
              ,[""2"",""8"",""7"",""4"",""1"",""9"",""6"",""3"",""5""]
              ,[""3"",""4"",""5"",""2"",""8"",""6"",""1"",""7"",""9""]],
      ""ret"" : True
    },
    {
      ""board"":  [[""7"",""8"",""1"",""4"",""6"",""2"",""5"",""9"",""3""]
                ,[""2"",""4"",""3"",""5"",""9"",""7"",""1"",""6"",""8""]
                ,[""5"",""6"",""9"",""8"",""1"",""3"",""7"",""2"",""4""]
                ,[""8"",""2"",""5"",""1"",""7"",""9"",""3"",""4"",""6""]
                ,[""1"",""9"",""7"",""3"",""4"",""6"",""8"",""5"",""2""]
                ,[""3"",""7"",""4"",""2"",""5"",""8"",""9"",""1"",""6""]
                ,[""9"",""1"",""2"",""6"",""3"",""5"",""4"",""8"",""7""]
                ,[""6"",""5"",""8"",""7"",""2"",""1"",""9"",""3"",""5""]
                ,[""4"",""3"",""6"",""9"",""8"",""7"",""2"",""5"",""1""]],
      ""ret"": False
    },
    {
     ""board"": [[""5"",""3"",""9"",""6"",""7"",""4"",""8"",""2"",""1""]
              ,[""6"",""7"",""2"",""1"",""9"",""5"",""3"",""4"",""8""]
              ,[""1"",""9"",""8"",""3"",""4"",""2"",""5"",""6"",""7""]
              ,[""8"",""5"",""9"",""7"",""6"",""1"",""4"",""3"",""2""]
              ,[""4"",""2"",""6"",""8"",""5"",""3"",""7"",""9"",""1""]
              ,[""7"",""1"",""3"",""9"",""2"",""8"",""6"",""5"",""4""]
              ,[""9"",""6"",""1"",""5"",""3"",""7"",""2"",""8"",""3""]
              ,[""2"",""8"",""7"",""4"",""1"",""9"",""6"",""3"",""5""]
              ,[""3"",""4"",""5"",""2"",""8"",""6"",""1"",""7"",""9""]],
    ""ret"": False
    },
    {
      ""board"": [[""."",""4"",""9"",""."",""7"",""."",""."",""."",""1""],
                [""6"",""."",""."",""2"",""9"",""5"",""."",""."","".""],
                [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],
                [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],
                [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],
                [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],
                [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],
                [""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],
                [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]],
      ""ret"": False
    },
    {
      ""board"": [[""."",""4"",""."",""8"",""5"",""."",""."",""1"","".""],
                [""."",""."",""."",""."",""."",""9"",""."",""."",""4""],
                [""."",""."",""5"",""."",""1"",""."",""3"",""."","".""],
                [""."",""9"",""."",""."",""."",""."",""."",""."",""7""],
                [""1"",""."",""."",""."",""."",""."",""."",""."",""5""],
                [""8"",""."",""."",""."",""."",""."",""."",""4"","".""],
                [""."",""."",""3"",""."",""6"",""."",""5"",""."","".""],
                [""5"",""."",""."",""9"",""."",""."",""."",""."","".""],
                [""."",""2"",""."",""."",""8"",""."",""."",""7"","".""]],
      ""ret"": True
    },
    {
      ""board"": [[""5"",""3"",""."",""."",""7"",""."",""."",""."","".""],
                [""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],
                [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],
                [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],
                [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],
                [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],
                [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],
                [""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],
                [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]],
      ""ret"": True
    }
]

obj = Solution()

for args in params:
  result = obj.isValidSudoku(args['board'])
  print(""\u2705 Test Passed."") if result == args['ret'] else print(f""\u274c Test Failed. board={args['board']}, expected: {args['ret']} but got {result}"")","let params = [    
  {       
    ""board"": [[""5"",""3"",""."",""."",""7"",""."",""."",""."","".""],
              [""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],
              [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],
              [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],
              [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],
              [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],
              [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],
              [""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],
              [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]],
    ""ret"": true
  },
  {
    ""board"": [[""8"",""3"",""."",""."",""7"",""."",""."",""."","".""],
              [""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],
              [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],
              [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],
              [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],
              [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],
              [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],
              [""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],
              [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]],
    ""ret"": false
  },
  {
    ""board"": [[""."",""."",""."",""."",""5"",""."",""."",""1"","".""],
              [""."",""4"",""."",""3"",""."",""."",""."",""."","".""],
              [""."",""."",""."",""."",""."",""3"",""."",""."",""1""],
              [""8"",""."",""."",""."",""."",""."",""."",""2"","".""],
              [""."",""."",""2"",""."",""7"",""."",""."",""."","".""],
              [""."",""1"",""5"",""."",""."",""."",""."",""."","".""],
              [""."",""."",""."",""."",""."",""2"",""."",""."","".""],
              [""."",""2"",""."",""9"",""."",""."",""."",""."","".""],
              [""."",""."",""4"",""."",""."",""."",""."",""."","".""]],
    ""ret"": false
  },
  {
    ""board"": [[""5"",""3"",""."",""."",""7"",""."",""."",""."",""5""],
              [""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],
              [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],
              [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],
              [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],
              [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],
              [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],
              [""."",""."",""."",""4"",""1"",""9"",""."",""."","".""],
              [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]],
    ""ret"" : false
  },
  {
    ""board"": [[""5"",""3"",""4"",""6"",""7"",""8"",""9"",""1"",""2""]
            ,[""6"",""7"",""2"",""1"",""9"",""5"",""3"",""4"",""8""]
            ,[""1"",""9"",""8"",""3"",""4"",""2"",""5"",""6"",""7""]
            ,[""8"",""5"",""9"",""7"",""6"",""1"",""4"",""2"",""3""]
            ,[""4"",""2"",""6"",""8"",""5"",""3"",""7"",""9"",""1""]
            ,[""7"",""1"",""3"",""9"",""2"",""4"",""8"",""5"",""6""]
            ,[""9"",""6"",""1"",""5"",""3"",""7"",""2"",""8"",""4""]
            ,[""2"",""8"",""7"",""4"",""1"",""9"",""6"",""3"",""5""]
            ,[""3"",""4"",""5"",""2"",""8"",""6"",""1"",""7"",""9""]],
    ""ret"" : true
  },
  {
    ""board"":  [[""7"",""8"",""1"",""4"",""6"",""2"",""5"",""9"",""3""]
              ,[""2"",""4"",""3"",""5"",""9"",""7"",""1"",""6"",""8""]
              ,[""5"",""6"",""9"",""8"",""1"",""3"",""7"",""2"",""4""]
              ,[""8"",""2"",""5"",""1"",""7"",""9"",""3"",""4"",""6""]
              ,[""1"",""9"",""7"",""3"",""4"",""6"",""8"",""5"",""2""]
              ,[""3"",""7"",""4"",""2"",""5"",""8"",""9"",""1"",""6""]
              ,[""9"",""1"",""2"",""6"",""3"",""5"",""4"",""8"",""7""]
              ,[""6"",""5"",""8"",""7"",""2"",""1"",""9"",""3"",""5""]
              ,[""4"",""3"",""6"",""9"",""8"",""7"",""2"",""5"",""1""]],
    ""ret"": false
  },
  {
   ""board"": [[""5"",""3"",""9"",""6"",""7"",""4"",""8"",""2"",""1""]
            ,[""6"",""7"",""2"",""1"",""9"",""5"",""3"",""4"",""8""]
            ,[""1"",""9"",""8"",""3"",""4"",""2"",""5"",""6"",""7""]
            ,[""8"",""5"",""9"",""7"",""6"",""1"",""4"",""3"",""2""]
            ,[""4"",""2"",""6"",""8"",""5"",""3"",""7"",""9"",""1""]
            ,[""7"",""1"",""3"",""9"",""2"",""8"",""6"",""5"",""4""]
            ,[""9"",""6"",""1"",""5"",""3"",""7"",""2"",""8"",""3""]
            ,[""2"",""8"",""7"",""4"",""1"",""9"",""6"",""3"",""5""]
            ,[""3"",""4"",""5"",""2"",""8"",""6"",""1"",""7"",""9""]],
  ""ret"": false
  },
  {
    ""board"": [[""."",""4"",""9"",""."",""7"",""."",""."",""."",""1""],
              [""6"",""."",""."",""2"",""9"",""5"",""."",""."","".""],
              [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],
              [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],
              [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],
              [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],
              [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],
              [""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],
              [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]],
    ""ret"": false
  },
  {
    ""board"": [[""."",""4"",""."",""8"",""5"",""."",""."",""1"","".""],
              [""."",""."",""."",""."",""."",""9"",""."",""."",""4""],
              [""."",""."",""5"",""."",""1"",""."",""3"",""."","".""],
              [""."",""9"",""."",""."",""."",""."",""."",""."",""7""],
              [""1"",""."",""."",""."",""."",""."",""."",""."",""5""],
              [""8"",""."",""."",""."",""."",""."",""."",""4"","".""],
              [""."",""."",""3"",""."",""6"",""."",""5"",""."","".""],
              [""5"",""."",""."",""9"",""."",""."",""."",""."","".""],
              [""."",""2"",""."",""."",""8"",""."",""."",""7"","".""]],
    ""ret"": true
  },
  {
    ""board"": [[""5"",""3"",""."",""."",""7"",""."",""."",""."","".""],
              [""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],
              [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],
              [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],
              [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],
              [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],
              [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],
              [""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],
              [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]],
    ""ret"": true
  }
]

for (let args of params) {
  let result = isValidSudoku(args.board);
  console.log(result === args.ret ? ""\u2705 Test Passed."" : `\u274c Test Failed. board=${args.board}, expected: ${args.ret} but got ${result}`);
}",,
63b594ed8ad4593d6b7b01d3,encode-and-decode-strings,"params = [
    {
        ""strs"": [""lint"", ""code"", ""love"", ""you""],
        ""encoded"": ""lint:;code:;love:;you"",
        ""ret"": [""lint"", ""code"", ""love"", ""you""]
    },
    {
        ""strs"": [""we"", ""say"", "":"", ""yes""],
        ""encoded"": ""we:;say:;:::;yes"",
        ""ret"": [""we"", ""say"", "":"", ""yes""]
    },
    {
        ""strs"": [""hello"", ""world""],
        ""encoded"": ""hello:;world"",
        ""ret"": [""hello"", ""world""]
    },
    {
        ""strs"": [""a"", ""b"", ""c"", ""d"", ""e""],
        ""encoded"": ""a:;b:;c:;d:;e"",
        ""ret"": [""a"", ""b"", ""c"", ""d"", ""e""]
    },
    {
        ""strs"": [""apple"", ""banana"", ""cherry"", ""date""],
        ""encoded"": ""apple:;banana:;cherry:;date"",
        ""ret"": [""apple"", ""banana"", ""cherry"", ""date""]
    },
    {
        ""strs"": [""abc"", ""def"", ""ghi"", ""jkl"", ""mno"", ""pqr"", ""stu"", ""vw"", ""xyz""],
        ""encoded"": ""abc:;def:;ghi:;jkl:;mno:;pqr:;stu:;vw:;xyz"",
        ""ret"": [""abc"", ""def"", ""ghi"", ""jkl"", ""mno"", ""pqr"", ""stu"", ""vw"", ""xyz""]
    },
    {
        ""strs"": [""cat"", ""dog"", ""bird"", ""fish"", ""lion""],
        ""encoded"": ""cat:;dog:;bird:;fish:;lion"",
        ""ret"": [""cat"", ""dog"", ""bird"", ""fish"", ""lion""]
    },
    {
        ""strs"": [],
        ""encoded"": """",
        ""ret"": []
    },
    {
        ""strs"": ["""", """", """", """"],
        ""encoded"": "":::"",
        ""ret"": ["""", """", """", """"]
    }
]

obj = Solution()
for args in params:
  encoded_str = obj.encode(args['strs'])
  decoded_strs = obj.decode(encoded_str)
  print(""\u2705 Test Passed."") if decoded_strs == args['ret'] else print(f""\u274c Test Failed. Input: {args['strs']}, expected: {args['ret']} but got {decoded_strs}"")","let params = [
  {
      ""strs"": [""lint"", ""code"", ""love"", ""you""],
      ""encoded"": ""lint:;code:;love:;you"",
      ""ret"": [""lint"", ""code"", ""love"", ""you""]
  },
  {
      ""strs"": [""we"", ""say"", "":"", ""yes""],
      ""encoded"": ""we:;say:;:::;yes"",
      ""ret"": [""we"", ""say"", "":"", ""yes""]
  },
  {
      ""strs"": [""hello"", ""world""],
      ""encoded"": ""hello:;world"",
      ""ret"": [""hello"", ""world""]
  },
  {
      ""strs"": [""a"", ""b"", ""c"", ""d"", ""e""],
      ""encoded"": ""a:;b:;c:;d:;e"",
      ""ret"": [""a"", ""b"", ""c"", ""d"", ""e""]
  },
  {
      ""strs"": [""apple"", ""banana"", ""cherry"", ""date""],
      ""encoded"": ""apple:;banana:;cherry:;date"",
      ""ret"": [""apple"", ""banana"", ""cherry"", ""date""]
  },
  {
      ""strs"": [""abc"", ""def"", ""ghi"", ""jkl"", ""mno"", ""pqr"", ""stu"", ""vw"", ""xyz""],
      ""encoded"": ""abc:;def:;ghi:;jkl:;mno:;pqr:;stu:;vw:;xyz"",
      ""ret"": [""abc"", ""def"", ""ghi"", ""jkl"", ""mno"", ""pqr"", ""stu"", ""vw"", ""xyz""]
  },
  {
      ""strs"": [""cat"", ""dog"", ""bird"", ""fish"", ""lion""],
      ""encoded"": ""cat:;dog:;bird:;fish:;lion"",
      ""ret"": [""cat"", ""dog"", ""bird"", ""fish"", ""lion""]
  },
  {
      ""strs"": [],
      ""encoded"": """",
      ""ret"": []
  },
  {
      ""strs"": ["""", """", """", """"],
      ""encoded"": "":::"",
      ""ret"": ["""", """", """", """"]
  }
]

for (let args of params) {
  let encoded_str = encode(args.strs);
  let decoded_strs = decode(encoded_str);
  console.log(decoded_strs === args.ret ? ""\u2705 Test Passed."" : `\u274c Test Failed. Input: ${args.strs}, expected: ${args.ret} but got ${decoded_strs}`);
}",,
63b594ee8ad4593d6b7b01d4,longest-consecutive-sequence,"params = [
    {
        ""nums"": [100,4,200,1,3,2],
        ""ret"": 4
    },
    {
        ""nums"": [0,3,7,2,5,8,4,6,0,1],
        ""ret"": 9
    },
    {
        ""nums"": [],
        ""ret"": 0
    },
    {
        ""nums"": [1],
        ""ret"": 1
    },
    {
        ""nums"": [1,1,1,1,1],
        ""ret"": 1
    },
    {
        ""nums"": [1,2,1,2,1,2],
        ""ret"": 2
    },
    {
        ""nums"": [-1, 0, 1],
        ""ret"": 3
    },
    {
        ""nums"": [1,2,0,1],
        ""ret"": 3
    },
    {
        ""nums"": [9,1,4,7,3,-1,0,5,8,-2,6],
        ""ret"": 7
    },
    {
        ""nums"": [1,3,5,2,4],
        ""ret"": 5
    },
]

obj = Solution()
for args in params:
  result = obj.longestConsecutive(args['nums'])
  print(""\u2705 Test Passed."") if result == args['ret'] else print(f""\u274c Test Failed. Input: {args['nums']}, expected: {args['ret']} but got {result}"")","let params = [
  {
      ""nums"": [100,4,200,1,3,2],
      ""ret"": 4
  },
  {
      ""nums"": [0,3,7,2,5,8,4,6,0,1],
      ""ret"": 9
  },
  {
      ""nums"": [],
      ""ret"": 0
  },
  {
      ""nums"": [1],
      ""ret"": 1
  },
  {
      ""nums"": [1,1,1,1,1],
      ""ret"": 1
  },
  {
      ""nums"": [1,2,1,2,1,2],
      ""ret"": 2
  },
  {
      ""nums"": [-1, 0, 1],
      ""ret"": 3
  },
  {
      ""nums"": [1,2,0,1],
      ""ret"": 3
  },
  {
      ""nums"": [9,1,4,7,3,-1,0,5,8,-2,6],
      ""ret"": 7
  },
  {
      ""nums"": [1,3,5,2,4],
      ""ret"": 5
  },
]

for (let args of params) {
  let result = longestConsecutive(args.nums);
  console.log(result === args.ret ? ""\u2705 Test Passed."" : `\u274c Test Failed. Input: ${args.nums}, expected: ${args.ret} but got ${result}`);
}",,
63b594ef8ad4593d6b7b01d5,valid-palindrome,"params = [
    {
        ""s"": ""A man, a plan, a canal: Panama"",
        ""ret"": True
    },
    {
        ""s"": ""race a car"",
        ""ret"": False
    },
    {
        ""s"": "" "",
        ""ret"": True
    },
    {
        ""s"": """",
        ""ret"": True
    },
    {
        ""s"": ""!@#$%^&*()_+"",
        ""ret"": True
    },
    {
        ""s"": ""121"",
        ""ret"": True
    },
    {
        ""s"": ""ab_a"",
        ""ret"": True
    },
    {
        ""s"" : ""This is a test sentence!"",
        ""ret"" : False
    },
    {
        ""s"": ""A man, a plan, a canal: Panama!"",
        ""ret"": True
    },

]
obj = Solution()
for args in params:
  print(""_ Test Passed."") if obj.isPalindrome(args['s']) == args['ret'] else print(f""_ Test Failed. Input: {args['s']}, expected: {args['ret']}"")","let params = [
  {
      ""s"": ""A man, a plan, a canal: Panama"",
      ""ret"": True
  },
  {
      ""s"": ""race a car"",
      ""ret"": False
  },
  {
      ""s"": "" "",
      ""ret"": True
  },
  {
      ""s"": """",
      ""ret"": True
  },
  {
      ""s"": ""!@#$%^&*()_+"",
      ""ret"": True
  },
  {
      ""s"": ""121"",
      ""ret"": True
  },
  {
      ""s"": ""ab_a"",
      ""ret"": True
  },
  {
      ""s"" : ""This is a test sentence!"",
      ""ret"" : False
  },
  {
      ""s"": ""A man, a plan, a canal: Panama!"",
      ""ret"": True
  },
]

for (let i = 0; i < params.length; i++) {
  let args = params[i];
  console.log(isPalindrome(args['s']) === args['ret'] ? ""\u2705 Test Passed."" : `\u274c Test Failed. Input: ${args['s']}, expected: ${args['ret']}`);
}",,
63b594f68ad4593d6b7b01d6,two-sum-ii-input-array-is-sorted,"params = [
    {
        ""numbers"": [1, 2, 3, 4, 5],
        ""target"": 5,
        ""ret"": [1, 4]
    },
    {
        ""numbers"": [1, 2, 3, 4, 5],
        ""target"": 6,
        ""ret"": [1, 5]
    },
    {
        ""numbers"": [1, 2, 3, 4, 5, 6],
        ""target"": 7,
        ""ret"": [1, 6]
    },
    {
        ""numbers"": [1, 2, 3, 4, 5, 6],
        ""target"": 8,
        ""ret"": [2, 6]
    },
    {
        ""numbers"": [1, 2, 3, 4, 5, 6],
        ""target"": 9,
        ""ret"": [3, 6]
    },
    {
        ""numbers"": [1, 2, 3, 4, 5, 6],
        ""target"": 10,
        ""ret"": [4, 6]
    },
    {
        ""numbers"": [1, 2, 3, 4, 5, 6],
        ""target"": 11,
        ""ret"": [5, 6]
    },
    {
      ""numbers"": [2,7,11,15],
      ""target"": 9,
      ""ret"": [1,2]
    },
    {
    ""numbers"": [2,3,4],
    ""target"": 6,
    ""ret"": [1,3]
    },
    {
      ""numbers"": [-1,0],
      ""target"": -1,
      ""ret"": [1,2]
    }
]

obj = Solution()
for args in params:
    print(""\u2705 Test Passed."") if obj.twoSum(args['numbers'], args['target']) == args['ret'] else print(f""\u274c Test Failed. Input: {args['numbers']}, {args['target']}, expected: {args['ret']}"")","let params = [
  {
      ""numbers"": [1, 2, 3, 4, 5],
      ""target"": 5,
      ""ret"": [1, 4]
  },
  {
      ""numbers"": [1, 2, 3, 4, 5],
      ""target"": 6,
      ""ret"": [1, 5]
  },
  {
      ""numbers"": [1, 2, 3, 4, 5, 6],
      ""target"": 7,
      ""ret"": [1, 6]
  },
  {
      ""numbers"": [1, 2, 3, 4, 5, 6],
      ""target"": 8,
      ""ret"": [2, 6]
  },
  {
      ""numbers"": [1, 2, 3, 4, 5, 6],
      ""target"": 9,
      ""ret"": [3, 6]
  },
  {
      ""numbers"": [1, 2, 3, 4, 5, 6],
      ""target"": 10,
      ""ret"": [4, 6]
  },
  {
      ""numbers"": [1, 2, 3, 4, 5, 6],
      ""target"": 11,
      ""ret"": [5, 6]
  },
  {
    ""numbers"": [2,7,11,15],
    ""target"": 9,
    ""ret"": [1,2]
  },
  {
  ""numbers"": [2,3,4],
  ""target"": 6,
  ""ret"": [1,3]
  },
  {
    ""numbers"": [-1,0],
    ""target"": -1,
    ""ret"": [1,2]
  }
]

for (let i = 0; i < params.length; i++) {
  let args = params[i];
  console.log(twoSum(args['numbers'], args['target']) === args['ret'] ? '\u2705 Test Passed.' : `\u274c Test Failed. Input: ${args['numbers']}, ${args['target']}, expected: ${args['ret']}`);
}",,
63b594f68ad4593d6b7b01d7,3-sum,"params = [
{
""input"": [-1,0,1,2,-1,-4],
""output"": [[-1,-1,2],[-1,0,1]]
},
{
""input"": [0,1,1],
""output"": []
},
{
""input"": [0,0,0],
""output"": [[0,0,0]]
},
{
""input"": [1,2,3,4,5,6],
""output"": []
},
{
""input"": [-1,-2,-3,-4,-5,-6],
""output"": []
},
{
""input"": [1,1,1,1,1,1],
""output"": []
},
{
""input"": [-1,-1,-1,-1,-1,-1],
""output"": []
},
{
""input"": [-1,1,-1,1,-1,1],
""output"": []
},
{
""input"": [-1,0,1,2,3,4,5,6,7,8,9,10],
""output"": [[-1, 0, 1]]
},
{
""input"": [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0],
""output"": []
},
{
""input"": [1,-1,0,1,-1,0],
""output"": [[-1, 0, 1]]
},
{
""input"": [1,1,-2],
""output"": [[-2,1,1]]
},
{
""input"": [1,2,3,-3,-2,-1],
""output"": [[-3, 1, 2], [-2, -1, 3]]
},
{
""input"": [1,1,1,-1,-1,-1],
""output"": []
},
{
""input"": [1,1,1,1,1,-4],
""output"": []
},
{
""input"": [-1,-1,0,1,1,2],
""output"": [[-1, -1, 2], [-1, 0, 1]]
},
{
""input"": [-1,-1,-1,0,0,0],
""output"": [[0, 0, 0]]
},
{
""input"": [1,1,1,1,1,1,-6],
""output"": []
},
{
""input"": [-1,-1,-1,-1,-1,5],
""output"": []
},
{
""input"": [-1,1,-1,1,-1,1,0],
""output"": [[-1, 0, 1]]
}
]

obj = Solution()
for test in params:
    input_list = test[""input""]
    expected_output = test[""output""]
    result = obj.threeSum(input_list)
    result_list = []
    for i in result:
        result_list.append(i)
    if result_list == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_list}, expected: {expected_output}, but got {result_list}"")","let params = [
    {
    ""input"": [-1,0,1,2,-1,-4],
    ""output"": [[-1,-1,2],[-1,0,1]]
    },
    {
    ""input"": [0,1,1],
    ""output"": []
    },
    {
    ""input"": [0,0,0],
    ""output"": [[0,0,0]]
    },
    {
    ""input"": [1,2,3,4,5,6],
    ""output"": []
    },
    {
    ""input"": [-1,-2,-3,-4,-5,-6],
    ""output"": []
    },
    {
    ""input"": [1,1,1,1,1,1],
    ""output"": []
    },
    {
    ""input"": [-1,-1,-1,-1,-1,-1],
    ""output"": []
    },
    {
    ""input"": [-1,1,-1,1,-1,1],
    ""output"": []
    },
    {
    ""input"": [-1,0,1,2,3,4,5,6,7,8,9,10],
    ""output"": [[-1, 0, 1]]
    },
    {
    ""input"": [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0],
    ""output"": []
    },
    {
    ""input"": [1,-1,0,1,-1,0],
    ""output"": [[-1, 0, 1]]
    },
    {
    ""input"": [1,1,-2],
    ""output"": [[-2,1,1]]
    },
    {
    ""input"": [1,2,3,-3,-2,-1],
    ""output"": [[-3, 1, 2], [-2, -1, 3]]
    },
    {
    ""input"": [1,1,1,-1,-1,-1],
    ""output"": []
    },
    {
    ""input"": [1,1,1,1,1,-4],
    ""output"": []
    },
    {
    ""input"": [-1,-1,0,1,1,2],
    ""output"": [[-1, -1, 2], [-1, 0, 1]]
    },
    {
    ""input"": [-1,-1,-1,0,0,0],
    ""output"": [[0, 0, 0]]
    },
    {
    ""input"": [1,1,1,1,1,1,-6],
    ""output"": []
    },
    {
    ""input"": [-1,-1,-1,-1,-1,5],
    ""output"": []
    },
    {
    ""input"": [-1,1,-1,1,-1,1,0],
    ""output"": [[-1, 0, 1]]
    }
    ]

for (let test of params) {
    let input_list = test[""input""];
    let expected_output = test[""output""];
    let result = threeSum(input_list);
    let result_list = [];
    for (let i of result) {
        result_list.push(i);
    }
    if (result_list.sort().toString() === expected_output.sort().toString()) {
        console.log(""\u2705 Test Passed."");
    } else {
        console.log(`\u274c Test Failed. Input: ${input_list}, expected: ${expected_output}, but got ${result_list}`);
    }
}
    ",,
63b594f78ad4593d6b7b01d8,container-with-most-water,"params = [    
    {   
        ""height"": [1,8,6,2,5,4,8,3,7],
        ""ret"": 49
    },
    {
        ""height"": [1,1],
        ""ret"": 1
    },
    {
        ""height"": [1,2,3,4,5,6,7,8,9,10],
        ""ret"": 25
    },
    {
        ""height"": [10,9,8,7,6,5,4,3,2,1],
        ""ret"": 25
    },
    {
        ""height"": [5,5,5,5,5],
        ""ret"": 20
    },
    {
        ""height"": [1,3,5,7,9],
        ""ret"": 10
    },
    {
        ""height"": [9,7,5,3,1],
        ""ret"": 10
    },
    {
        ""height"": [5,10,5,10,5],
        ""ret"": 20
    },
    {
        ""height"": [1,1,1,1,1,1,1,1,1,1],
        ""ret"": 9
    },
    {
        ""height"": [1,2,1,2,1,2,1,2,1,2],
        ""ret"": 16
    }
]

obj = Solution()
for args in params:
  res =  obj.maxArea(args['height'])
  print(""\u2705 Test Passed."") if res == args['ret'] else print(f""\u274c Test Failed. Input: {args['height']}, expected: {args['ret']} but got {res}"")","let params = [    
  {   
      ""height"": [1,8,6,2,5,4,8,3,7],
      ""ret"": 49
  },
  {
      ""height"": [1,1],
      ""ret"": 1
  },
  {
      ""height"": [1,2,3,4,5,6,7,8,9,10],
      ""ret"": 25
  },
  {
      ""height"": [10,9,8,7,6,5,4,3,2,1],
      ""ret"": 25
  },
  {
      ""height"": [5,5,5,5,5],
      ""ret"": 20
  },
  {
      ""height"": [1,3,5,7,9],
      ""ret"": 10
  },
  {
      ""height"": [9,7,5,3,1],
      ""ret"": 10
  },
  {
      ""height"": [5,10,5,10,5],
      ""ret"": 20
  },
  {
      ""height"": [1,1,1,1,1,1,1,1,1,1],
      ""ret"": 9
  },
  {
      ""height"": [1,2,1,2,1,2,1,2,1,2],
      ""ret"": 16
  }
]

for (let i = 0; i < params.length; i++) {
  let args = params[i];
  let res = maxArea(args['height']);
  res == args['ret'] ? console.log(""\u2705 Test Passed."") : console.log(`\u274c Test Failed. Input: ${args['height']}, expected: ${args['ret']}, got: ${res}`);
}",,
63b594f88ad4593d6b7b01d9,trapping-rain-water,"params = [    
    { 
        ""height"": [0,1,0,2,1,0,1,3,2,1,2,1],
        ""ret"": 6
    },
    {
        ""height"": [4,2,0,3,2,5],
        ""ret"": 9
    },
    {
        ""height"": [1,2,3,4,5,6],
        ""ret"": 0
    },
    {
        ""height"": [6,5,4,3,2,1],
        ""ret"": 0
    },
    {
        ""height"": [1,0,1],
        ""ret"": 1
    },
    {
        ""height"": [1,1,1,1,1],
        ""ret"": 0
    },
    {
        ""height"": [3,2,1,2,3],
        ""ret"": 4
    },
    {
        ""height"": [1,1,1,1,1,1,1,1,1,1],
        ""ret"": 0
    },
    {
        ""height"": [5,5,5,5,5,5,5,5,5,5],
        ""ret"": 0
    },
    {
        ""height"": [1,1,1,1,1,1,1,1,1,1,1],
        ""ret"": 0
    }
]

obj = Solution()
for args in params:
  result = obj.trap(args['height'])
  if result == args['ret']:
      print(""\u2705 Test Passed."")
  else:
      print(f""\u274c Test Failed. Input: {args['height']}, expected: {args['ret']}, but got {result}"")","let params = [    
  { 
      ""height"": [0,1,0,2,1,0,1,3,2,1,2,1],
      ""ret"": 6
  },
  {
      ""height"": [4,2,0,3,2,5],
      ""ret"": 9
  },
  {
      ""height"": [1,2,3,4,5,6],
      ""ret"": 0
  },
  {
      ""height"": [6,5,4,3,2,1],
      ""ret"": 0
  },
  {
      ""height"": [1,0,1],
      ""ret"": 1
  },
  {
      ""height"": [1,1,1,1,1],
      ""ret"": 0
  },
  {
      ""height"": [3,2,1,2,3],
      ""ret"": 4
  },
  {
      ""height"": [1,1,1,1,1,1,1,1,1,1],
      ""ret"": 0
  },
  {
      ""height"": [5,5,5,5,5,5,5,5,5,5],
      ""ret"": 0
  },
  {
      ""height"": [1,1,1,1,1,1,1,1,1,1,1],
      ""ret"": 0
  }
]

for (let i = 0; i < params.length; i++) {
  let args = params[i];
  let result = trap(args['height']);
  if (result === args['ret']) {
      console.log(""\u2705 Test Passed."")
  } else {
      console.log(`\u274c Test Failed. Input: ${args['height']}, expected: ${args['ret']}, but got ${result}`)
  }
}",,
63b594fa8ad4593d6b7b01da,best-time-to-buy-and-sell-stock,"params = [
    {
        ""prices"": [7,1,5,3,6,4],
        ""ret"": 5
    },
    {
        ""prices"": [7,6,4,3,1],
        ""ret"": 0
    },
    {
        ""prices"": [1,1,1,1,1,1],
        ""ret"": 0
    },
    {
        ""prices"": [1,2,3,4,5,6],
        ""ret"": 5
    },
    {
        ""prices"": [6,5,4,3,2,1],
        ""ret"": 0
    },
    {
        ""prices"": [1],
        ""ret"": 0
    },
    {
        ""prices"": [],
        ""ret"": 0
    },
    {
        ""prices"": [2,2,2,2,2],
        ""ret"": 0
    },
    {
        ""prices"": [1,2,3,4,5,6,7,8,9,10],
        ""ret"": 9
    },
    {
        ""prices"": [10,9,8,7,6,5,4,3,2,1],
        ""ret"": 0
    },
    {
        ""prices"": [4,6,2,8,3,10],
        ""ret"": 8
    },
    {
        ""prices"": [15,12,10,8,11,20],
        ""ret"": 12
    },
    {
        ""prices"": [1,2,3,4,5,6],
        ""ret"": 5
    },
    {
        ""prices"": [6,5,4,3,2,1],
        ""ret"": 0
    },
    {
        ""prices"": [2,4,6,8,10,12],
        ""ret"": 10
    }
]
obj = Solution()
for args in params:
  result = obj.maxProfit(args['prices'])
  if result == args['ret']:
      print(""\u2705 Test Passed."")
  else:
      print(f""\u274c Test Failed. Input: {args['prices']}, expected: {args['ret']}, but got {result}"")","let params = [
  {
      ""prices"": [7,1,5,3,6,4],
      ""ret"": 5
  },
  {
      ""prices"": [7,6,4,3,1],
      ""ret"": 0
  },
  {
      ""prices"": [1,1,1,1,1,1],
      ""ret"": 0
  },
  {
      ""prices"": [1,2,3,4,5,6],
      ""ret"": 5
  },
  {
      ""prices"": [6,5,4,3,2,1],
      ""ret"": 0
  },
  {
      ""prices"": [1],
      ""ret"": 0
  },
  {
      ""prices"": [],
      ""ret"": 0
  },
  {
      ""prices"": [2,2,2,2,2],
      ""ret"": 0
  },
  {
      ""prices"": [1,2,3,4,5,6,7,8,9,10],
      ""ret"": 9
  },
  {
      ""prices"": [10,9,8,7,6,5,4,3,2,1],
      ""ret"": 0
  },
  {
      ""prices"": [4,6,2,8,3,10],
      ""ret"": 8
  },
  {
      ""prices"": [15,12,10,8,11,20],
      ""ret"": 12
  },
  {
      ""prices"": [1,2,3,4,5,6],
      ""ret"": 5
  },
  {
      ""prices"": [6,5,4,3,2,1],
      ""ret"": 0
  },
  {
      ""prices"": [2,4,6,8,10,12],
      ""ret"": 10
  }
]

for (let i = 0; i < params.length; i++) {
  let args = params[i];
  let result = maxProfit(args['prices']);
  if (result === args['ret']) {
      console.log(""\u2705 Test Passed."");
  } else {
      console.log(`\u274c Test Failed. Input: ${args['prices']}, expected: ${args['ret']}, but got ${result}`);
  }
}",,
63b594fa8ad4593d6b7b01db,longest-substring-without-repeating-characters,"params = [
    {
        ""s"": ""abcabcbb"",
        ""ret"": 3
    },
    {
        ""s"": ""bbbbb"",
        ""ret"": 1
    },
    {
        ""s"": ""pwwkew"",
        ""ret"": 3
    },
    {
        ""s"": ""abcdefghijklmnopqrstuvwxyz"",
        ""ret"": 26
    },
    {
        ""s"": ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"",
        ""ret"": 52
    },
    {
        ""s"": """",
        ""ret"": 0
    },
    {
        ""s"": ""a"",
        ""ret"": 1
    },
    {
        ""s"": ""aa"",
        ""ret"": 1
    },
    {
        ""s"": ""ab"",
        ""ret"": 2
    },
    {
        ""s"": ""aaab"",
        ""ret"": 2
    },
    {
        ""s"": ""aab"",
        ""ret"": 2
    }, 
    {
        ""s"": ""dvdf"",
        ""ret"": 3
    },
    {
        ""s"": ""ohvh"",
        ""ret"": 3
    },
    {
        ""s"": ""abcabcabcabcabcabcabcabcab"",
        ""ret"": 3
    },
]

obj = Solution()
for args in params:
    result = obj.lengthOfLongestSubstring(args['s'])
    if result == args['ret']:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {args['s']}, expected: {args['ret']}, but got {result}"")","let params = [
  {
      ""s"": ""abcabcbb"",
      ""ret"": 3
  },
  {
      ""s"": ""bbbbb"",
      ""ret"": 1
  },
  {
      ""s"": ""pwwkew"",
      ""ret"": 3
  },
  {
      ""s"": ""abcdefghijklmnopqrstuvwxyz"",
      ""ret"": 26
  },
  {
      ""s"": ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"",
      ""ret"": 52
  },
  {
      ""s"": """",
      ""ret"": 0
  },
  {
      ""s"": ""a"",
      ""ret"": 1
  },
  {
      ""s"": ""aa"",
      ""ret"": 1
  },
  {
      ""s"": ""ab"",
      ""ret"": 2
  },
  {
      ""s"": ""aaab"",
      ""ret"": 2
  },
  {
      ""s"": ""aab"",
      ""ret"": 2
  }, 
  {
      ""s"": ""dvdf"",
      ""ret"": 3
  },
  {
      ""s"": ""ohvh"",
      ""ret"": 3
  },
  {
      ""s"": ""abcabcabcabcabcabcabcabcab"",
      ""ret"": 3
  },
]


for (let i = 0; i < params.length; i++) {
    let args = params[i];
    let result = lengthOfLongestSubstring(args['s']);
    if (result === args['ret']) {
        console.log(""\u2705 Test Passed."")
    } else {
        console.log(`\u274c Test Failed. Input: ${args['s']}, expected: ${args['ret']}, but got ${result}`)
    }
}",,
63b594fb8ad4593d6b7b01dc,longest-repeating-character-replacement,"params = [
    {
        ""s"": ""ABAB"",
        ""k"": 2,
        ""ret"": 4
    },
    {
        ""s"": ""AABABBA"",
        ""k"": 1,
        ""ret"": 4
    },
    {
        ""s"": ""AAAB"",
        ""k"": 0,
        ""ret"": 3
    },
    {
        ""s"": ""A"",
        ""k"": 0,
        ""ret"": 1
    },
    {
        ""s"": ""AAABB"",
        ""k"": 2,
        ""ret"": 5
    },
    {
        ""s"": ""AAABBB"",
        ""k"": 2,
        ""ret"": 5
    },
    {
        ""s"": ""AAABBB"",
        ""k"": 3,
        ""ret"": 6
    },
    {
        ""s"": ""AAABBB"",
        ""k"": 4,
        ""ret"": 6
    },
    {
        ""s"": ""AAAAAAABBB"",
        ""k"": 2,
        ""ret"": 9
    },
    {
        ""s"": ""AAAAAAABBB"",
        ""k"": 3,
        ""ret"": 10
    },
    {
        ""s"": ""ABCDEFG"",
        ""k"": 2,
        ""ret"": 3
    },
    {
        ""s"": ""AAACCCGGGTTT"",
        ""k"": 4,
        ""ret"": 7
    },
    {
        ""s"": ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"",
        ""k"": 25,
        ""ret"": 26
    },
    {
        ""s"": ""AAABBB"",
        ""k"": 1,
        ""ret"": 4
    },
    {
        ""s"": ""ABABABABABA"",
        ""k"": 3,
        ""ret"": 7
    },
    {
        ""s"": ""ABCDABD"",
        ""k"": 2,
        ""ret"": 4
    },
    {
        ""s"": ""ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"",
        ""k"": 50,
        ""ret"": 52
    },
    {
        ""s"": ""ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"",
        ""k"": 100,
        ""ret"": 78
    },
    {
        ""s"": ""ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"",
        ""k"": 200,
        ""ret"": 104
    },
    {
        ""s"": ""ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"",
        ""k"": 250,
        ""ret"": 130
    }
]
obj = Solution()
for args in params:
  result = obj.characterReplacement(args['s'], args['k'])
  if result == args['ret']:
      print(""\u2705 Test Passed."")
  else:
      print(f""\u274c Test Failed. Input: {args['s']}, {args['k']}, expected: {args['ret']}, but got {result}"")","let params = [
  {
      ""s"": ""ABAB"",
      ""k"": 2,
      ""ret"": 4
  },
  {
      ""s"": ""AABABBA"",
      ""k"": 1,
      ""ret"": 4
  },
  {
      ""s"": ""AAAB"",
      ""k"": 0,
      ""ret"": 3
  },
  {
      ""s"": ""A"",
      ""k"": 0,
      ""ret"": 1
  },
  {
      ""s"": ""AAABB"",
      ""k"": 2,
      ""ret"": 5
  },
  {
      ""s"": ""AAABBB"",
      ""k"": 2,
      ""ret"": 5
  },
  {
      ""s"": ""AAABBB"",
      ""k"": 3,
      ""ret"": 6
  },
  {
      ""s"": ""AAABBB"",
      ""k"": 4,
      ""ret"": 6
  },
  {
      ""s"": ""AAAAAAABBB"",
      ""k"": 2,
      ""ret"": 9
  },
  {
      ""s"": ""AAAAAAABBB"",
      ""k"": 3,
      ""ret"": 10
  },
  {
      ""s"": ""ABCDEFG"",
      ""k"": 2,
      ""ret"": 3
  },
  {
      ""s"": ""AAACCCGGGTTT"",
      ""k"": 4,
      ""ret"": 7
  },
  {
      ""s"": ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"",
      ""k"": 25,
      ""ret"": 26
  },
  {
      ""s"": ""AAABBB"",
      ""k"": 1,
      ""ret"": 4
  },
  {
      ""s"": ""ABABABABABA"",
      ""k"": 3,
      ""ret"": 7
  },
  {
      ""s"": ""ABCDABD"",
      ""k"": 2,
      ""ret"": 4
  },
  {
      ""s"": ""ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"",
      ""k"": 50,
      ""ret"": 52
  },
  {
      ""s"": ""ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"",
      ""k"": 100,
      ""ret"": 78
  },
  {
      ""s"": ""ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"",
      ""k"": 200,
      ""ret"": 104
  },
  {
      ""s"": ""ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"",
      ""k"": 250,
      ""ret"": 130
  }
]

for (let i = 0; i < params.length; i++) {
  let args = params[i];
  let result = characterReplacement(args['s'], args['k']);
  if (result === args['ret']) {
      console.log(""_ Test Passed."")
  } else {
      console.log(`_ Test Failed. Input: ${args['s']}, k: ${args['k']}, expected: ${args['ret']}, but got ${result}`)
  }
}",,
63b594fc8ad4593d6b7b01dd,permutation-in-string,"params = [
    {
        ""s1"": ""ab"",
        ""s2"": ""eidbaooo"",
        ""ret"": True
    },
    {
        ""s1"": ""ab"",
        ""s2"": ""eidboaoo"",
        ""ret"": False
    },
    {
        ""s1"": ""abc"",
        ""s2"": ""cbaaabcb"",
        ""ret"": True
    },
    {
        ""s1"": ""abc"",
        ""s2"": ""cbacbaab"",
        ""ret"": True
    },
    {
        ""s1"": ""abc"",
        ""s2"": ""cbacbacb"",
        ""ret"": True
    },
    {
        ""s1"": """",
        ""s2"": ""cbacbacb"",
        ""ret"": True
    },
    {
        ""s1"": ""a"",
        ""s2"": """",
        ""ret"": False
    },
    {
        ""s1"": ""a"",
        ""s2"": ""a"",
        ""ret"": True
    },
    {
        ""s1"": ""ab"",
        ""s2"": ""aaab"",
        ""ret"": True
    },
    {
        ""s1"": ""ab"",
        ""s2"": ""baab"",
        ""ret"": True
    },
    {
        ""s1"": ""abcdef"",
        ""s2"": ""abcdefgabcdef"",
        ""ret"": True
    },
    {
        ""s1"": ""abcdef"",
        ""s2"": ""abcdabcdabcd"",
        ""ret"": False
    },
    {
        ""s1"": ""abcdef"",
        ""s2"": ""abcdefabcdefghijklmnopqrstuvwxyz"",
        ""ret"": True
    },
    {
        ""s1"": ""abcdef"",
        ""s2"": ""abcdefabcdefghijklmnopqrstuvwxyzabcdef"",
        ""ret"": True
    },
    {
        ""s1"": ""abcdef"",
        ""s2"": ""abcdefghijklmnopqrstuvwxyz"",
        ""ret"": True
    },
    {
        ""s1"": ""abcdefghijklmnopqrstuvwxyz"",
        ""s2"": ""abcdefabcdefghijklmnopqrstuvwxyzabcdefabcdefghijklmnopqrstuvwxyz"",
        ""ret"": True
    },
    {
        ""s1"": ""abcdefghijklmnopqrstuvwxyz"",
        ""s2"": ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"",
        ""ret"": True
    },
    {
        ""s1"": ""abcdefghijklmnopqrstuvwxyz"",
        ""s2"": ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"",
        ""ret"": True
    },
    {
        ""s1"": ""abcdefghijklmnopqrstuvwxyz"",
        ""s2"": ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"",
        ""ret"": True
    }
]
obj = Solution()
for args in params:
  result = obj.checkInclusion(args['s1'], args['s2'])
  if result == args['ret']:
      print(""\u2705 Test Passed."")
  else:
      print(f""\u274c Test Failed. Input: s1 = {args['s1']}, s2 = {args['s2']}, expected: {args['ret']}, but got {result}"")","let params = [
  {
      ""s1"": ""ab"",
      ""s2"": ""eidbaooo"",
      ""ret"": true
  },
  {
      ""s1"": ""ab"",
      ""s2"": ""eidboaoo"",
      ""ret"": false
  },
  {
      ""s1"": ""abc"",
      ""s2"": ""cbaaabcb"",
      ""ret"": true
  },
  {
      ""s1"": ""abc"",
      ""s2"": ""cbacbaab"",
      ""ret"": true
  },
  {
      ""s1"": ""abc"",
      ""s2"": ""cbacbacb"",
      ""ret"": true
  },
  {
      ""s1"": """",
      ""s2"": ""cbacbacb"",
      ""ret"": true
  },
  {
      ""s1"": ""a"",
      ""s2"": """",
      ""ret"": false
  },
  {
      ""s1"": ""a"",
      ""s2"": ""a"",
      ""ret"": true
  },
  {
      ""s1"": ""ab"",
      ""s2"": ""aaab"",
      ""ret"": true
  },
  {
      ""s1"": ""ab"",
      ""s2"": ""baab"",
      ""ret"": true
  },
  {
      ""s1"": ""abcdef"",
      ""s2"": ""abcdefgabcdef"",
      ""ret"": true
  },
  {
      ""s1"": ""abcdef"",
      ""s2"": ""abcdabcdabcd"",
      ""ret"": false
  },
  {
      ""s1"": ""abcdef"",
      ""s2"": ""abcdefabcdefghijklmnopqrstuvwxyz"",
      ""ret"": true
  },
  {
      ""s1"": ""abcdef"",
      ""s2"": ""abcdefabcdefghijklmnopqrstuvwxyzabcdef"",
      ""ret"": true
  },
  {
      ""s1"": ""abcdef"",
      ""s2"": ""abcdefghijklmnopqrstuvwxyz"",
      ""ret"": true
  },
  {
      ""s1"": ""abcdefghijklmnopqrstuvwxyz"",
      ""s2"": ""abcdefabcdefghijklmnopqrstuvwxyzabcdefabcdefghijklmnopqrstuvwxyz"",
      ""ret"": true
  },
  {
      ""s1"": ""abcdefghijklmnopqrstuvwxyz"",
      ""s2"": ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"",
      ""ret"": true
  },
  {
      ""s1"": ""abcdefghijklmnopqrstuvwxyz"",
      ""s2"": ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"",
      ""ret"": true
  },
  {
      ""s1"": ""abcdefghijklmnopqrstuvwxyz"",
      ""s2"": ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"",
      ""ret"": true
  }
]

for (let i = 0; i < params.length; i++) {
  let result = checkInclusion(params[i][""s1""], params[i][""s2""])
  if (result === params[i][""ret""]) {
      console.log(""\u2705 Test Passed."")
  } else {
      console.log(`\u274c Test Failed. Input: s1: ${params[i][""s1""]}, s2: ${params[i][""s2""]}, expected: ${params[i][""ret""]}, but got ${result}`)
  }
}",,
63b594fe8ad4593d6b7b01de,minimum-window-substring,"params = [
    {'s': 'ADOBECODEBANC', 't': 'ABC', 'ret': 'BANC'},
    {'s': 'a', 't': 'a', 'ret': 'a'},
    {'s': 'a', 't': 'aa', 'ret': ''},
    {'s': 'abcdabcd', 't': 'abc', 'ret': 'abc'},
    {'s': 'abcdabcd', 't': 'abcd', 'ret': 'abcd'},
    {'s': 'abcdabcd', 't': 'bcda', 'ret': 'abcd'},
    {'s': 'abcdabcd', 't': 'cabd', 'ret': 'abcd'},
    {'s': 'abcdabcd', 't': 'abcdabcd', 'ret': 'abcdabcd'},
    {'s': 'abcdabcd', 't': 'abcdabc', 'ret': 'abcdabc'},
    {'s': 'abcdabcd', 't': 'abcdef', 'ret': ''},
    {""s"": ""qwertyuiopasdfghjklzxcvbnmqwertyuio"", ""t"": ""qwertyuio"", ""ret"": ""qwertyuio""},
    {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefgh"", ""ret"": ""abcdefgh""},
    {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghi"", ""ret"": ""abcdefghi""},
    {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklm"", ""ret"": ""abcdefghijklm""},
    {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrs"", ""ret"": ""abcdefghijklmnopqrs""},
    {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrstuvwxyz"", ""ret"": ""abcdefghijklmnopqrstuvwxyz""},
    {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""ret"": ""abcdefghijklmnopqrstuvwxyzabcdefgh""},
    {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrstuvwxyzabcdefghi"", ""ret"": """"},
    {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefgh"", ""ret"": """"},
    {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghi"", ""ret"": """"},
]
obj = Solution()
for args in params:
    result = obj.minWindow(args['s'], args['t'])
    if result == args['ret']:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {args['s']}, {args['t']}, expected: {args['ret']}, but got {result}"")","let params = [
  {'s': 'ADOBECODEBANC', 't': 'ABC', 'ret': 'BANC'},
  {'s': 'a', 't': 'a', 'ret': 'a'},
  {'s': 'a', 't': 'aa', 'ret': ''},
  {'s': 'abcdabcd', 't': 'abc', 'ret': 'abc'},
  {'s': 'abcdabcd', 't': 'abcd', 'ret': 'abcd'},
  {'s': 'abcdabcd', 't': 'bcda', 'ret': 'abcd'},
  {'s': 'abcdabcd', 't': 'cabd', 'ret': 'abcd'},
  {'s': 'abcdabcd', 't': 'abcdabcd', 'ret': 'abcdabcd'},
  {'s': 'abcdabcd', 't': 'abcdabc', 'ret': 'abcdabc'},
  {'s': 'abcdabcd', 't': 'abcdef', 'ret': ''},
  {""s"": ""qwertyuiopasdfghjklzxcvbnmqwertyuio"", ""t"": ""qwertyuio"", ""ret"": ""qwertyuio""},
  {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefgh"", ""ret"": ""abcdefgh""},
  {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghi"", ""ret"": ""abcdefghi""},
  {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklm"", ""ret"": ""abcdefghijklm""},
  {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrs"", ""ret"": ""abcdefghijklmnopqrs""},
  {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrstuvwxyz"", ""ret"": ""abcdefghijklmnopqrstuvwxyz""},
  {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""ret"": ""abcdefghijklmnopqrstuvwxyzabcdefgh""},
  {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrstuvwxyzabcdefghi"", ""ret"": """"},
  {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefgh"", ""ret"": """"},
  {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghi"", ""ret"": """"},
]

for (let i = 0; i < params.length; i++) {
  let test = params[i];
  let result = minWindow(test.s, test.t);
  if (result === test.ret) {
      console.log(""_ Test Passed."")
  } else {
      console.log(`_ Test Failed. Input: ${test.s}, ${test.t}, expected: ${test.ret}, but got ${result}`)
  }
}",,
63b594ff8ad4593d6b7b01df,sliding-window-maximum,"params = [
    {
        ""nums"": [1,3,-1,-3,5,3,6,7],
        ""k"": 3,
        ""ret"": [3,3,5,5,6,7]
    },
    {
        ""nums"": [1,3,-1,-3,5,3,6,7],
        ""k"": 2,
        ""ret"": [3,3,-1,5,5,6,7]
    },
    {
        ""nums"": [1],
        ""k"": 1,
        ""ret"": [1]
    },
    {
        ""nums"": [1, 2, 3, 4, 5, 6],
        ""k"": 2,
        ""ret"": [2, 3, 4, 5, 6]
    },
    {
        ""nums"": [6, 5, 4, 3, 2, 1],
        ""k"": 3,
        ""ret"": [6, 5, 4, 3]
    },
    {
        ""nums"": [-1, -2, -3, -4, -5],
        ""k"": 4,
        ""ret"": [-1, -2]
    },
    {
        ""nums"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        ""k"": 5,
        ""ret"": [5, 6, 7, 8, 9, 10]
    },
    {
        ""nums"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        ""k"": 10,
        ""ret"": [10]
    },
    {
        ""nums"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        ""k"": 1,
        ""ret"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    },
    {
        ""nums"": [],
        ""k"": 5,
        ""ret"": []
    },
    {
        ""nums"": [1, 3, -1, -3, 5, 3, 6, 7],
        ""k"": 3,
        ""ret"": [3, 3, 5, 5, 6, 7]
    },
    {
        ""nums"": [1, 3, -1, -3, 5, 3, 6, 7, 8, 9, 10],
        ""k"": 4,
        ""ret"": [3, 5, 5, 6, 7, 8, 9, 10]
    },
    {
        ""nums"": [1, 3, -1, -3, 5, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        ""k"": 5,
        ""ret"": [5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
    },
    {
        ""nums"": [1, 3, -1, -3, 5, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
        ""k"": 6,
        ""ret"": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    },
    {
        ""nums"": [1, 3, -1, -3, 5, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],
        ""k"": 7,
        ""ret"": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
    },
    {
        ""nums"": [1, 3, -1, -3, 5, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22],
        ""k"": 8,
        ""ret"": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
    }
]
obj = Solution()
for args in params:
  result = obj.maxSlidingWindow(args['nums'], args['k'])
  if result == args['ret']:
    print(""\u2705 Test Passed."")
  else:
    print(f""\u274c Test Failed. Input: {args['nums']}, {args['k']}, expected: {args['ret']}, but got {result}"")","let params = [
  {
      ""nums"": [1,3,-1,-3,5,3,6,7],
      ""k"": 3,
      ""ret"": [3,3,5,5,6,7]
  },
  {
      ""nums"": [1,3,-1,-3,5,3,6,7],
      ""k"": 2,
      ""ret"": [3,3,-1,5,5,6,7]
  },
  {
      ""nums"": [1],
      ""k"": 1,
      ""ret"": [1]
  },
  {
      ""nums"": [1, 2, 3, 4, 5, 6],
      ""k"": 2,
      ""ret"": [2, 3, 4, 5, 6]
  },
  {
      ""nums"": [6, 5, 4, 3, 2, 1],
      ""k"": 3,
      ""ret"": [6, 5, 4, 3]
  },
  {
      ""nums"": [-1, -2, -3, -4, -5],
      ""k"": 4,
      ""ret"": [-1, -2]
  },
  {
      ""nums"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      ""k"": 5,
      ""ret"": [5, 6, 7, 8, 9, 10]
  },
  {
      ""nums"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      ""k"": 10,
      ""ret"": [10]
  },
  {
      ""nums"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      ""k"": 1,
      ""ret"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  },
  {
      ""nums"": [],
      ""k"": 5,
      ""ret"": []
  },
  {
      ""nums"": [1, 3, -1, -3, 5, 3, 6, 7],
      ""k"": 3,
      ""ret"": [3, 3, 5, 5, 6, 7]
  },
  {
      ""nums"": [1, 3, -1, -3, 5, 3, 6, 7, 8, 9, 10],
      ""k"": 4,
      ""ret"": [3, 5, 5, 6, 7, 8, 9, 10]
  },
  {
      ""nums"": [1, 3, -1, -3, 5, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
      ""k"": 5,
      ""ret"": [5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
  },
  {
      ""nums"": [1, 3, -1, -3, 5, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
      ""k"": 6,
      ""ret"": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
  },
  {
      ""nums"": [1, 3, -1, -3, 5, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],
      ""k"": 7,
      ""ret"": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
  },
  {
      ""nums"": [1, 3, -1, -3, 5, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22],
      ""k"": 8,
      ""ret"": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
  }
]

function arraysEqual(a, b) {
  if (a === b) return true;
  if (a == null || b == null) return false;
  if (a.length != b.length) return false;

  for (var i = 0; i < a.length; ++i) {
      if (a[i] !== b[i]) return false;
  }
  return true;
}

for (let i = 0; i < params.length; i++) {
  let result = maxSlidingWindow(params[i].nums, params[i].k);
  if (arraysEqual(result, params[i].ret)) {
      console.log(""\u2705 Test Passed."");
  } else {
      console.log(`\u274c Test Failed. Input: ${params[i].nums}, ${params[i].k}, expected: ${params[i].ret}, but got ${result}`);
  }
}",,
63b595008ad4593d6b7b01e0,valid-parentheses,"params = [
    {""s"": ""()"", ""ret"": True},
    {""s"": ""()[]{}"", ""ret"": True},
    {""s"": ""(]"", ""ret"": False},
    {""s"": ""({[]})"", ""ret"": True},
    {""s"": ""({[}])"", ""ret"": False},
    {""s"": ""(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("", ""ret"": False},
    {""s"": ""()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()"", ""ret"": True},
    {""s"": ""[({})]"", ""ret"": True},
    {""s"": """", ""ret"": True},
    {""s"": ""(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("", ""ret"": False},
    {""s"": ""()()()()"", ""ret"": True},
    {""s"": ""((()))"", ""ret"": True},
    {""s"": ""[{}]()"", ""ret"": True},
    {""s"": ""({[}])"", ""ret"": False},
    {""s"": ""(()[{}])"", ""ret"": True},
    {""s"": ""([)]"", ""ret"": False},
    {""s"": ""((((((((("", ""ret"": False},
    {""s"": ""){}{}{}{}{}{}{}{}{}"", ""ret"": False},
    {""s"": ""[](){}"", ""ret"": True},
    {""s"": ""[](){}()[]{}"", ""ret"": True},
]
obj = Solution()
for args in params:
    result = obj.isValid(args['s'])
    if result == args['ret']:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {args['s']}, expected: {args['ret']}, but got {result}"")","let params = [
    {""s"": ""()"", ""ret"": True},
    {""s"": ""()[]{}"", ""ret"": True},
    {""s"": ""(]"", ""ret"": False},
    {""s"": ""({[]})"", ""ret"": True},
    {""s"": ""({[}])"", ""ret"": False},
    {""s"": ""(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("", ""ret"": False},
    {""s"": ""()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()"", ""ret"": True},
    {""s"": ""[({})]"", ""ret"": True},
    {""s"": """", ""ret"": True},
    {""s"": ""(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("", ""ret"": False},
    {""s"": ""()()()()"", ""ret"": True},
    {""s"": ""((()))"", ""ret"": True},
    {""s"": ""[{}]()"", ""ret"": True},
    {""s"": ""({[}])"", ""ret"": False},
    {""s"": ""(()[{}])"", ""ret"": True},
    {""s"": ""([)]"", ""ret"": False},
    {""s"": ""((((((((("", ""ret"": False},
    {""s"": ""){}{}{}{}{}{}{}{}{}"", ""ret"": False},
    {""s"": ""[](){}"", ""ret"": True},
    {""s"": ""[](){}()[]{}"", ""ret"": True},
]

for (let i = 0; i < params.length; i++) {
    let result = isValid(params[i].s);
    if (result === params[i].ret) {
        console.log(""\u2705 Test Passed."")
    } else {
        console.log(`\u274c Test Failed. Input: ${params[i].s}, expected: ${params[i].ret}, but got ${result}`)
    }
}",,
63b595018ad4593d6b7b01e1,min-stack,"params = [
    {""method"": ""push"", ""val"": -2, ""ret"": None},
    {""method"": ""push"", ""val"": 0, ""ret"": None},
    {""method"": ""push"", ""val"": -3, ""ret"": None},
    {""method"": ""push"", ""val"": 5, ""ret"": None},
    {""method"": ""push"", ""val"": 3, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -3},
    {""method"": ""pop"", ""val"": None, ""ret"": 3},
    {""method"": ""top"", ""val"": None, ""ret"": 5},
    {""method"": ""getMin"", ""val"": None, ""ret"": -3},
    {""method"": ""push"", ""val"": -10, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -10},
    {""method"": ""pop"", ""val"": None, ""ret"": -10},
    {""method"": ""pop"", ""val"": None, ""ret"": 5},
    {""method"": ""pop"", ""val"": None, ""ret"": -3},
    {""method"": ""pop"", ""val"": None, ""ret"": 0},
    {""method"": ""getMin"", ""val"": None, ""ret"": -2},
    {""method"": ""push"", ""val"": 1, ""ret"": None},
    {""method"": ""push"", ""val"": 2, ""ret"": None},
    {""method"": ""push"", ""val"": 3, ""ret"": None},
    {""method"": ""push"", ""val"": 2, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -2},
    {""method"": ""pop"", ""val"": None, ""ret"": 2},
    {""method"": ""top"", ""val"": None, ""ret"": 3},
    {""method"": ""getMin"", ""val"": None, ""ret"": -2},
    {""method"": ""push"", ""val"": -100, ""ret"": None},
    {""method"": ""push"", ""val"": 100, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -100},
    {""method"": ""pop"", ""val"": None, ""ret"": 100},
    {""method"": ""push"", ""val"": 0, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -100},
    {""method"": ""push"", ""val"": -200, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -200},
    {""method"": ""top"", ""val"": None, ""ret"": -200},
    {""method"": ""pop"", ""val"": None, ""ret"": -200},
    {""method"": ""push"", ""val"": 2**31-1, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -100},
    {""method"": ""push"", ""val"": -(2**31), ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -(2**31)},
    {""method"": ""push"", ""val"": -100, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -(2**31)}
]

obj = MinStack()

for test in params:
    
    if test[""method""] == ""push"":
        obj.push(test[""val""])
        result = obj.stack[-1]
        if result == test[""val""]:
            print(""\u2705 Test Passed."")
        else:
            print(f""\u274c Test Failed. Input: {test['method']}, val={test['val']}, expected: {test['ret']}, but got {result}"")
    elif test[""method""] == ""pop"":
        result = obj.pop()
        if result == test[""ret""]:
            print(""\u2705 Test Passed."")
        else:
            print(f""\u274c Test Failed. Input: {test['method']}, expected: {test['ret']}, but got {result}"")
    elif test[""method""] == ""top"":
        result = obj.top()
        if result == test[""ret""]:
            print(""\u2705 Test Passed."")
        else:
            print(f""\u274c Test Failed. Input: {test['method']}, expected: {test['ret']}, but got {result}"")
    elif test[""method""] == ""getMin"":
        result = obj.getMin()
        if result == test[""ret""]:
            print(""\u2705 Test Passed."")
        else:
            print(f""\u274c Test Failed. Input: {test['method']}, expected: {test['ret']}, but got {result}"")","let params = [
    {""method"": ""push"", ""val"": -2, ""ret"": None},
    {""method"": ""push"", ""val"": 0, ""ret"": None},
    {""method"": ""push"", ""val"": -3, ""ret"": None},
    {""method"": ""push"", ""val"": 5, ""ret"": None},
    {""method"": ""push"", ""val"": 3, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -3},
    {""method"": ""pop"", ""val"": None, ""ret"": 3},
    {""method"": ""top"", ""val"": None, ""ret"": 5},
    {""method"": ""getMin"", ""val"": None, ""ret"": -3},
    {""method"": ""push"", ""val"": -10, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -10},
    {""method"": ""pop"", ""val"": None, ""ret"": -10},
    {""method"": ""pop"", ""val"": None, ""ret"": 5},
    {""method"": ""pop"", ""val"": None, ""ret"": -3},
    {""method"": ""pop"", ""val"": None, ""ret"": 0},
    {""method"": ""getMin"", ""val"": None, ""ret"": -2},
    {""method"": ""push"", ""val"": 1, ""ret"": None},
    {""method"": ""push"", ""val"": 2, ""ret"": None},
    {""method"": ""push"", ""val"": 3, ""ret"": None},
    {""method"": ""push"", ""val"": 2, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -2},
    {""method"": ""pop"", ""val"": None, ""ret"": 2},
    {""method"": ""top"", ""val"": None, ""ret"": 3},
    {""method"": ""getMin"", ""val"": None, ""ret"": -2},
    {""method"": ""push"", ""val"": -100, ""ret"": None},
    {""method"": ""push"", ""val"": 100, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -100},
    {""method"": ""pop"", ""val"": None, ""ret"": 100},
    {""method"": ""push"", ""val"": 0, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -100},
    {""method"": ""push"", ""val"": -200, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -200},
    {""method"": ""top"", ""val"": None, ""ret"": -200},
    {""method"": ""pop"", ""val"": None, ""ret"": -200},
    {""method"": ""push"", ""val"": 2**31-1, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -100},
    {""method"": ""push"", ""val"": -(2**31), ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -(2**31)},
    {""method"": ""push"", ""val"": -100, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -(2**31)}
]

var obj = new MinStack()

for (let test of params) {
    if (test[""method""] === ""push"") {
        obj.push(test[""val""]);
        let result = obj.stack[obj.stack.length - 1];
        if (result === test[""val""]) {
            console.log(""\u2705 Test Passed."");
        } else {
            console.log(`\u274c Test Failed. Input: ${test[""method""]}, val=${test[""val""]}, expected: ${test[""ret""]}, but got ${result}`);
        }
    } else if (test[""method""] === ""pop"") {
        let result = obj.pop();
        if (result === test[""ret""]) {
            console.log(""\u2705 Test Passed."");
        } else {
            console.log(`\u274c Test Failed. Input: ${test[""method""]}, expected: ${test[""ret""]}, but got ${result}`);
        }
    } else if (test[""method""] === ""top"") {
        let result = obj.top();
        if (result === test[""ret""]) {
            console.log(""\u2705 Test Passed."");
        } else {
            console.log(`\u274c Test Failed. Input: ${test[""method""]}, expected: ${test[""ret""]}, but got ${result}`);
        }
    } else if (test[""method""] === ""getMin"") {
        let result = obj.getMin();
        if (result === test[""ret""]) {
            console.log(""\u2705 Test Passed."");
        } else {
            console.log(`\u274c Test Failed. Input: ${test[""method""]}, expected: ${test[""ret""]}, but got ${result}`);
        }
    }
}",,
63b595028ad4593d6b7b01e2,evaluate-reverse-polish-notation,"params = [    
    {""input"": [""2"",""1"",""+"",""3"",""*""], ""output"": 9},
    {""input"": [""4"",""13"",""5"",""/"",""+""], ""output"": 6},
    {""input"": [""10"",""6"",""9"",""3"",""+"",""-11"",""*"",""/"",""*"",""17"",""+"",""5"",""+""], ""output"": 22},
    {""input"": [""1"",""2"",""3"",""4"",""+"",""+"",""+""], ""output"": 10},
    {""input"": [""5"",""2"",""3"",""*"",""+""], ""output"": 11},
    {""input"": [""5"",""2"",""3"",""1"",""-"",""*"",""+""], ""output"": 9},
    {""input"": [""5"",""2"",""/"",""6"",""*"",""11"",""+""], ""output"": 23},
    {""input"": [""5"",""-2"",""-"",""6"",""*"",""35"",""+""], ""output"": 77},
    {""input"": [""5"",""2"",""-1"",""/"",""-232"",""+""], ""output"": -234},
    {""input"": [""5"",""2"",""3"",""+"",""-7"", ""*""], ""output"": -35},
    {""input"": [""1"",""2"",""3"",""4"",""5"",""*"",""*"",""*"",""+"", ""23"",""+""], ""output"": 144}
    
]

obj = Solution()

for test in params:
    input_arr = test[""input""]
    expected_output = test[""output""]
    result = obj.evalRPN(input_arr)
    if result == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_arr}, expected: {expected_output}, but got {result}"")","let params = [    
    {""input"": [""2"",""1"",""+"",""3"",""*""], ""output"": 9},
    {""input"": [""4"",""13"",""5"",""/"",""+""], ""output"": 6},
    {""input"": [""10"",""6"",""9"",""3"",""+"",""-11"",""*"",""/"",""*"",""17"",""+"",""5"",""+""], ""output"": 22},
    {""input"": [""1"",""2"",""3"",""4"",""+"",""+"",""+""], ""output"": 10},
    {""input"": [""5"",""2"",""3"",""*"",""+""], ""output"": 11},
    {""input"": [""5"",""2"",""3"",""1"",""-"",""*"",""+""], ""output"": 9},
    {""input"": [""5"",""2"",""/"",""6"",""*"",""11"",""+""], ""output"": 23},
    {""input"": [""5"",""-2"",""-"",""6"",""*"",""35"",""+""], ""output"": 77},
    {""input"": [""5"",""2"",""-1"",""/"",""-232"",""+""], ""output"": -234},
    {""input"": [""5"",""2"",""3"",""+"",""-7"", ""*""], ""output"": -35},
    {""input"": [""1"",""2"",""3"",""4"",""5"",""*"",""*"",""*"",""+"", ""23"",""+""], ""output"": 144}
    
]

for (let test of params) {
    let input_arr = test[""input""];
    let expected_output = test[""output""];
    let result = evalRPN(input_arr);
    if (result === expected_output) {
        console.log(""\u2705 Test Passed."");
    } else {
        console.log(`\u274c Test Failed. Input: ${input_arr}, expected: ${expected_output}, but got ${result}`);
    }
}",,
63b595038ad4593d6b7b01e3,generate-parentheses,"params = [
{""input"": 0, ""output"": ['']},
{""input"": 1, ""output"": [""()""]},
{""input"": 2, ""output"": [""(())"", ""()()""]},
{""input"": 3, ""output"": [""((()))"", ""(()())"", ""(())()"", ""()(())"", ""()()()""]},
{""input"": 4, ""output"": [""(((())))"", ""((()()))"", ""((())())"", ""((()))()"", ""(()(()))"", ""(()()())"", ""(()())()"", ""(())(())"", ""(())()()"", ""()((()))"", ""()(()())"", ""()(())()"", ""()()(())"", ""()()()()""]},
{""input"": 5, ""output},
{""input"": 7, ""output},
]


obj = Solution()

for test in params:
    input_n = test[""input""]
    expected_output = test[""output""]
    result = obj.generateParenthesis(input_n)
    if set(result) == set(expected_output):
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_n}, expected: {expected_output}, but got {result}"")","let params = [
    {""input"": 0, ""output"": ['']},
    {""input"": 1, ""output"": [""()""]},
    {""input"": 2, ""output"": [""(())"", ""()()""]},
    {""input"": 3, ""output"": [""((()))"", ""(()())"", ""(())()"", ""()(())"", ""()()()""]},
    {""input"": 4, ""output"": [""(((())))"", ""((()()))"", ""((())())"", ""((()))()"", ""(()(()))"", ""(()()())"", ""(()())()"", ""(())(())"", ""(())()()"", ""()((()))"", ""()(()())"", ""()(())()"", ""()()(())"", ""()()()()""]},
    {""input"": 5, ""output},
    {""input"": 7, ""output}
]

for (let i = 0; i < params.length; i++) {
    let test = params[i];
    let input_num = test[""input""];
    let expected_output = test[""output""];
    let result = generateParenthesis(input_num);
    if (result.sort().toString() === expected_output.sort().toString()) {
        console.log(""\u2705 Test Passed."");
    } else {
        console.log(`\u274c Test Failed. Input: ${input_num}, expected: ${expected_output}, but got ${result}`);
    }
}
    ",,
63b595038ad4593d6b7b01e4,daily-temperatures,"params = [
{""input"": [73,74,75,71,69,72,76,73], ""output"": [1,1,4,2,1,1,0,0]},
{""input"": [30,40,50,60], ""output"": [1,1,1,0]},
{""input"": [30,60,90], ""output"": [1,1,0]},
{""input"": [100,99,98,97,96], ""output"": [0,0,0,0,0]},
{""input"": [30,30,30,30,30], ""output"": [0,0,0,0,0]},
{""input"": [100,60,30,90,80], ""output"": [0, 2, 1, 0, 0]},
{""input"": [30,60,90,80,70], ""output"": [1, 1, 0, 0, 0]},
{""input"": [70,80,90,60,30], ""output"": [1, 1, 0, 0, 0]},
{""input"": [30,40,20,10,50], ""output"": [1, 3, 2, 1, 0]},
{""input"": [100,90,80,70,60], ""output"": [0,0,0,0,0]},
{""input"": [30,60,90,50,40,70,80], ""output"": [1, 1, 0, 2, 1, 1, 0]},
]

obj = Solution()
for test in params:
    input_arr = test[""input""]
    expected_output = test[""output""]
    result = obj.dailyTemperatures(input_arr)
    if result == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_arr}, expected: {expected_output}, but got {result}"")","let params = [
    {""input"": [73,74,75,71,69,72,76,73], ""output"": [1,1,4,2,1,1,0,0]},
    {""input"": [30,40,50,60], ""output"": [1,1,1,0]},
    {""input"": [30,60,90], ""output"": [1,1,0]},
    {""input"": [100,99,98,97,96], ""output"": [0,0,0,0,0]},
    {""input"": [30,30,30,30,30], ""output"": [0,0,0,0,0]},
    {""input"": [100,60,30,90,80], ""output"": [0, 2, 1, 0, 0]},
    {""input"": [30,60,90,80,70], ""output"": [1, 1, 0, 0, 0]},
    {""input"": [70,80,90,60,30], ""output"": [1, 1, 0, 0, 0]},
    {""input"": [30,40,20,10,50], ""output"": [1, 3, 2, 1, 0]},
    {""input"": [100,90,80,70,60], ""output"": [0,0,0,0,0]},
    {""input"": [30,60,90,50,40,70,80], ""output"": [1, 1, 0, 2, 1, 1, 0]},
    ]


for (let test of params) {
    let input_arr = test[""input""];
    let expected_output = test[""output""];
    let result = dailyTemperatures(input_arr);
    if (result === expected_output) {
        console.log(""\u2705 Test Passed."");
    } else {
        console.log(`\u274c Test Failed. Input: ${input_arr}, expected: ${expected_output}, but got ${result}`);
    }
}",,
63b595048ad4593d6b7b01e5,car-fleet,"params = [    
    {""input"": [12, [10,8,0,5,3], [2,4,1,1,3]], ""output"": 3},
    {""input"": [10, [3], [3]], ""output"": 1},
    {""input"": [100, [0,2,4], [4,2,1]], ""output"": 1},
    {""input"": [100, [0,1,2,3], [1,2,3,4]], ""output"": 4},
    {""input"": [100, [0,1,2,3], [4,3,2,1]], ""output"": 1},
    {""input"": [100, [0,1,2,3], [4,4,4,4]], ""output"": 4},
    {""input"": [100, [10,20,30,40,50], [1,1,1,1,1]], ""output"": 5},
    {""input"": [100, [10,20,30,40,50], [2,2,2,2,2]], ""output"": 5},
    {""input"": [100, [50,40,30,20,10], [1,1,1,1,1]], ""output"": 5},
    {""input"": [100, [50,40,30,20,10], [2,2,2,2,2]], ""output"": 5},
    {""input"": [100, [50,40,20,10,5,30,35], [2,2,2,2,2,2,2]], ""output"": 7},
    {""input"": [100, [50,50,50,50,50], [2,2,2,2,2]], ""output"": 1},
    {""input"": [100, [50,50,50,50,50], [1,1,1,1,1]], ""output"": 1},
    {""input"": [100, [0,1,2,3,4], [5,5,5,5,5]], ""output"": 5},
    {""input"": [100, [0,1,2,3,4], [4,4,4,4,4]], ""output"": 5},
    {""input"": [100, [0,1,2,3,4], [3,3,3,3,3]], ""output"": 5},
    {""input"": [100, [0,1,2,3,4], [2,2,2,2,2]], ""output"": 5},
    {""input"": [100, [0,1,2,3,4], [1,1,1,1,1]], ""output"": 5},

]

obj = Solution()
for test in params:
    target, position, speed = test[""input""]
    expected_output = test[""output""]
    result = obj.carFleet(target, position, speed)
    if result == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {target, position, speed}, expected: {expected_output}, but got {result}"")","let params = [    
    {""input"": [12, [10,8,0,5,3], [2,4,1,1,3]], ""output"": 3},
    {""input"": [10, [3], [3]], ""output"": 1},
    {""input"": [100, [0,2,4], [4,2,1]], ""output"": 1},
    {""input"": [100, [0,1,2,3], [1,2,3,4]], ""output"": 4},
    {""input"": [100, [0,1,2,3], [4,3,2,1]], ""output"": 1},
    {""input"": [100, [0,1,2,3], [4,4,4,4]], ""output"": 4},
    {""input"": [100, [10,20,30,40,50], [1,1,1,1,1]], ""output"": 5},
    {""input"": [100, [10,20,30,40,50], [2,2,2,2,2]], ""output"": 5},
    {""input"": [100, [50,40,30,20,10], [1,1,1,1,1]], ""output"": 5},
    {""input"": [100, [50,40,30,20,10], [2,2,2,2,2]], ""output"": 5},
    {""input"": [100, [50,40,20,10,5,30,35], [2,2,2,2,2,2,2]], ""output"": 7},
    {""input"": [100, [50,50,50,50,50], [2,2,2,2,2]], ""output"": 1},
    {""input"": [100, [50,50,50,50,50], [1,1,1,1,1]], ""output"": 1},
    {""input"": [100, [0,1,2,3,4], [5,5,5,5,5]], ""output"": 5},
    {""input"": [100, [0,1,2,3,4], [4,4,4,4,4]], ""output"": 5},
    {""input"": [100, [0,1,2,3,4], [3,3,3,3,3]], ""output"": 5},
    {""input"": [100, [0,1,2,3,4], [2,2,2,2,2]], ""output"": 5},
    {""input"": [100, [0,1,2,3,4], [1,1,1,1,1]], ""output"": 5},

]


for (let test of params) {
    let input_arr = test[""input""];
    let expected_output = test[""output""];
    let result = carFleet(input_arr[0],input_arr[1],input_arr[2]);
    if (result === expected_output) {
        console.log(""\u2705 Test Passed."");
    } else {
        console.log(`\u274c Test Failed. Input: ${input_arr}, expected: ${expected_output}, but got ${result}`);
    }
}",,
63b595058ad4593d6b7b01e6,largest-rectangle-in-histogram,"params = [
{""input"": [2,1,5,6,2,3], ""output"": 10},
{""input"": [2,4], ""output"": 4},
{""input"": [1,1], ""output"": 2},
{""input"": [1,2,3,4,5], ""output"": 9},
{""input"": [5,4,3,2,1], ""output"": 9},
{""input"": [1,2,2,3,1], ""output"": 6},
{""input"": [1,2,3,4,5,6,7,8,9,10], ""output"": 30},
{""input"": [10,9,8,7,6,5,4,3,2,1], ""output"": 30},
{""input"": [1,2,2,2,3,3,3,4,4,4], ""output"": 18},
{""input"": [4,4,4,3,3,3,2,2,2,1], ""output"": 18},
{""input"": [4,4,4,4,4,3,3,3,3,3], ""output"": 30},
{""input"": [4,4,4,4,4,4,4,4,4,4], ""output"": 40},
{""input"": [1,1,1,1,1,1,1,1,1,1], ""output"": 10},
{""input"": [1,1,1,2,2,2,3,3,3,4], ""output"": 14},
{""input"": [10,8,6,4,2], ""output"": 18},
{""input"": [10,8,6,4,2,2,2,2,2,2], ""output"": 20},
{""input"": [10,10,10,10,10,10,10,10,10,10], ""output"": 100},
{""input"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], ""output"": 64},
{""input"": [10,9,8,7,6,5,4,3,2,1,1,1,1,1,1], ""output"": 30},
{""input"": [1,2,3,4,5,5,5,5,5,5,5,5,5,5,5], ""output"": 55}
]

obj = Solution()

for test in params:
    input_arr = test[""input""]
    expected_output = test[""output""]
    result = obj.largestRectangleArea(input_arr)
    if result == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_arr}, expected: {expected_output}, but got {result}"")","let params = [
    {""input"": [2,1,5,6,2,3], ""output"": 10},
    {""input"": [2,4], ""output"": 4},
    {""input"": [1,1], ""output"": 2},
    {""input"": [1,2,3,4,5], ""output"": 9},
    {""input"": [5,4,3,2,1], ""output"": 9},
    {""input"": [1,2,2,3,1], ""output"": 6},
    {""input"": [1,2,3,4,5,6,7,8,9,10], ""output"": 30},
    {""input"": [10,9,8,7,6,5,4,3,2,1], ""output"": 30},
    {""input"": [1,2,2,2,3,3,3,4,4,4], ""output"": 18},
    {""input"": [4,4,4,3,3,3,2,2,2,1], ""output"": 18},
    {""input"": [4,4,4,4,4,3,3,3,3,3], ""output"": 30},
    {""input"": [4,4,4,4,4,4,4,4,4,4], ""output"": 40},
    {""input"": [1,1,1,1,1,1,1,1,1,1], ""output"": 10},
    {""input"": [1,1,1,2,2,2,3,3,3,4], ""output"": 14},
    {""input"": [10,8,6,4,2], ""output"": 18},
    {""input"": [10,8,6,4,2,2,2,2,2,2], ""output"": 20},
    {""input"": [10,10,10,10,10,10,10,10,10,10], ""output"": 100},
    {""input"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], ""output"": 64},
    {""input"": [10,9,8,7,6,5,4,3,2,1,1,1,1,1,1], ""output"": 30},
    {""input"": [1,2,3,4,5,5,5,5,5,5,5,5,5,5,5], ""output"": 55}
    ]

for (let test of params) {
    let input_arr = test[""input""];
    let expected_output = test[""output""];
    let result = largestRectangleArea(input_arr);
    if (result === expected_output) {
        console.log(""\u2705 Test Passed."");
    } else {
        console.log(`\u274c Test Failed. Input: ${input_arr}, expected: ${expected_output}, but got ${result}`);
    }
}
    ",,
63b595068ad4593d6b7b01e7,binary-search,"params = [
{""input"": [[-1,0,3,5,9,12], 9], ""output"": 4},
{""input"": [[-1,0,3,5,9,12], 2], ""output"": -1},
{""input"": [[1,2,3,4,5,6,7,8,9,10], 7], ""output"": 6},
{""input"": [[-10,-5,0,5,10], -5], ""output"": 1},
{""input"": [[-10,-5,0,5,10], -11], ""output"": -1},
{""input"": [[-10,-5,0,5,10], 11], ""output"": -1},
{""input"": [[1,1,1,1,1,1,1,1,1,1,1], 1], ""output"": 5},
{""input"": [[1,1,1,1,1,1,1,1,1,1,1], 2], ""output"": -1},
{""input"": [[1,2,3,4,5,6,7,8,9,10], 10], ""output"": 9},
{""input"": [[1,2,3,4,5,6,7,8,9,10], 0], ""output"": -1},
{""input"": [[-100,-50,0,50,100], -50], ""output"": 1},
{""input"": [[-100,-50,0,50,100], 110], ""output"": -1},
{""input"": [[-100,-50,0,50,100], -110], ""output"": -1},
{""input"": [[1,2,3,4,5,6,7,8,9,10], 5], ""output"": 4},
{""input"": [[1,2,3,4,5,6,7,8,9,10], 6], ""output"": 5},
{""input"": [[1,2,3,4,5,6,7,8,9,10], 4], ""output"": 3},
{""input"": [[1,2,3,4,5,6,7,8,9,10], 1], ""output"": 0},
{""input"": [[1,2,3,4,5,6,7,8,9,10], 10], ""output"": 9},
{""input"": [[1,2,3,4,5,6,7,8,9,10], -1], ""output"": -1},
{""input"": [[1,2,3,4,5,6,7,8,9,10], 0], ""output"": -1},
]


obj = Solution()
for test in params:
    input_arr = test[""input""]
    expected_output = test[""output""]
    result = obj.search(input_arr[0], input_arr[1])
    if result == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_arr}, expected: {expected_output}, but got {result}"")","let params = [
    {""input"": [[-1,0,3,5,9,12], 9], ""output"": 4},
    {""input"": [[-1,0,3,5,9,12], 2], ""output"": -1},
    {""input"": [[1,2,3,4,5,6,7,8,9,10], 7], ""output"": 6},
    {""input"": [[-10,-5,0,5,10], -5], ""output"": 1},
    {""input"": [[-10,-5,0,5,10], -11], ""output"": -1},
    {""input"": [[-10,-5,0,5,10], 11], ""output"": -1},
    {""input"": [[1,1,1,1,1,1,1,1,1,1,1], 1], ""output"": 5},
    {""input"": [[1,1,1,1,1,1,1,1,1,1,1], 2], ""output"": -1},
    {""input"": [[1,2,3,4,5,6,7,8,9,10], 10], ""output"": 9},
    {""input"": [[1,2,3,4,5,6,7,8,9,10], 0], ""output"": -1},
    {""input"": [[-100,-50,0,50,100], -50], ""output"": 1},
    {""input"": [[-100,-50,0,50,100], 110], ""output"": -1},
    {""input"": [[-100,-50,0,50,100], -110], ""output"": -1},
    {""input"": [[1,2,3,4,5,6,7,8,9,10], 5], ""output"": 4},
    {""input"": [[1,2,3,4,5,6,7,8,9,10], 6], ""output"": 5},
    {""input"": [[1,2,3,4,5,6,7,8,9,10], 4], ""output"": 3},
    {""input"": [[1,2,3,4,5,6,7,8,9,10], 1], ""output"": 0},
    {""input"": [[1,2,3,4,5,6,7,8,9,10], 10], ""output"": 9},
    {""input"": [[1,2,3,4,5,6,7,8,9,10], -1], ""output"": -1},
    {""input"": [[1,2,3,4,5,6,7,8,9,10], 0], ""output"": -1},
    ]

for (let i = 0; i < params.length; i++) {
    let input = params[i].input
    let expected_output = params[i].output
    let result = search(input[0], input[1])
    if (result === expected_output) {
        console.log(""\u2705 Test Passed."")
    } else {
        console.log(`\u274c Test Failed. Input: ${input}, expected: ${expected_output}, but got ${result}`)
    }
}
    ",,
63b595078ad4593d6b7b01e8,search-a-2d-matrix,"params = [
{""input"": [[[1,3,5,7],[10,11,16,20],[23,30,34,60]], 3], ""output"": True},
{""input"": [[[1,3,5,7],[10,11,16,20],[23,30,34,60]], 13], ""output"": False},
{""input"": [[[1,2,3],[4,5,6],[7,8,9]], 5], ""output"": True},
{""input"": [[[1,2,3],[4,5,6],[7,8,9]], 10], ""output"": False},
{""input"": [[[1,1,1,1],[1,1,1,1],[1,1,1,1]], 1], ""output"": True},
{""input"": [[[1,1,1,1],[1,1,1,1],[1,1,1,1]], 2], ""output"": False},
{""input"": [[[-10,-5,0,5,10],[-10,-5,0,5,10]], -5], ""output"": True},
{""input"": [[[-10,-5,0,5,10],[-10,-5,0,5,10]], -11], ""output"": False},
{""input"": [[[-10,-5,0,5,10],[-10,-5,0,5,10]], 11], ""output"": False},
{""input"": [[[-10,0,10,20],[-10,0,10,20]], -10], ""output"": True},
{""input"": [[[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]], 15], ""output"": True},
{""input"": [[[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]], 20], ""output"": False},
{""input"": [[[-10,-5,0,5,10],[-10,-5,0,5,10],[-10,-5,0,5,10]], -5], ""output"": True},
{""input"": [[[-10,-5,0,5,10],[-10,-5,0,5,10],[-10,-5,0,5,10]], -11], ""output"": False},
{""input"": [[[-10,-5,0,5,10],[-10,-5,0,5,10],[-10,-5,0,5,10]], 11], ""output"": False},
{""input"": [[[-10,0,10,20],[-10,0,10,20],[-10,0,10,20]], -10], ""output"": True},
{""input"": [[[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1]], 2], ""output"": False},
{""input"": [[[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]], 12], ""output"": True},
{""input"": [[[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]], 0], ""output"": False},
{""input"": [[[-10,-5,0,5,10],[-10,-5,0,5,10],[-10,-5,0,5,10]], -5], ""output"": True},
]

obj = Solution()
for test in params:
    input_arr = test[""input""]
    expected_output = test[""output""]
    result = obj.searchMatrix(input_arr[0], input_arr[1])
    if result == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_arr}, expected: {expected_output}, but got {result}"")
","let params = [
    {""input"": [[[1,3,5,7],[10,11,16,20],[23,30,34,60]], 3], ""output"": true},
    {""input"": [[[1,3,5,7],[10,11,16,20],[23,30,34,60]], 13], ""output"": false},
    {""input"": [[[1,2,3],[4,5,6],[7,8,9]], 5], ""output"": true},
    {""input"": [[[1,2,3],[4,5,6],[7,8,9]], 10], ""output"": false},
    {""input"": [[[1,1,1,1],[1,1,1,1],[1,1,1,1]], 1], ""output"": true},
    {""input"": [[[1,1,1,1],[1,1,1,1],[1,1,1,1]], 2], ""output"": false},
    {""input"": [[[-10,-5,0,5,10],[-10,-5,0,5,10]], -5], ""output"": true},
    {""input"": [[[-10,-5,0,5,10],[-10,-5,0,5,10]], -11], ""output"": false},
    {""input"": [[[-10,-5,0,5,10],[-10,-5,0,5,10]], 11], ""output"": false},
    {""input"": [[[-10,0,10,20],[-10,0,10,20]], -10], ""output"": true},
    {""input"": [[[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]], 15], ""output"": true},
    {""input"": [[[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]], 20], ""output"": false},
    {""input"": [[[-10,-5,0,5,10],[-10,-5,0,5,10],[-10,-5,0,5,10]], -5], ""output"": true},
    {""input"": [[[-10,-5,0,5,10],[-10,-5,0,5,10],[-10,-5,0,5,10]], -11], ""output"": false},
    {""input"": [[[-10,-5,0,5,10],[-10,-5,0,5,10],[-10,-5,0,5,10]], 11], ""output"": false},
    {""input"": [[[-10,0,10,20],[-10,0,10,20],[-10,0,10,20]], -10], ""output"": true},
    {""input"": [[[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1]], 2], ""output"": false},
    {""input"": [[[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]], 12], ""output"": true},
    {""input"": [[[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]], 0], ""output"": false},
    {""input"": [[[-10,-5,0,5,10],[-10,-5,0,5,10],[-10,-5,0,5,10]], -5], ""output"": true},
    ]
    
for (let test of params) {
    let input_arr = test[""input""];
    let expected_output = test[""output""];
    let result = obj.searchMatrix(input_arr[0], input_arr[1]);
    if (result === expected_output) {
        console.log(""\u2705 Test Passed."");
    } else {
        console.log(`\u274c Test Failed. Input: ${input_arr}, expected: ${expected_output}, but got ${result}`);
    }
}    ",,
63b595088ad4593d6b7b01e9,koko-eating-bananas,"params = [
{""input"": [[3,6,7,11], 8], ""output"": 4},
{""input"": [[30,11,23,4,20], 5], ""output"": 30},
{""input"": [[30,11,23,4,20], 6], ""output"": 23},
{""input"": [[1,2,3,4,5], 1], ""output"": 5},
{""input"": [[1,2,3,4,5], 2], ""output"": 5},
{""input"": [[1,1,1,1,1], 5], ""output"": 1},
{""input"": [[1,1,1,1,1], 6], ""output"": 1},
{""input"": [[1,1,1,1,1], 4], ""output"": 1},
{""input"": [[1,1,1,1,1,1,1,1,1,1,1], 11], ""output"": 1},
{""input"": [[1,1,1,1,1,1,1,1,1,1,1], 10], ""output"": 1},
{""input"": [[1,1,1,1,1,1,1,1,1,1], 1], ""output"": 1},
{""input"": [[1,1,1,1,1,1,1,1,1,1], 2], ""output"": 1},
{""input"": [[1,2,3,4,5,6,7,8,9], 10], ""output"": 8},
{""input"": [[10, 20, 30, 40, 50], 5], ""output"": 50},
{""input"": [[1000000], 1], ""output"": 1000000},
{""input"": [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 100], ""output"": 1},
{""input"": [[1, 2, 3, 4, 5, 6, 1, 8, 9, 1], 9], ""output"": 9},
{""input"": [[1, 2, 3, 1, 5, 6, 7, 8, 9, 10], 7], ""output"": 10},
{""input"": [[1, 2, 3, 4, 5, 6, 7, 8, 9, 2], 30], ""output"": 2},
{""input"": [[1, 2, 3, 4, 5, 20, 7, 8, 9, 10], 5], ""output"": 20},
{""input"": [[1, 2, 99, 4, 5, 6, 7, 8, 9, 10], 22], ""output"": 9},
{""input"": [[1, 2, 3, 4, 5, 6, 7, 44, 9, 10], 3], ""output"": 44},
{""input"": [[1], 3], ""output"": 1},
]


obj = Solution()
for test in params:
    input_arr = test[""input""]
    expected_output = test[""output""]
    result = obj.minEatingSpeed(input_arr[0], input_arr[1])
    if result == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_arr}, expected: {expected_output}, but got {result}"")","let params = [
    {""input"": [[3,6,7,11], 8], ""output"": 4},
    {""input"": [[30,11,23,4,20], 5], ""output"": 30},
    {""input"": [[30,11,23,4,20], 6], ""output"": 23},
    {""input"": [[1,2,3,4,5], 1], ""output"": 5},
    {""input"": [[1,2,3,4,5], 2], ""output"": 5},
    {""input"": [[1,1,1,1,1], 5], ""output"": 1},
    {""input"": [[1,1,1,1,1], 6], ""output"": 1},
    {""input"": [[1,1,1,1,1], 4], ""output"": 1},
    {""input"": [[1,1,1,1,1,1,1,1,1,1,1], 11], ""output"": 1},
    {""input"": [[1,1,1,1,1,1,1,1,1,1,1], 10], ""output"": 1},
    {""input"": [[1,1,1,1,1,1,1,1,1,1], 1], ""output"": 1},
    {""input"": [[1,1,1,1,1,1,1,1,1,1], 2], ""output"": 1},
    {""input"": [[1,2,3,4,5,6,7,8,9], 10], ""output"": 8},
    {""input"": [[10, 20, 30, 40, 50], 5], ""output"": 50},
    {""input"": [[1000000], 1], ""output"": 1000000},
    {""input"": [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 100], ""output"": 1},
    {""input"": [[1, 2, 3, 4, 5, 6, 1, 8, 9, 1], 9], ""output"": 9},
    {""input"": [[1, 2, 3, 1, 5, 6, 7, 8, 9, 10], 7], ""output"": 10},
    {""input"": [[1, 2, 3, 4, 5, 6, 7, 8, 9, 2], 30], ""output"": 2},
    {""input"": [[1, 2, 3, 4, 5, 20, 7, 8, 9, 10], 5], ""output"": 20},
    {""input"": [[1, 2, 99, 4, 5, 6, 7, 8, 9, 10], 22], ""output"": 9},
    {""input"": [[1, 2, 3, 4, 5, 6, 7, 44, 9, 10], 3], ""output"": 44},
    {""input"": [[1], 3], ""output"": 1},
    ]

for (let test of params) {
    let input_arr = test[""input""];
    let expected_output = test[""output""];
    let result = minEatingSpeed(input_arr[0], input_arr[1]);
    if (result === expected_output) {
        console.log(""\u2705 Test Passed."");
    } else {
        console.log(`\u274c Test Failed. Input: ${input_arr}, expected: ${expected_output}, but got ${result}`);
    }
}",,
63b595098ad4593d6b7b01ea,find-minimum-in-rotated-sorted-array,"params = [
{""input"": [3,4,5,1,2], ""output"": 1},
{""input"": [4,5,6,7,0,1,2], ""output"": 0},
{""input"": [11,13,15,17], ""output"": 11},
{""input"": [1,2,3,4,5,6,7], ""output"": 1},
{""input"": [7,1,2,3,4,5,6], ""output"": 1},
{""input"": [6,7,1,2,3,4,5], ""output"": 1},
{""input"": [5,6,7,1,2,3,4], ""output"": 1},
{""input"": [4,5,6,7,8,9,10,11,12,13,14,15,16], ""output"": 4},
{""input"": [4], ""output"": 4},
{""input"": [4,5], ""output"": 4},
]

obj = Solution()

for test in params:
    input_arr = test[""input""]
    expected_output = test[""output""]
    result = obj.findMin(input_arr)
    if result == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_arr}, expected: {expected_output}, but got {result}"")","let params = [
    {""input"": [3,4,5,1,2], ""output"": 1},
    {""input"": [4,5,6,7,0,1,2], ""output"": 0},
    {""input"": [11,13,15,17], ""output"": 11},
    {""input"": [1,2,3,4,5,6,7], ""output"": 1},
    {""input"": [7,1,2,3,4,5,6], ""output"": 1},
    {""input"": [6,7,1,2,3,4,5], ""output"": 1},
    {""input"": [5,6,7,1,2,3,4], ""output"": 1},
    {""input"": [4,5,6,7,8,9,10,11,12,13,14,15,16], ""output"": 4},
    {""input"": [4], ""output"": 4},
    {""input"": [4,5], ""output"": 4},
    ]

for (let test of params) {
    let input_arr = test[""input""];
    let expected_output = test[""output""];
    let result = findMin(input_arr);
    if (result === expected_output) {
        console.log(""\u2705 Test Passed."")
    } else {
        console.log(`\u274c Test Failed. Input: ${input_arr}, expected: ${expected_output}, but got ${result}`)
    }
}",,
63b5950a8ad4593d6b7b01eb,search-in-rotated-sorted-array,"params = [
{""input"": [[4,5,6,7,0,1,2], 0], ""output"": 4},
{""input"": [[4,5,6,7,0,1,2], 3], ""output"": -1},
{""input"": [[1], 0], ""output"": -1},
{""input"": [[1,2,3,4,5], 5], ""output"": 4},
{""input"": [[1,2,3,4,5], 1], ""output"": 0},
{""input"": [[5,1,2,3,4], 5], ""output"": 0},
{""input"": [[5,1,2,3,4], 1], ""output"": 1},
{""input"": [[5,1,2,3,4], 2], ""output"": 2},
{""input"": [[5,1,2,3,4], 3], ""output"": 3},
{""input"": [[5,1,2,3,4], 4], ""output"": 4},
{""input"": [[5,1,2,3,4], 6], ""output"": -1},
{""input"": [[4,5,6,7,8,9,10], 11], ""output"": -1},
{""input"": [[4,5,6,7,8,9,10], 3], ""output"": -1},
{""input"": [[1,2,3,4,5,6], 6], ""output"": 5},
{""input"": [[1,2,3,4,5,6], 2], ""output"": 1},
{""input"": [[5,6,7,8,9,1,2], 6], ""output"": 1},
{""input"": [[5,6,7,8,9,1,2], 2], ""output"": 6},
{""input"": [[5,6,7,8,9,1,2], 9], ""output"": 4},
{""input"": [[5,6,7,8,9,1,2], 4], ""output"": -1},
{""input"": [[5,6,7,8,9,1,2], 0], ""output"": -1},
{""input"": [[5,6,7,8,9,1,2], 1], ""output"": 5}
]


obj = Solution()

for test in params:
    input_arr = test[""input""]
    expected_output = test[""output""]
    result = obj.search(*input_arr)
    if result == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_arr}, expected: {expected_output}, but got {result}"")","let params = [
    {""input"": [[4,5,6,7,0,1,2], 0], ""output"": 4},
    {""input"": [[4,5,6,7,0,1,2], 3], ""output"": -1},
    {""input"": [[1], 0], ""output"": -1},
    {""input"": [[1,2,3,4,5], 5], ""output"": 4},
    {""input"": [[1,2,3,4,5], 1], ""output"": 0},
    {""input"": [[5,1,2,3,4], 5], ""output"": 0},
    {""input"": [[5,1,2,3,4], 1], ""output"": 1},
    {""input"": [[5,1,2,3,4], 2], ""output"": 2},
    {""input"": [[5,1,2,3,4], 3], ""output"": 3},
    {""input"": [[5,1,2,3,4], 4], ""output"": 4},
    {""input"": [[5,1,2,3,4], 6], ""output"": -1},
    {""input"": [[4,5,6,7,8,9,10], 11], ""output"": -1},
    {""input"": [[4,5,6,7,8,9,10], 3], ""output"": -1},
    {""input"": [[1,2,3,4,5,6], 6], ""output"": 5},
    {""input"": [[1,2,3,4,5,6], 2], ""output"": 1},
    {""input"": [[5,6,7,8,9,1,2], 6], ""output"": 1},
    {""input"": [[5,6,7,8,9,1,2], 2], ""output"": 6},
    {""input"": [[5,6,7,8,9,1,2], 9], ""output"": 4},
    {""input"": [[5,6,7,8,9,1,2], 4], ""output"": -1},
    {""input"": [[5,6,7,8,9,1,2], 0], ""output"": -1},
    {""input"": [[5,6,7,8,9,1,2], 1], ""output"": 5}
    ]

for (const test of params) {
    let input_arr = test[""input""];
    let expected_output = test[""output""];
    let result = findMin(input_arr[0], input_arr[1]);
    if (result === expected_output) {
        console.log(""\u2705 Test Passed."");
    } else {
        console.log(`\u274c Test Failed. Input: ${input_arr}, expected: ${expected_output}, but got ${result}`);
    }
}",,
63b5950c8ad4593d6b7b01ec,time-based-key-value-store,"params = [
    {
        ""input"": [[""foo"", ""bar"", 1], [""foo"", 1]], 
        ""output"": ""bar""
    },
    {
        ""input"": [[""bar"", ""tron"", 2], [""bar"", 3]], 
        ""output"": ""tron""
    },
    {
        ""input"": [[""toston"", ""new"", 3], [""foo"", 2]], 
        ""output"": ""bar""
    },
    {
        ""input"": [[""foo"", ""toston"", 3], [""foo"", 3]], 
        ""output"": ""toston""
    },
    {
        ""input"": [[""george"", ""hello"", 10], [""george"", 5]], 
        ""output"": """"
    },
    {
        ""input"": [[""foo"", ""fasdf"", 10], [""foo"", 10]], 
        ""output"": ""fasdf""
    },
    {
        ""input"": [[""foo"", ""bar"", 10], [""foo"", -1]], 
        ""output"": """"
    },
    {
        ""input"": [[""great"", ""you"", 11], [""foo"", 1]], 
        ""output"": ""bar""
    },
    {
        ""input"": [[""are"", ""are"", 12], [""bar"", -1]], 
        ""output"": """"
    },
    {
        ""input"": [[""new"", ""great"", 13], [""great"", 12]], 
        ""output"": ""you""
    },
    {
        ""input"": [[""foo"", ""bar"", 14], [""are"", 1]], 
        ""output"": """"
    },
    {
        ""input"": [[""foo"", ""new"", 14], [""None"", 1]], 
        ""output"": """"
    },
    {
        ""input"": [[""nor"", ""here"", 15], [""george"", 9]], 
        ""output"": """"
    },
    {
        ""input"": [[""there"", ""nor"", 16], [""there"", 16]], 
        ""output"": ""nor""
    },
    {
        ""input"": [[""foo"", ""there"", 17], [""new"", 20]], 
        ""output"": ""great""
    }
]

timeMap = TimeMap()
for test in params:
    input_arr = test[""input""]
    expected_output = test[""output""]
    timeMap.set(input_arr[0][0], input_arr[0][1], input_arr[0][2])
    result = timeMap.get(input_arr[1][0], input_arr[1][1])
    if result == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_arr}, expected: {expected_output}, but got {result}"")","let params = [
    {
        ""input"": [[""foo"", ""bar"", 1], [""foo"", 1]], 
        ""output"": ""bar""
    },
    {
        ""input"": [[""bar"", ""tron"", 2], [""bar"", 3]], 
        ""output"": ""tron""
    },
    {
        ""input"": [[""toston"", ""new"", 3], [""foo"", 2]], 
        ""output"": ""bar""
    },
    {
        ""input"": [[""foo"", ""toston"", 3], [""foo"", 3]], 
        ""output"": ""toston""
    },
    {
        ""input"": [[""george"", ""hello"", 10], [""george"", 5]], 
        ""output"": """"
    },
    {
        ""input"": [[""foo"", ""fasdf"", 10], [""foo"", 10]], 
        ""output"": ""fasdf""
    },
    {
        ""input"": [[""foo"", ""bar"", 10], [""foo"", -1]], 
        ""output"": """"
    },
    {
        ""input"": [[""great"", ""you"", 11], [""foo"", 1]], 
        ""output"": ""bar""
    },
    {
        ""input"": [[""are"", ""are"", 12], [""bar"", -1]], 
        ""output"": """"
    },
    {
        ""input"": [[""new"", ""great"", 13], [""great"", 12]], 
        ""output"": ""you""
    },
    {
        ""input"": [[""foo"", ""bar"", 14], [""are"", 1]], 
        ""output"": """"
    },
    {
        ""input"": [[""foo"", ""new"", 14], [""None"", 1]], 
        ""output"": """"
    },
    {
        ""input"": [[""nor"", ""here"", 15], [""george"", 9]], 
        ""output"": """"
    },
    {
        ""input"": [[""there"", ""nor"", 16], [""there"", 16]], 
        ""output"": ""nor""
    },
    {
        ""input"": [[""foo"", ""there"", 17], [""new"", 20]], 
        ""output"": ""great""
    }
]


let timeMap = new TimeMap();

for (let i = 0; i < params.length; i++) {
    let input_arr = params[i][""input""];
    let expected_output = params[i][""output""];
    timeMap.set(input_arr[0][0], input_arr[0][1], input_arr[0][2]);
    let result = timeMap.get(input_arr[1][0], input_arr[1][1]);
    if (result === expected_output) {
        console.log(""\u2705 Test Passed."");
    } else {
        console.log(`\u274c Test Failed. Input: ${input_arr}, expected: ${expected_output}, but got ${result}`);
    }
}",,
63b5950d8ad4593d6b7b01ed,median-of-two-sorted-arrays,"params = [
{
""input"": [[1,3],[2]],
""output"": 2.00000
},
{
""input"": [[1,2],[3,4]],
""output"": 2.50000
},
{
""input"": [[],[2]],
""output"": 2.0
},
{
""input"": [[1,2,3,4],[5,6,7,8]],
""output"": 4.5
},
{
""input"": [[1],[2,3]],
""output"": 2.0
},
{
""input"": [[1,2,3],[4,5,6,7,8]],
""output"": 4.5
},
{
""input"": [[1,2,3,4,5,6,7,8],[9,10,11,12,13]],
""output"": 7.0
},
{
""input"": [[1,2,3,4,5],[6,7,8,9,10,11,12]],
""output"": 6.5
},
{
""input"": [[-4,-2,0,2,4],[-3,-1,1,3,5,6]],
""output"": 1
},
{
""input"": [[],[1,2,3,4,5,6,7,8,9]],
""output"": 5.0
},
{
""input"": [[-10,-5,0,5,10],[-15,-10,-5,0,5]],
""output"": -2.5
}
]

obj = Solution()

for test in params:
    input_arr = test[""input""]
    expected_output = test[""output""]
    result = obj.findMedianSortedArrays(input_arr[0], input_arr[1])
    if result == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_arr}, expected: {expected_output}, but got {result}"")","let params = [
    {
    ""input"": [[1,3],[2]],
    ""output"": 2.00000
    },
    {
    ""input"": [[1,2],[3,4]],
    ""output"": 2.50000
    },
    {
    ""input"": [[],[2]],
    ""output"": 2.0
    },
    {
    ""input"": [[1,2,3,4],[5,6,7,8]],
    ""output"": 4.5
    },
    {
    ""input"": [[1],[2,3]],
    ""output"": 2.0
    },
    {
    ""input"": [[1,2,3],[4,5,6,7,8]],
    ""output"": 4.5
    },
    {
    ""input"": [[1,2,3,4,5,6,7,8],[9,10,11,12,13]],
    ""output"": 7.0
    },
    {
    ""input"": [[1,2,3,4,5],[6,7,8,9,10,11,12]],
    ""output"": 6.5
    },
    {
    ""input"": [[-4,-2,0,2,4],[-3,-1,1,3,5,6]],
    ""output"": 1
    },
    {
    ""input"": [[],[1,2,3,4,5,6,7,8,9]],
    ""output"": 5.0
    },
    {
    ""input"": [[-10,-5,0,5,10],[-15,-10,-5,0,5]],
    ""output"": -2.5
    }
]

for (let i = 0; i < params.length; i++) {
    let input = params[i][""input""];
    let expected_output = params[i][""output""];
    let result = findMedianSortedArrays(input[0], input[1]);
    if (result === expected_output) {
        console.log(""\u2705 Test Passed."")
    } else {
        console.log(`\u274c Test Failed. Input: ${input}, expected: ${expected_output}, but got ${result}`);
    }
}",,
63b5950e8ad4593d6b7b01ee,reverse-linked-list,"params = [    
    {   
        ""input"": [1,2,3,4,5], 
        ""output"": [5,4,3,2,1]
    },
    {
        ""input"": [1,2], 
        ""output"": [2,1]
    },
    {
        ""input"": [], 
        ""output"": []
    },
    {
        ""input"": [1], 
        ""output"": [1]
    },
    {
        ""input"": [1,1,1,1], 
        ""output"": [1,1,1,1]
    },
    {
        ""input"": [-1,0,1], 
        ""output"": [1,0,-1]
    },
    {
        ""input"": [1,2,3,-1,-2,-3], 
        ""output"": [-3,-2,-1,3,2,1]
    },
    {
        ""input"": [1000,2000,3000,4000,5000], 
        ""output"": [5000,4000,3000,2000,1000]
    },
    {
        ""input"": [-1000,-2000,-3000,-4000,-5000], 
        ""output"": [-5000,-4000,-3000,-2000,-1000]
    },
    {
        ""input"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], 
        ""output"": [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]
    },
    {
        ""input"": [5,5,5,5,5,5,5], 
        ""output"": [5,5,5,5,5,5,5]
    },
    {
        ""input"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], 
        ""output"": [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]
    },
]

obj = Solution()

for test in params:
    input_list = test[""input""]
    expected_output = test[""output""]
    head = None
    for val in input_list[::-1]:
        head = ListNode(val, head)
    result = obj.reverseList(head)
    result_list = []
    while result:
        result_list.append(result.val)
        result = result.next
    if result_list == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_list}, expected: {expected_output}, but got {result_list}"")","let params = [ 
    { 
    ""input"": [[1,2,4], [1,3,4]],
    ""output"": [1,1,2,3,4,4]
    },
    {
    ""input"": [[],[]],
    ""output"": []
    },
    {
    ""input"": [[],[0]],
    ""output"": [0]
    },
    {
    ""input"": [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20]],
    ""output"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
    },
    {
    ""input"": [[-1,0,1],[-2,-1,0,1,2]],
    ""output"": [-2, -1, -1, 0, 0, 1, 1, 2]
    },
    {
    ""input"": [[1,2,3,4],[5,6,7,8]],
    ""output"": [1,2,3,4,5,6,7,8]
    },
    {
    ""input"": [[1,1,1,1],[2,2,2,2]],
    ""output"": [1,1,1,1,2,2,2,2]
    },
    {
    ""input"": [[-100,-50,0,50,100],[-100,-50,0,50,100]],
    ""output"": [-100,-100,-50,-50,0,0,50,50,100,100]
    },
    {
    ""input"": [[1,3,5,7,9],[2,4,6,8,10]],
    ""output"": [1,2,3,4,5,6,7,8,9,10]
    },
    {
    ""input"": [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20]],
    ""output"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
    }
]

var mergeTwoLists = function(l1, l2) {
    var mergedHead = { val : -1, next : null },
        crt = mergedHead;
    while(l1 && l2) {
        if(l1.val > l2.val) {
            crt.next = l2;
            l2 = l2.next;
        } else {
            crt.next = l1;
            l1 = l1.next;
        }
        crt = crt.next;
    }
    crt.next = l1 || l2;
    
    return mergedHead.next;
};


for (const test of params) {
    let list1 = test[""input""][0];
    let list2 = test[""input""][1];
    let head1 = null;
    let head2 = null;
    let current1 = head1;
    let current2 = head2;
    for(let i = 0; i < list1.length; i++){
        if(!current1){
            current1 = new ListNode(list1[i]);
            head1 = current1;
        }else{
            current1.next = new ListNode(list1[i]);
            current1 = current1.next;
        }
    }
    for(let i = 0; i < list2.length; i++){
        if(!current2){
            current2 = new ListNode(list2[i]);
            head2 = current2;
        }else{
            current2.next = new ListNode(list2[i]);
            current2 = current2.next;
        }
    }
    let result = mergeTwoLists(head1, head2);
    let resultList = [];
    while (result) {
        resultList.push(result.val);
        result = result.next;
    }
    if (resultList.length === 0 && test[""output""].length === 0) {
        console.log(""\u2705 Test Passed."")
    } else if (resultList.toString() === test[""output""].toString()) {
        console.log(""\u2705 Test Passed."")
    } else {
        console.log(`\u274c Test Failed. Input: ${test[""input""]}, expected: ${test[""output""]}, but got ${resultList}`)
    }
}","class ListNode:
     def __init__(self, val=0, next=None):
         self.val = val
         self.next = next","function ListNode(val, next) {
     this.val = (val===undefined ? 0 : val)
     this.next = (next===undefined ? null : next)
}"
63b5950e8ad4593d6b7b01ef,merge-two-sorted-lists,"params = [ 
{ 
""input"": [[1,2,4], [1,3,4]],
""output"": [1,1,2,3,4,4]
},
{
""input"": [[],[]],
""output"": []
},
{
""input"": [[],[0]],
""output"": [0]
},
{
""input"": [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20]],
""output"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
},
{
""input"": [[-1,0,1],[-2,-1,0,1,2]],
""output"": [-2, -1, -1, 0, 0, 1, 1, 2]
},
{
""input"": [[1,2,3,4],[5,6,7,8]],
""output"": [1,2,3,4,5,6,7,8]
},
{
""input"": [[1,1,1,1],[2,2,2,2]],
""output"": [1,1,1,1,2,2,2,2]
},
{
""input"": [[-100,-50,0,50,100],[-100,-50,0,50,100]],
""output"": [-100,-100,-50,-50,0,0,50,50,100,100]
},
{
""input"": [[1,3,5,7,9],[2,4,6,8,10]],
""output"": [1,2,3,4,5,6,7,8,9,10]
},
{
""input"": [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20]],
""output"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
}
]

obj = Solution()

for test in params:
    input1 = test[""input""][0]
    input2 = test[""input""][1]
    expected_output = test[""output""]
    head1 = None
    head2 = None
    for val in input1[::-1]:
        head1 = ListNode(val, head1)
    for val in input2[::-1]:
        head2 = ListNode(val, head2)
    result = obj.mergeTwoLists(head1, head2)
    result_list = []
    while result:
        result_list.append(result.val)
        result = result.next
    if result_list == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input1}, {input2}, expected: {expected_output}, but got {result_list}"")","let params = [ 
    { 
    ""input"": [[1,2,4], [1,3,4]],
    ""output"": [1,1,2,3,4,4]
    },
    {
    ""input"": [[],[]],
    ""output"": []
    },
    {
    ""input"": [[],[0]],
    ""output"": [0]
    },
    {
    ""input"": [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20]],
    ""output"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
    },
    {
    ""input"": [[-1,0,1],[-2,-1,0,1,2]],
    ""output"": [-2, -1, -1, 0, 0, 1, 1, 2]
    },
    {
    ""input"": [[1,2,3,4],[5,6,7,8]],
    ""output"": [1,2,3,4,5,6,7,8]
    },
    {
    ""input"": [[1,1,1,1],[2,2,2,2]],
    ""output"": [1,1,1,1,2,2,2,2]
    },
    {
    ""input"": [[-100,-50,0,50,100],[-100,-50,0,50,100]],
    ""output"": [-100,-100,-50,-50,0,0,50,50,100,100]
    },
    {
    ""input"": [[1,3,5,7,9],[2,4,6,8,10]],
    ""output"": [1,2,3,4,5,6,7,8,9,10]
    },
    {
    ""input"": [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20]],
    ""output"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
    }
]


var mergeTwoLists = function(l1, l2) {
    var mergedHead = { val : -1, next : null },
        crt = mergedHead;
    while(l1 && l2) {
        if(l1.val > l2.val) {
            crt.next = l2;
            l2 = l2.next;
        } else {
            crt.next = l1;
            l1 = l1.next;
        }
        crt = crt.next;
    }
    crt.next = l1 || l2;
    
    return mergedHead.next;
};


for (const test of params) {
    let list1 = test[""input""][0];
    let list2 = test[""input""][1];
    let head1 = null;
    let head2 = null;
    let current1 = head1;
    let current2 = head2;
    for(let i = 0; i < list1.length; i++){
        if(!current1){
            current1 = new ListNode(list1[i]);
            head1 = current1;
        }else{
            current1.next = new ListNode(list1[i]);
            current1 = current1.next;
        }
    }
    for(let i = 0; i < list2.length; i++){
        if(!current2){
            current2 = new ListNode(list2[i]);
            head2 = current2;
        }else{
            current2.next = new ListNode(list2[i]);
            current2 = current2.next;
        }
    }
    let result = mergeTwoLists(head1, head2);
    let resultList = [];
    while (result) {
        resultList.push(result.val);
        result = result.next;
    }
    if (resultList.length === 0 && test[""output""].length === 0) {
        console.log(""_ Test Passed."")
    } else if (resultList.toString() === test[""output""].toString()) {
        console.log(""_ Test Passed."")
    } else {
        console.log(`_ Test Failed. Input: ${test[""input""]}, expected: ${test[""output""]}, but got ${resultList}`)
    }
}","class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next","function ListNode(val, next) {
     this.val = (val===undefined ? 0 : val)
     this.next = (next===undefined ? null : next)
}"
63b5950f8ad4593d6b7b01f0,reorder-list,"params = [
{
""input"": [1,2,3,4],
""output"": [1,4,2,3]
},
{
""input"": [1,2,3,4,5],
""output"": [1,5,2,4,3]
},
{
""input"": [1],
""output"": [1]
},
{
""input"": [1,2,3,4,5,6],
""output"": [1,6,2,5,3,4]
},
{
""input"": [1,2,3,4,5,6,7],
""output"": [1,7,2,6,3,5,4]
},
{
""input"": [1,2,3,4,5,6,7,8],
""output"": [1,8,2,7,3,6,4,5]
},
{
""input"": [1,2,3,4,5,6,7,8,9],
""output"": [1,9,2,8,3,7,4,6,5]
},

{
""input"": [1,4,3,5,6,7,8,9,9,0,7,4,3,2,1],
""output"":  [1, 1, 4, 2, 3, 3, 5, 4, 6, 7, 7, 0, 8, 9, 9]
},
{
""input"": [1,244,3,4444,578, 3, 6, 7, 11, 44, 3, 2],
""output"": [1, 2, 244, 3, 3, 44, 4444, 11, 578, 7, 3, 6]
},
{
""input"": [1000,1000,1000,1000,1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000],
""output"": [1000,1000,1000,1000,1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000],
},
{
""input"": [1,2,3,4,5,6,7,8,9,10,11,12, 13, 14, 15, 16, 17, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,1 ,1, 1, 3,3 ,4, 5, 6, 7],
""output"": [1, 7, 2, 6, 3, 5, 4, 4, 5, 3, 6, 3, 7, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 1, 17, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
},
{
""input"": [1,2],
""output"": [1,2],
},
{
""input"": [1,2,3],
""output"": [1, 3, 2]
},
]

def convert_to_linked_list(input_list):
    dummy = ListNode()
    cur = dummy
    for val in input_list:
        cur.next = ListNode(val)
        cur = cur.next
    return dummy.next

def convert_from_linked_list(head):
    result = []
    while head:
        result.append(head.val)
        head = head.next
    return result

obj = Solution()
for test in params:
    input_list = test[""input""]
    expected_output = test[""output""]
    head = convert_to_linked_list(input_list)
    obj.reorderList(head)
    result_list = convert_from_linked_list(head)
    if result_list == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_list}, expected: {expected_output}, but got {result_list}"")
","let params = [
    {
    ""input"": [1,2,3,4],
    ""output"": [1,4,2,3]
    },
    {
    ""input"": [1,2,3,4,5],
    ""output"": [1,5,2,4,3]
    },
    {
    ""input"": [1],
    ""output"": [1]
    },
    {
    ""input"": [1,2,3,4,5,6],
    ""output"": [1,6,2,5,3,4]
    },
    {
    ""input"": [1,2,3,4,5,6,7],
    ""output"": [1,7,2,6,3,5,4]
    },
    {
    ""input"": [1,2,3,4,5,6,7,8],
    ""output"": [1,8,2,7,3,6,4,5]
    },
    {
    ""input"": [1,2,3,4,5,6,7,8,9],
    ""output"": [1,9,2,8,3,7,4,6,5]
    },
    
    {
    ""input"": [1,4,3,5,6,7,8,9,9,0,7,4,3,2,1],
    ""output"":  [1, 1, 4, 2, 3, 3, 5, 4, 6, 7, 7, 0, 8, 9, 9]
    },
    {
    ""input"": [1,244,3,4444,578, 3, 6, 7, 11, 44, 3, 2],
    ""output"": [1, 2, 244, 3, 3, 44, 4444, 11, 578, 7, 3, 6]
    },
    {
    ""input"": [1000,1000,1000,1000,1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000],
    ""output"": [1000,1000,1000,1000,1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000],
    },
    {
    ""input"": [1,2,3,4,5,6,7,8,9,10,11,12, 13, 14, 15, 16, 17, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,1 ,1, 1, 3,3 ,4, 5, 6, 7],
    ""output"": [1, 7, 2, 6, 3, 5, 4, 4, 5, 3, 6, 3, 7, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 1, 17, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    },
    {
    ""input"": [1,2],
    ""output"": [1,2],
    },
    {
    ""input"": [1,2,3],
    ""output"": [1, 3, 2]
    },
]


function convert_to_linked_list(input_list) {
    let dummy = new ListNode();
    let cur = dummy;
    for (let val of input_list) {
        cur.next = new ListNode(val);
        cur = cur.next;
    }
    return dummy.next;
}

function convert_from_linked_list(head) {
    let result = [];
    while (head) {
        result.push(head.val);
        head = head.next;
    }
    return result;
}

for (let test of params) {
    let input_list = test[""input""];
    let expected_output = test[""output""];
    let head = convert_to_linked_list(input_list);
    reorderList(head);
    let result_list = convert_from_linked_list(head);
    if (result_list.toString() === expected_output.toString()) {
        console.log(""\u2705 Test Passed."");
    } else {
        console.log(`\u274c Test Failed. Input: ${input_list}, expected: ${expected_output}, but got ${result_list}`);
    }
}","class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next","function ListNode(val, next) {
    this.val = (val===undefined ? 0 : val)
    this.next = (next===undefined ? null : next)
}"
63b595108ad4593d6b7b01f1,remove-nth-node-from-end-of-list,"params = [
{
""input"": [1, 2, 3, 4, 5],
""n"": 2,
""output"": [1, 2, 3, 5]
},
{
""input"": [1, 2, 3, 4, 5],
""n"": 5,
""output"": [2, 3, 4, 5]
},
{
""input"": [1, 2, 3, 4, 5],
""n"": 1,
""output"": [1, 2, 3, 4]
},
{
""input"": [1],
""n"": 1,
""output"": []
},
{
""input"": [1, 2],
""n"": 1,
""output"": [1]
},
{
""input"": [1, 2],
""n"": 2,
""output"": [2]
},
{
""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
""n"": 3,
""output"": [1, 2, 3, 4, 5, 6, 7, 9, 10]
},
{
""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
""n"": 8,
""output"": [1, 2, 4, 5, 6, 7, 8, 9, 10]
},
{
""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
""n"": 10,
""output"": [2, 3, 4, 5, 6, 7, 8, 9, 10]
},
{
""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
""n"": 4,
""output"": [1, 2, 3, 4, 5, 6, 8, 9, 10]
}
]


def convert_to_linked_list(input_list):
    dummy = ListNode()
    cur = dummy
    for val in input_list:
        cur.next = ListNode(val)
        cur = cur.next
    return dummy.next

def convert_from_linked_list(head):
    result = []
    while head:
        result.append(head.val)
        head = head.next
    return result

obj = Solution()
for test in params:
    input_list = test[""input""]
    expected_output = test[""output""]
    head = convert_to_linked_list(input_list)
    n = test[""n""]
    head = obj.removeNthFromEnd(head, n)
    result_list = convert_from_linked_list(head)
    if result_list == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_list} n={n}, expected: {expected_output}, but got {result_list}"")","let params = [
    {
    ""input"": [1, 2, 3, 4, 5],
    ""n"": 2,
    ""output"": [1, 2, 3, 5]
    },
    {
    ""input"": [1, 2, 3, 4, 5],
    ""n"": 5,
    ""output"": [2, 3, 4, 5]
    },
    {
    ""input"": [1, 2, 3, 4, 5],
    ""n"": 1,
    ""output"": [1, 2, 3, 4]
    },
    {
    ""input"": [1],
    ""n"": 1,
    ""output"": []
    },
    {
    ""input"": [1, 2],
    ""n"": 1,
    ""output"": [1]
    },
    {
    ""input"": [1, 2],
    ""n"": 2,
    ""output"": [2]
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""n"": 3,
    ""output"": [1, 2, 3, 4, 5, 6, 7, 9, 10]
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""n"": 8,
    ""output"": [1, 2, 4, 5, 6, 7, 8, 9, 10]
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""n"": 10,
    ""output"": [2, 3, 4, 5, 6, 7, 8, 9, 10]
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""n"": 4,
    ""output"": [1, 2, 3, 4, 5, 6, 8, 9, 10]
    }
]


 
function convert_to_linked_list(input_list) {
    let dummy = new ListNode();
    let cur = dummy;
    for (let val of input_list) {
        cur.next = new ListNode(val);
        cur = cur.next;
    }
    return dummy.next;
}

function convert_from_linked_list(head) {
    let result = [];
    while (head) {
        result.push(head.val);
        head = head.next;
    }
    return result;
}

for (let test of params) {
    let input_list = test[""input""]
    let expected_output = test[""output""]
    let n = test[""n""]
    let head = convert_to_linked_list(input_list)
    let result = removeNthFromEnd(head, n)
    let result_list = convert_from_linked_list(result)
    if (JSON.stringify(result_list) === JSON.stringify(expected_output)) {
        console.log(""\u2705 Test Passed."")
    } else {
        console.log(`\u274c Test Failed. Input: ${input_list} n=${n}, expected: ${expected_output}, but got ${result_list}`)
    }
}
","class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next","function ListNode(val, next) {
    this.val = (val===undefined ? 0 : val)
    this.next = (next===undefined ? null : next)
}"
63b595118ad4593d6b7b01f2,copy-list-with-random-pointer,"params = [
{
    ""input"": [[7,None],[13,0],[11,4],[10,2],[1,0]],
    ""output"": [[7,None],[13,0],[11,4],[10,2],[1,0]],
},
{
    ""input"": [[1,1],[2,1]],
    ""output"": [[1,1],[2,1]],
},
{
    ""input"": [[3,None],[3,0],[3,None]],
    ""output"": [[3,None],[3,0],[3,None]],
},
{
    ""input"": [[1,1],[2,2],[3,3],[4,4],[5,4]],
    ""output"": [[1,1],[2,2],[3,3],[4,4],[5,4]]
},
{
    ""input"": [[1,1],[2,0],[3,None]],
    ""output"": [[1,1],[2,0],[3,None]],
},
{
    ""input"": [[1,1],[2,2],[3,3],[4,0]],
    ""output"": [[1,1],[2,2],[3,3],[4,0]],
},
{
    ""input"": [[1,None],[2,1],[3,2],[4,3]],
    ""output"": [[1,None],[2,1],[3,2],[4,3]],
},
{
    ""input"": [[1,0],[2,1],[3,2]],
    ""output"": [[1,0],[2,1],[3,2]],
},
{
    ""input"": [[1,2],[2,1],[2,0]],
    ""output"":[[1,2],[2,1],[2,0]],
},
{
    ""input"": [[1,2],[2,1],[3,0]],
    ""output"": [[1,2],[2,1],[3,0]],
}
]


def convert_to_linked_list(input_list):
    nodes = []
    for val, random_index in input_list:
        node = Node(val)
        nodes.append(node)
    for i, (val, random_index) in enumerate(input_list):
        if i < len(input_list) - 1:
            nodes[i].next = nodes[i+1]
        if random_index is not None:
            nodes[i].random = nodes[random_index]
    return nodes[0]


def convert_from_linked_list(head):
    result = []
    head_copy = head
    while head:
        index = -1
        if head.random:
            temp = head_copy
            i = 0
            while temp:
                if temp == head.random:
                    index = i
                temp = temp.next
                i += 1
        result.append([head.val, index])
        head = head.next

    def convert(lst):
        for i in range(len(lst)):
            for j in range(len(lst[i])):
                if lst[i][j] == -1:
                    lst[i][j] = None
        return lst
    return convert(result)



obj = Solution()
for test in params:
    input_list = test[""input""]
    expected_output = test[""output""]
    head = convert_to_linked_list(input_list)
    obj.copyRandomList(head)
    result_list = convert_from_linked_list(head)
    if result_list == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_list}, expected: {expected_output}, but got {result_list}"")
    
","let params = [
    {
        ""input"": [[7,null],[13,0],[11,4],[10,2],[1,0]],
        ""output"": [[7,null],[13,0],[11,4],[10,2],[1,0]],
    },
    {
        ""input"": [[1,1],[2,1]],
        ""output"": [[1,1],[2,1]],
    },
    {
        ""input"": [[3,null],[3,0],[3,null]],
        ""output"": [[3,null],[3,0],[3,null]],
    },
    {
        ""input"": [[1,1],[2,2],[3,3],[4,4],[5,4]],
        ""output"": [[1,1],[2,2],[3,3],[4,4],[5,4]]
    },
    {
        ""input"": [[1,1],[2,0],[3,null]],
        ""output"": [[1,1],[2,0],[3,null]],
    },
    {
        ""input"": [[1,1],[2,2],[3,3],[4,0]],
        ""output"": [[1,1],[2,2],[3,3],[4,0]],
    },
    {
        ""input"": [[1,null],[2,1],[3,2],[4,3]],
        ""output"": [[1,null],[2,1],[3,2],[4,3]],
    },
    {
        ""input"": [[1,0],[2,1],[3,2]],
        ""output"": [[1,0],[2,1],[3,2]],
    },
    {
        ""input"": [[1,2],[2,1],[2,0]],
        ""output"": [[1,2],[2,1],[2,0]],
    },
    {
        ""input"": [[1,2],[2,1],[3,0]],
        ""output"": [[1,2],[2,1],[3,0]],
    }
]

function convert_to_linked_list(input_list) {
    let nodes = []
    for (let [val, random_index] of input_list) {
        let node = new Node(val)
        nodes.push(node)
    }
    for (let [i, [val, random_index]] of input_list.entries()) {
        if (i < input_list.length - 1) {
            nodes[i].next = nodes[i+1]
        }
        if (random_index !== null) {
            nodes[i].random = nodes[random_index]
        }
    }
    return nodes[0]
}

function convert_from_linked_list(head) {
    let result = []
    let head_copy = head
    while (head) {
        let index = -1
        if (head.random) {
            let temp = head_copy
            let i = 0
            while (temp) {
                if (temp === head.random) {
                    index = i
                }
                temp = temp.next
                i += 1
            }
        }
        result.push([head.val, index])
        head = head.next
    }

    function convert(lst) {
        for (let i = 0; i < lst.length; i++) {
            for (let j = 0; j < lst[i].length; j++) {
                if (lst[i][j] === -1) {
                    lst[i][j] = null
                }
            }
        }
        return lst
    }
    return convert(result)
}

for (let i = 0; i < params.length; i++) {
    let input_list = params[i][""input""];
    let expected_output = params[i][""output""];
    let head = convert_to_linked_list(input_list);
    copyRandomList(head);
    let result_list = convert_from_linked_list(head);
    if (result_list.toString() === expected_output.toString()) {
        console.log(""\u2705 Test Passed."");
    } else {
        console.log(""\u274c Test Failed. Input: "" + input_list + "", expected: "" + expected_output + "", but got "" + result_list);
    }
}","class Node:
    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):
        self.val = int(x)
        self.next = next
        self.random = random","function Node(val, next, random) {
    this.val = val;
    this.next = next;
    this.random = random;
};"
63b595128ad4593d6b7b01f3,add-two-numbers,"params = [    
    {   
        ""input"": ([2,4,3], [5,6,4]),
        ""output"": [7,0,8]
    },
    {
        ""input"": ([0], [0]),
        ""output"": [0]
    },
    {
        ""input"": ([9,9,9,9,9,9,9], [9,9,9,9]),
        ""output"": [8,9,9,9,0,0,0,1]
    },
    {
        ""input"": ([9,9,9,9,9,9,9], [1]),
        ""output"": [0,0,0,0,0,0,0,1]
    },
    {
        ""input"": ([1], [9,9,9,9,9,9,9]),
        ""output"": [0,0,0,0,0,0,0,1]
    },
    {
        ""input"": ([5], [5]),
        ""output"": [0,1]
    },
    {
        ""input"": ([1,8], [0]),
        ""output"": [1,8]
    },
    {
        ""input"": ([], [1,2,3]),
        ""output"": [1,2,3]
    },
    {
        ""input"": ([1,2,3], []),
        ""output"": [1,2,3]
    },
    {
        ""input"": ([1,9,9], [1]),
        ""output"": [2, 9, 9]
    }
]

def convert_to_linked_list(input_list):
    dummy = ListNode()
    curr = dummy
    for val in input_list:
        curr.next = ListNode(val)
        curr = curr.next
    return dummy.next

def convert_from_linked_list(head):
    res = []
    while head:
        res.append(head.val)
        head = head.next
    return res

obj = Solution()

for test in params:
    input1 = convert_to_linked_list(test[""input""][0])
    input2 = convert_to_linked_list(test[""input""][1])
    expected_output = test[""output""]
    result = obj.addTwoNumbers(input1, input2)
    result_list = convert_from_linked_list(result)
    if result_list == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {test['input'][0]}, {test['input'][1]}, expected: {expected_output}, but got {result_list}"")","let params = [
    {
    ""input"": [[2,4,3], [5,6,4]],
    ""output"": [7,0,8]
    },
    {
    ""input"": [[0], [0]],
    ""output"": [0]
    },
    {
    ""input"": [[9,9,9,9,9,9,9], [9,9,9,9]],
    ""output"": [8,9,9,9,0,0,0,1]
    },
    {
    ""input"": [[9,9,9,9,9,9,9], [1]],
    ""output"": [0,0,0,0,0,0,0,1]
    },
    {
    ""input"": [[1], [9,9,9,9,9,9,9]],
    ""output"": [0,0,0,0,0,0,0,1]
    },
    {
    ""input"": [[5], [5]],
    ""output"": [0,1]
    },
    {
    ""input"": [[1,8], [0]],
    ""output"": [1,8]
    },
    {
    ""input"": [[], [1,2,3]],
    ""output"": [1,2,3]
    },
    {
    ""input"": [[1,2,3], []],
    ""output"": [1,2,3]
    },
    {
    ""input"": [[1,9,9], [1]],
    ""output"": [2, 9, 9]
    }
]

function convert_to_linked_list(input_list) {
    let dummy = new ListNode();
    let curr = dummy;
    for (let val of input_list) {
        curr.next = new ListNode(val);
        curr = curr.next;
    }
    return dummy.next;
}

function convert_from_linked_list(head) {
    let res = [];
    while (head) {
        res.push(head.val);
        head = head.next;
    }
    return res;
}

for (let test of params) {
    let input1 = convert_to_linked_list(test[""input""][0]);
    let input2 = convert_to_linked_list(test[""input""][1]);
    let expected_output = test[""output""];
    let result = addTwoNumbers(input1, input2);
    let result_list = convert_from_linked_list(result);
    if (result_list.toString() === expected_output.toString()) {
        console.log(""\u2705 Test Passed."");
    } else {
        console.log(`\u274c Test Failed. Input: ${test['input'][0]}, ${test['input'][1]}, expected: ${expected_output}, but got ${result_list}`);
    }
}","class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next"," function ListNode(val, next) {
    this.val = (val===undefined ? 0 : val)
    this.next = (next===undefined ? null : next)
}"
63b595148ad4593d6b7b01f4,linked-list-cycle,"params = [
    {
        ""input"": [3, 2, 0, -4],
        ""pos"": 1,
        ""output"": True
    },
    {
        ""input"": [1, 2],
        ""pos"": 0,
        ""output"": True
    },
    {
        ""input"": [1],
        ""pos"": -1,
        ""output"": False
    },
    {
        ""input"": [],
        ""pos"": -1,
        ""output"": False
    },
    {
        ""input"": [1, 2, 3, 4, 5],
        ""pos"": 2,
        ""output"": True
    },
    {
        ""input"": [1, 2, 3, 4, 5],
        ""pos"": -1,
        ""output"": False
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
        ""pos"": 7,
        ""output"": True
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
        ""pos"": -1,
        ""output"": False
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        ""pos"": 9,
        ""output"": True
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 50, 100],
        ""pos"": 4,
        ""output"": True
    }
]


def convert_to_linked_list(input_list, pos):
    dummy = ListNode(-1)
    curr = dummy
    node_list = []
    for val in input_list:
        node = ListNode(val)
        curr.next = node
        node_list.append(node)
        curr = curr.next
    if pos != -1:
        curr.next = node_list[pos]
    return dummy.next

obj = Solution()
for test in params:
    input_list = test[""input""]
    pos = test[""pos""]
    expected_output = test[""output""]
    head = convert_to_linked_list(input_list, pos)
    result = obj.hasCycle(head)
    if result == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_list}, expected: {expected_output}, but got {result}"")","let params = [
    {
        ""input"": [3, 2, 0, -4],
        ""pos"": 1,
        ""output"": true
    },
    {
        ""input"": [1, 2],
        ""pos"": 0,
        ""output"": true
    },
    {
        ""input"": [1],
        ""pos"": -1,
        ""output"": false
    },
    {
        ""input"": [],
        ""pos"": -1,
        ""output"": false
    },
    {
        ""input"": [1, 2, 3, 4, 5],
        ""pos"": 2,
        ""output"": true
    },
    {
        ""input"": [1, 2, 3, 4, 5],
        ""pos"": -1,
        ""output"": false
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
        ""pos"": 7,
        ""output"": true
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
        ""pos"": -1,
        ""output"": false
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        ""pos"": 9,
        ""output"": true
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 50, 100],
        ""pos"": 4,
        ""output"": true
    }
]

function convert_to_linked_list(input_list, pos) {
    let dummy = new ListNode(-1);
    let curr = dummy;
    let node_list = [];
    for (let val of input_list) {
        let node = new ListNode(val);
        curr.next = node;
        node_list.push(node);
        curr = curr.next;
    }
    if (pos !== -1) {
        curr.next = node_list[pos];
    }
    return dummy.next;
}

for (let test of params) {
    let input_list = test.input;
    let pos = test.pos;
    let expected_output = test.output;
    let head = convert_to_linked_list(input_list, pos);
    let result = hasCycle(head);
    if (result === expected_output) {
        console.log(""\u2705 Test Passed."");
    } else {
        console.log(`\u274c Test Failed. Input: ${input_list}, expected: ${expected_output}, but got ${result}`);
    }
}

","class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None","function ListNode(val) {
    this.val = val;
    this.next = null;
}"
63b595148ad4593d6b7b01f5,find-the-duplicate-number,"params = [    
    {        
        ""input"": [1, 3, 4, 2, 2],
        ""output"": 2
    },
    {
        ""input"": [3, 1, 3, 4, 2],
        ""output"": 3
    },
    {
        ""input"": [1, 2, 3, 4, 5, 5],
        ""output"": 5
    },
    {
        ""input"": [5, 5, 4, 3, 2, 1],
        ""output"": 5
    },
    {
        ""input"": [1, 2, 2, 3, 4, 5],
        ""output"": 2
    },
    {
        ""input"": [1, 2, 3, 4, 5, 1],
        ""output"": 1
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 9],
        ""output"": 9
    },
    {
        ""input"": [1, 1, 2, 3, 4, 5, 6, 7, 8, 9],
        ""output"": 1
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 8],
        ""output"": 8
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 7, 8, 9],
        ""output"": 7
    }
]


obj = Solution()
for test in params:
    nums = test[""input""]
    expected_output = test[""output""]
    result = obj.findDuplicate(nums)
    if result == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {nums}, expected: {expected_output}, but got {result}"")","let params = [    
    {        
        ""input"": [1, 3, 4, 2, 2],
        ""output"": 2
    },
    {
        ""input"": [3, 1, 3, 4, 2],
        ""output"": 3
    },
    {
        ""input"": [1, 2, 3, 4, 5, 5],
        ""output"": 5
    },
    {
        ""input"": [5, 5, 4, 3, 2, 1],
        ""output"": 5
    },
    {
        ""input"": [1, 2, 2, 3, 4, 5],
        ""output"": 2
    },
    {
        ""input"": [1, 2, 3, 4, 5, 1],
        ""output"": 1
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 9],
        ""output"": 9
    },
    {
        ""input"": [1, 1, 2, 3, 4, 5, 6, 7, 8, 9],
        ""output"": 1
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 8],
        ""output"": 8
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 7, 8, 9],
        ""output"": 7
    }
]


for (let i = 0; i < params.length; i++) {
    const input = params[i].input;
    const expected_output = params[i].output;
    const result = findDuplicate(input);
    if (result === expected_output) {
        console.log(""\u2705 Test Passed."")
    } else {
        console.log(`\u274c Test Failed. Input: ${input}, expected: ${expected_output}, but got ${result}`)
    }
}",,
63b595158ad4593d6b7b01f6,lru-cache,"params = [        
    {                
        ""input"": [2],
        ""operations"": [[""put"", 1, 1], [""put"", 2, 2], [""get"", 1], [""put"", 3, 3], [""get"", 2], [""put"", 4, 4], [""get"", 1], [""get"", 3], [""get"", 4]],
        ""output"": [None, None, 1, None, -1, None, -1, 3, 4]
    },
    {
        ""input"": [1],
        ""operations"": [[""put"", 1, 1], [""get"", 1], [""put"", 2, 2], [""get"", 2], [""put"", 3, 3], [""get"", 3], [""put"", 4, 4], [""get"", 4]],
        ""output"": [None, 1, None, 2, None,3, None,4]
    },
    {
        ""input"": [2],
        ""operations"": [[""put"", 1, 1], [""put"", 2, 2], [""get"", 2], [""get"", 1], [""put"", 2, 4], [""get"", 2], [""get"", 1]],
        ""output"": [None, None, 2, 1, None, 4, 1]
    },
    {
        ""input"": [3],
        ""operations"": [[""put"", 1, 1], [""put"", 2, 2], [""put"", 3, 3], [""get"", 2], [""get"", 3], [""put"", 4, 4], [""get"", 1], [""get"", 4]],
        ""output"": [None,None,None,2,3,None,-1,4]
    },
    {        
        ""input"": [2],
        ""operations"": [[""put"", 1, 1], [""put"", 2, 2], [""get"", 3], [""put"", 3, 3], [""get"", 2], [""put"", 4, 4], [""get"", 1], [""get"", 3], [""get"", 4]],
        ""output"": [None,None,-1,None,2,None,-1,-1,4]
    },
    {
        ""input"": [1],
        ""operations"": [[""put"", 1, 1], [""get"", 1], [""put"", 1, 2], [""get"", 1], [""put"", 2, 2], [""get"", 2]],
        ""output"": [None,1,None,2,None,2]
    },
    {
        ""input"": [2],
        ""operations"": [[""put"", 1, 1], [""put"", 2, 2], [""get"", 2], [""get"", 1], [""put"", 2, 4], [""put"", 3, 3], [""get"", 2], [""get"", 3]],
        ""output"": [None,None,2,1,None,None,4,3]
    },
    {
        ""input"": [3],
        ""operations"": [[""put"", 1, 1], [""put"", 2, 2], [""put"", 3, 3], [""get"", 4], [""put"", 4, 4], [""get"", 1], [""get"", 3], [""get"", 4]],
        ""output"": [None,None,None,-1,None,-1,3,4]
    },
    {
        ""input"": [2],
        ""operations"": [[""put"", 1, 1], [""get"", 1], [""put"", 2, 2], [""get"", 2], [""put"", 3, 3], [""get"", 3]],
        ""output"": [None,1,None,2,None,3]
    },
    {
        ""input"": [2],
        ""operations"": [[""put"", 2, 1], [""get"", 1], [""put"", 2, 0], [""get"", 2], [""put"", 3, -1], [""get"", 3]],
        ""output"": [None,-1,None,0,None,-1]
    },
]


for i in range(len(params)):
    cache = LRUCache(params[i]['input'][0])
    operations = params[i]['operations']
    expected_output = params[i]['output']
    output = []

    for j in range(len(operations)):
        op = operations[j][0]
        key = operations[j][1]
        if op == ""put"":
            value = operations[j][2]
            cache.put(key, value)
            output.append(None)
        elif op == ""get"":
            val = cache.get(key)
            output.append(val)
    if output == expected_output:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274c Test failed. Input: capacity={cache} operations={operations} Expected output: {expected_output}, but got {output}"")","let params = [    
    {        
        ""input"": [2],
        ""operations"": [[""put"", 1, 1], [""put"", 2, 2], [""get"", 1], [""put"", 3, 3], [""get"", 2], [""put"", 4, 4], [""get"", 1], [""get"", 3], [""get"", 4]],
        ""output"": [null, null, 1, null, -1, null, -1, 3, 4]
    },
    {
        ""input"": [1],
        ""operations"": [[""put"", 1, 1], [""get"", 1], [""put"", 2, 2], [""get"", 2], [""put"", 3, 3], [""get"", 3], [""put"", 4, 4], [""get"", 4]],
        ""output"": [null, 1, null, 2, null,3, null,4]
    },
    {
        ""input"": [2],
        ""operations"": [[""put"", 1, 1], [""put"", 2, 2], [""get"", 2], [""get"", 1], [""put"", 2, 4], [""get"", 2], [""get"", 1]],
        ""output"": [null, null, 2, 1, null, 4, 1]
    },
    {
        ""input"": [3],
        ""operations"": [[""put"", 1, 1], [""put"", 2, 2], [""put"", 3, 3], [""get"", 2], [""get"", 3], [""put"", 4, 4], [""get"", 1], [""get"", 4]],
        ""output"": [null,null,null,2,3,,-1,4]
    },
    {        
        ""input"": [2],
        ""operations"": [[""put"", 1, 1], [""put"", 2, 2], [""get"", 3], [""put"", 3, 3], [""get"", 2], [""put"", 4, 4], [""get"", 1], [""get"", 3], [""get"", 4]],
        ""output"": [null,null,-1,,2,null,-1,-1,4]
    },
    {
        ""input"": [1],
        ""operations"": [[""put"", 1, 1], [""get"", 1], [""put"", 1, 2], [""get"", 1], [""put"", 2, 2], [""get"", 2]],
        ""output"": [null,1,null,2,null,2]
    },
    {
        ""input"": [2],
        ""operations"": [[""put"", 1, 1], [""put"", 2, 2], [""get"", 2], [""get"", 1], [""put"", 2, 4], [""put"", 3, 3], [""get"", 2], [""get"", 3]],
        ""output"": [null,null,2,1,null,null,4,3]
    },
    {
        ""input"": [3],
        ""operations"": [[""put"", 1, 1], [""put"", 2, 2], [""put"", 3, 3], [""get"", 4], [""put"", 4, 4], [""get"", 1], [""get"", 3], [""get"", 4]],
        ""output"": [null,null,null,-1,null,-1,3,4]
    },
    {
        ""input"": [2],
        ""operations"": [[""put"", 1, 1], [""get"", 1], [""put"", 2, 2], [""get"", 2], [""put"", 3, 3], [""get"", 3]],
        ""output"": [null,1,null,2,null,3]
    },
    {
        ""input"": [2],
        ""operations"": [[""put"", 2, 1], [""get"", 1], [""put"", 2, 0], [""get"", 2], [""put"", 3, -1], [""get"", 3]],
        ""output"": [null,-1,null,0,null,-1]
    },
]

for (let i = 0; i < params.length; i++) {
    let cache = new LRUCache(params[i].input[0]);
    let operations = params[i].operations;
    let expectedOutput = params[i].output;
    let output = [];

    for (let j = 0; j < operations.length; j++) {
        let op = operations[j][0];
        let key = operations[j][1];
        if (op === ""put"") {
            let value = operations[j][2];
            cache.put(key, value);
            output.push(null);
        } else if (op === ""get"") {
            let val = cache.get(key);
            output.push(val);
        }
    }
    if (output.join("","") === expectedOutput.join("","")) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(
            `\u274c Test failed. Input: capacity=${cache} operations=${operations} Expected output: [${expectedOutput}], but got [${output}]`
        );
    }
}",,
63b595168ad4593d6b7b01f7,merge-k-sorted-lists,"params = [
    {
        ""input"": [[1,4,5],[1,3,4],[2,6]],
        ""output"": [1,1,2,3,4,4,5,6]
    },
    {
        ""input"": [],
        ""output"": []
    },
    {
        ""input"": [[]],
        ""output"": []
    },
    {
        ""input"": [[1,2,3], [4,5,6], [7,8,9]],
        ""output"": [1,2,3,4,5,6,7,8,9]
    },
    {
        ""input"": [[-4,-2,0],[-3,-2,-1],[5,6,7]],
        ""output"": [-4,-3,-2,-2,-1,0,5,6,7]
    },
    {
        ""input"": [[1],[2],[3]],
        ""output"": [1,2,3]
    },
    {
        ""input"": [[1000, 3000, 3001, 3004],[2, 4, 6, 7, 100, 200],[3, 4, 5, 6, 666]],
        ""output"": [2, 3, 4, 4, 5, 6, 6, 7, 100, 200, 666, 1000, 3000, 3001, 3004]
    },
    {
        ""input"": [[1],[2],[3]],
        ""output"": [1,2,3]
    },
    {
        ""input"": [[1,3,5,7],[2,4,6,8]],
        ""output"": [1, 2, 3, 4, 5, 6, 7, 8]
    },
     {
        ""input"": [[1,3,5,7],[-100, -99, -98], [80], [], [100, 105, 1000]],
        ""output"": [-100, -99, -98, 1, 3, 5, 7, 80, 100, 105, 1000]
    },
]

def convert_to_linked_list(arr):
    dummy = ListNode()
    curr = dummy
    for val in arr:
        curr.next = ListNode(val)
        curr = curr.next
    return dummy.next

def convert_from_linked_list(linked_list):
    arr = []
    curr = linked_list
    while curr:
        arr.append(curr.val)
        curr = curr.next
    return arr

obj = Solution()

for i in range(len(params)):
    input_lists = [convert_to_linked_list(lists) for lists in params[i][""input""]]
    expected_output = params[i][""output""]
    output = convert_from_linked_list(obj.mergeKLists(input_lists))
    if output == expected_output:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input={params[i]['input']} Expected output: {expected_output}, but got {output}"")","let params = [
    {
        ""input"": [[1,4,5],[1,3,4],[2,6]],
        ""output"": [1,1,2,3,4,4,5,6]
    },
    {
        ""input"": [],
        ""output"": []
    },
    {
        ""input"": [[]],
        ""output"": []
    },
    {
        ""input"": [[1,2,3], [4,5,6], [7,8,9]],
        ""output"": [1,2,3,4,5,6,7,8,9]
    },
    {
        ""input"": [[-4,-2,0],[-3,-2,-1],[5,6,7]],
        ""output"": [-4,-3,-2,-2,-1,0,5,6,7]
    },
    {
        ""input"": [[1],[2],[3]],
        ""output"": [1,2,3]
    },
    {
        ""input"": [[1000, 3000, 3001, 3004],[2, 4, 6, 7, 100, 200],[3, 4, 5, 6, 666]],
        ""output"": [2, 3, 4, 4, 5, 6, 6, 7, 100, 200, 666, 1000, 3000, 3001, 3004]
    },
    {
        ""input"": [[1],[2],[3]],
        ""output"": [1,2,3]
    },
    {
        ""input"": [[1,3,5,7],[2,4,6,8]],
        ""output"": [1, 2, 3, 4, 5, 6, 7, 8]
    },
     {
        ""input"": [[1,3,5,7],[-100, -99, -98], [80], [], [100, 105, 1000]],
        ""output"": [-100, -99, -98, 1, 3, 5, 7, 80, 100, 105, 1000]
    },
]

function convert_to_linked_list(arr) {
    let dummy = new ListNode();
    let curr = dummy;
    for (let val of arr) {
        curr.next = new ListNode(val);
        curr = curr.next;
    }
    return dummy.next;
}

function convert_from_linked_list(linked_list) {
    let arr = [];
    let curr = linked_list;
    while (curr) {
        arr.push(curr.val);
        curr = curr.next;
    }
    return arr;
}

for (let i = 0; i < params.length; i++) {
    let input_lists = params[i][""input""].map(lists => convert_to_linked_list(lists));
    let expected_output = params[i][""output""];
    let output = convert_from_linked_list(mergeKLists(input_lists));
    if (output.toString() === expected_output.toString()) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. Input: ${params[i][""input""]} Expected output: [${expected_output}], but got [${output}]`);
    }
}","class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next","function ListNode(val, next) {
    this.val = (val===undefined ? 0 : val)
    this.next = (next===undefined ? null : next)
}"
63b595178ad4593d6b7b01f8,reverse-nodes-in-k-group,"params = [
    {
    ""input"": [1, 2, 3, 4, 5],
    ""k"": 2,
    ""output"": [2, 1, 4, 3, 5]
    },
    {
    ""input"": [1, 2, 3, 4, 5],
    ""k"": 3,
    ""output"": [3, 2, 1, 4, 5]
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6],
    ""k"": 2,
    ""output"": [2, 1, 4, 3, 6, 5]
    },
    {
    ""input"": [1, 2, 3],
    ""k"": 1,
    ""output"": [1, 2, 3]
    },
    {
    ""input"": [1, 2, 3, 4],
    ""k"": 2,
    ""output"": [2, 1, 4, 3]
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8],
    ""k"": 3,
    ""output"": [3, 2, 1, 6, 5, 4, 7, 8]
    },
    {
    ""input"": [1],
    ""k"": 1,
    ""output"": [1]
    },
    {
    ""input"": [30, 40, 50, -1],
    ""k"": 3,
    ""output"": [50, 40, 30, -1]
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""k"": 5,
    ""output"": [5, 4, 3, 2, 1, 10, 9, 8, 7, 6]
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""k"": 9,
    ""output"": [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]
    }
]

def convert_to_linked_list(arr):
    dummy = ListNode(0)
    curr = dummy
    for val in arr:
        curr.next = ListNode(val)
        curr = curr.next
    return dummy.next

def convert_from_linked_list(linked_list):
    arr = []
    curr = linked_list
    while curr:
        arr.append(curr.val)
        curr = curr.next
    return arr


obj = Solution()

for i in range(len(params)):
    input_head = convert_to_linked_list(params[i][""input""])
    input_k = params[i][""k""]
    expected_output = params[i][""output""]
    output = convert_from_linked_list(obj.reverseKGroup(input_head, input_k))
    if output == expected_output:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input: linked list={params[i]['input']} k={input_k} Expected output: {expected_output}, but got {output}"")","let params = [
    {
    ""input"": [1, 2, 3, 4, 5],
    ""k"": 2,
    ""output"": [2, 1, 4, 3, 5]
    },
    {
    ""input"": [1, 2, 3, 4, 5],
    ""k"": 3,
    ""output"": [3, 2, 1, 4, 5]
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6],
    ""k"": 2,
    ""output"": [2, 1, 4, 3, 6, 5]
    },
    {
    ""input"": [1, 2, 3],
    ""k"": 1,
    ""output"": [1, 2, 3]
    },
    {
    ""input"": [1, 2, 3, 4],
    ""k"": 2,
    ""output"": [2, 1, 4, 3]
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8],
    ""k"": 3,
    ""output"": [3, 2, 1, 6, 5, 4, 7, 8]
    },
    {
    ""input"": [1],
    ""k"": 1,
    ""output"": [1]
    },
    {
    ""input"": [30, 40, 50, -1],
    ""k"": 3,
    ""output"": [50, 40, 30, -1]
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""k"": 5,
    ""output"": [5, 4, 3, 2, 1, 10, 9, 8, 7, 6]
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""k"": 9,
    ""output"": [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]
    }
]

function convert_to_linked_list(arr) {
    let dummy = new ListNode(0);
    let curr = dummy;
    for (let val of arr) {
        curr.next = new ListNode(val);
        curr = curr.next;
    }
    return dummy.next;
}

function convert_from_linked_list(linked_list) {
    let arr = [];
    let curr = linked_list;
    while (curr) {
        arr.push(curr.val);
        curr = curr.next;
    }
    return arr;
}


for (let i = 0; i < params.length; i++) {
    let input_head = convert_to_linked_list(params[i][""input""]);
    let input_k = params[i][""k""];
    let expected_output = params[i][""output""];
    let output = convert_from_linked_list(reverseKGroup(input_head, input_k));
    if (output.toString() === expected_output.toString()) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. Input: linked list=${params[i][""input""]} k=${input_k} Expected output: ${expected_output}, but got ${output}`);
    }
}","class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next","function ListNode(val, next) {
    this.val = (val===undefined ? 0 : val)
    this.next = (next===undefined ? null : next)
}"
63b595188ad4593d6b7b01f9,invert-binary-tree,"params = [   
    {       
        ""input"": [4, 2, 7, 1, 3, 6, 9],
        ""output"": [4, 7, 2, 9, 6, 3, 1]
    },
    {
        ""input"": [2, 1, 3],
        ""output"": [2, 3, 1]
    },
    {
        ""input"": [],
        ""output"": []
    },
    {
        ""input"": [1],
        ""output"": [1]
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
        ""output"": [1, 3, 2, 7, 6, 5, 4, None, None, None, None, None, None, 9, 8, None, None, None, None]
    },
    {
        ""input"": [1, None, 2],
        ""output"": [1, 2, None]
    },
    {
        ""input"": [1, 2, None],
        ""output"": [1, None, 2]
    },
    {
        ""input"": [1, None, 2, None, 3],
        ""output"": [1, 2, None, 3, None, None, None]
    },
    {
        ""input"": [1, 2, None, 3, None, 4],
        ""output"": [1, None, 2, None, 3, None, 4, None, None]
    },
    {
        ""input"": [1, None, 2, 3, None, None, 4],
        ""output"": [1, 2, None, None, 3, 4, None, None, None]
    }
]

def create_tree(lst):
    if not lst:
        return None
    root = TreeNode(lst[0])
    queue = [root]
    i = 1
    while queue and i < len(lst):
        node = queue.pop(0)
        if i < len(lst) and lst[i] is not None:
            node.left = TreeNode(lst[i])
            queue.append(node.left)
        i += 1
        if i < len(lst) and lst[i] is not None:
            node.right = TreeNode(lst[i])
            queue.append(node.right)
        i += 1
    return root

def tree_to_list(root):
    if not root:
        return []
    result = []
    queue = [root]
    while queue:
        node = queue.pop(0)
        if node:
            result.append(node.val)
            queue.append(node.left)
            queue.append(node.right)
        else:
            result.append(None)
    return result

obj = Solution()

for param in params:
    input_root = create_tree(param[""input""])
    expected_output = create_tree(param[""output""])
    output = obj.invertTree(input_root)
    if tree_to_list(output) == tree_to_list(expected_output):
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input={param['input']} Expected output: {tree_to_list(expected_output)}, but got {tree_to_list(output)}"")","var params = [       
    {               
        ""input"": [4, 2, 7, 1, 3, 6, 9],
        ""output"": [4, 7, 2, 9, 6, 3, 1]
    },
    {
        ""input"": [2, 1, 3],
        ""output"": [2, 3, 1]
    },
    {
        ""input"": [],
        ""output"": []
    },
    {
        ""input"": [1],
        ""output"": [1]
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
        ""output"": [1, 3, 2, 7, 6, 5, 4, null, null, null, null, null, null, 9, 8, null, null, null, null]
    },
    {
        ""input"": [1, null, 2],
        ""output"": [1, 2, null]
    },
    {
        ""input"": [1, 2, null],
        ""output"": [1, null, 2]
    },
    {
        ""input"": [1, null, 2, null, 3],
        ""output"": [1, 2, null, 3, null, null, null]
    },
    {
        ""input"": [1, 2, null, 3, null, 4],
        ""output"": [1, null, 2, null, 3, null, 4, null, null]
    },
    {
        ""input"": [1, null, 2, 3, null, null, 4],
        ""output"": [1, 2, null, null, 3, 4, null, null, null]
    }
]

function create_tree(lst) {
    if (!lst) {
        return null;
    }
    let root = new TreeNode(lst[0]);
    let queue = [root];
    let i = 1;
    while (queue.length > 0 && i < lst.length) {
        let node = queue.shift();
        if (i < lst.length && lst[i] !== null) {
            node.left = new TreeNode(lst[i]);
            queue.push(node.left);
        }
        i++;
        if (i < lst.length && lst[i] !== null) {
            node.right = new TreeNode(lst[i]);
            queue.push(node.right);
        }
        i++;
    }
    return root;
}

function tree_to_list(root) {
    if (!root) {
        return [];
    }
    let result = [];
    let queue = [root];
    while (queue.length > 0) {
        let node = queue.shift();
        if (node) {
            result.push(node.val);
            queue.push(node.left);
            queue.push(node.right);
        } else {
            result.push(null);
        }
    }
    return result;
}

for (let param of params) {
    let input_root = create_tree(param[""input""]);
    let expected_output = create_tree(param[""output""]);
    let output = invertTree(input_root);
    if (tree_to_list(output).toString() === tree_to_list(expected_output).toString()) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. Input=${param[""input""]} Expected output: ${tree_to_list(expected_output)}, but got ${tree_to_list(output)}`);
    }
}","class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right","function TreeNode(val, left, right) {
    this.val = (val===undefined ? 0 : val)
    this.left = (left===undefined ? null : left)
    this.right = (right===undefined ? null : right)
}"
63b595198ad4593d6b7b01fa,maximum-depth-of-binary-tree,"params = [
    {
    ""input"": [3, 9, 20, None, None, 15, 7],
    ""output"": 3
    },
    {
    ""input"": [1, None, 2],
    ""output"": 2
    },
    {
    ""input"": [],
    ""output"": 0
    },
    {
    ""input"": [1],
    ""output"": 1
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
    ""output"": 4
    },
    {
    ""input"": [1, None, 2],
    ""output"": 2
    },
    {
    ""input"": [1, 2, None],
    ""output"": 2
    },
    {
    ""input"": [1, None, 2, None, 3],
    ""output"": 3
    },
    {
    ""input"": [1, 2, None, 3, None, 4],
    ""output"": 4
    },
    {
    ""input"": [1, None, 2, 3, None, None, 4],
    ""output"": 4
    }
]

def create_tree(lst):
    if not lst:
        return None
    root = TreeNode(lst[0])
    queue = [root]
    i = 1
    while queue and i < len(lst):
        node = queue.pop(0)
        if i < len(lst) and lst[i] is not None:
            node.left = TreeNode(lst[i])
            queue.append(node.left)
        i += 1
        if i < len(lst) and lst[i] is not None:
            node.right = TreeNode(lst[i])
            queue.append(node.right)
        i += 1
    return root

obj = Solution()

for param in params:
    input_list = param[""input""]
    expected_output = param[""output""]
    root = create_tree(input_list)
    output = obj.maxDepth(root)
    if output == expected_output:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input List: {input_list} Expected output: {expected_output}, but got {output}"")","const params = [    
    {    
    ""input"": [3, 9, 20, null, null, 15, 7],
    ""output"": 3
    },
    {
    ""input"": [1, null, 2],
    ""output"": 2
    },
    {
    ""input"": [],
    ""output"": 0
    },
    {
    ""input"": [1],
    ""output"": 1
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
    ""output"": 4
    },
    {
    ""input"": [1, null, 2],
    ""output"": 2
    },
    {
    ""input"": [1, 2, null],
    ""output"": 2
    },
    {
    ""input"": [1, null, 2, null, 3],
    ""output"": 3
    },
    {
    ""input"": [1, 2, null, 3, null, 4],
    ""output"": 4
    },
    {
    ""input"": [1, null, 2, 3, null, null, 4],
    ""output"": 4
    }
]

function create_tree(lst) {
    if (!lst || lst.length === 0) {
        return null;
    }
    let root = new TreeNode(lst[0]);
    let queue = [root];
    let i = 1;
    while (queue.length > 0 && i < lst.length) {
        let node = queue.shift();
        if (i < lst.length && lst[i] !== null) {
            node.left = new TreeNode(lst[i]);
            queue.push(node.left);
        }
        i += 1;
        if (i < lst.length && lst[i] !== null) {
            node.right = new TreeNode(lst[i]);
            queue.push(node.right);
        }
        i += 1;
    }
    return root;
}


for (let param of params) {
    let input_list = param[""input""];
    let expected_output = param[""output""];
    let root = create_tree(input_list);
    let output = maxDepth(root);
    if (output === expected_output) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. Input List: ${input_list} Expected output: ${expected_output}, but got ${output}`);
    }
}","class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right","function TreeNode(val, left, right) {
    this.val = (val===undefined ? 0 : val)
    this.left = (left===undefined ? null : left)
    this.right = (right===undefined ? null : right)
}"
63b595388ad4593d6b7b01fb,climbing-stairs,,,,
63b595398ad4593d6b7b01fc,min-cost-climbing-stairs,,,,
63b5953a8ad4593d6b7b01fd,house-robber,,,,
63b5953b8ad4593d6b7b01fe,house-robber-ii,,,,
63b5953c8ad4593d6b7b01ff,longest-palindromic-substring,,,,
63b5953c8ad4593d6b7b0200,palindromic-substrings,,,,
63b5953d8ad4593d6b7b0201,decode-ways,,,,
63b5953e8ad4593d6b7b0202,coin-change,,,,
63b5953f8ad4593d6b7b0203,maximum-product-subarray,,,,
63b595408ad4593d6b7b0204,word-break,,,,
63b595418ad4593d6b7b0205,longest-increasing-subsequence,,,,
63b595418ad4593d6b7b0206,partition-equal-subset-sum,,,,
63b595428ad4593d6b7b0207,unique-paths,,,,
63b595438ad4593d6b7b0208,longest-common-subsequence,,,,
63b595448ad4593d6b7b0209,best-time-to-buy-and-sell-stock-with-cooldown,,,,
63b595458ad4593d6b7b020a,coin-change-ii,,,,
63b595468ad4593d6b7b020b,target-sum,,,,
63b595478ad4593d6b7b020c,interleaving-string,,,,
63b595488ad4593d6b7b020d,longest-increasing-path-in-a-matrix,,,,
63b595498ad4593d6b7b020e,distinct-subsequences,,,,
63b5954a8ad4593d6b7b020f,edit-distance,,,,
63b5954b8ad4593d6b7b0210,burst-balloons,,,,
63b5954b8ad4593d6b7b0211,regular-expression-matching,,,,
63b5954d8ad4593d6b7b0212,maximum-subarray,,,,
63b5954e8ad4593d6b7b0213,jump-game,,,,
63b5954f8ad4593d6b7b0214,jump-game-ii,,,,
63b595508ad4593d6b7b0215,gas-station,,,,
63b595518ad4593d6b7b0216,hand-of-straights,,,,
63b595518ad4593d6b7b0217,merge-triplets-to-form-target-triplet,,,,
63b595538ad4593d6b7b0218,partition-labels,,,,
63b598438ad4593d6b7b0219,diameter-of-binary-tree,"params = [
    {
    ""input"": [1,2,3,4,5],
    ""output"": 3
    },
    {
    ""input"": [1,2],
    ""output"": 1
    },
    {
    ""input"": [1],
    ""output"": 0
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
    ""output"": 5
    },
    {
    ""input"": [1, None, 2],
    ""output"": 1
    },
    {
    ""input"": [1, 2, None],
    ""output"": 1
    },
    {
    ""input"": [1, None, 2, None, 3],
    ""output"": 2
    },
    {
    ""input"": [1, 2, None, 3, None, 4],
    ""output"": 3
    },
    {
    ""input"": [1, None, 2, 3, None, None, 4],
    ""output"": 3
    },
    {
    ""input"": [1, 2, 3, None, None, None, 4, None, None, None, None, None, None, 5],
    ""output"": 3
    }
]

def create_tree(lst):
    if not lst:
        return None
    root = TreeNode(lst[0])
    queue = [root]
    i = 1
    while queue and i < len(lst):
        node = queue.pop(0)
        if i < len(lst) and lst[i] is not None:
            node.left = TreeNode(lst[i])
            queue.append(node.left)
        i += 1
        if i < len(lst) and lst[i] is not None:
            node.right = TreeNode(lst[i])
            queue.append(node.right)
        i += 1
    return root

obj = Solution()

for param in params:
    input_list = param[""input""]
    expected_output = param[""output""]
    root = create_tree(input_list)
    output = obj.diameterOfBinaryTree(root)
    if output == expected_output:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input List: {input_list} Expected output: {expected_output}, but got {output}"")","let params = [    
    {    
    ""input"": [1,2,3,4,5],
    ""output"": 3
    },
    {
    ""input"": [1,2],
    ""output"": 1
    },
    {
    ""input"": [1],
    ""output"": 0
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
    ""output"": 5
    },
    {
    ""input"": [1, null, 2],
    ""output"": 1
    },
    {
    ""input"": [1, 2, null],
    ""output"": 1
    },
    {
    ""input"": [1, null, 2, null, 3],
    ""output"": 2
    },
    {
    ""input"": [1, 2, null, 3, null, 4],
    ""output"": 3
    },
    {
    ""input"": [1, null, 2, 3, null, null, 4],
    ""output"": 3
    },
    {
    ""input"": [1, 2, 3, null, null, null, 4, null, null, null, null, null, null, 5],
    ""output"": 3
    }
]

function create_tree(lst) {
    if (!lst || lst.length === 0) {
        return null;
    }
    let root = new TreeNode(lst[0]);
    let queue = [root];
    let i = 1;
    while (queue.length > 0 && i < lst.length) {
        let node = queue.shift();
        if (i < lst.length && lst[i] !== null) {
            node.left = new TreeNode(lst[i]);
            queue.push(node.left);
        }
        i += 1;
        if (i < lst.length && lst[i] !== null) {
            node.right = new TreeNode(lst[i]);
            queue.push(node.right);
        }
        i += 1;
    }
    return root;
}

for (let i = 0; i < params.length; i++) {
    let param = params[i];
    let input_list = param[""input""];
    let expected_output = param[""output""];
    let root = create_tree(input_list);
    let output = diameterOfBinaryTree(root);
    if (output === expected_output) {
        console.log(""\u2705 Test passed."")
    } else {
        console.log(`\u274C Test failed. Input List: ${input_list} Expected output: ${expected_output}, but got ${output}`);
    }
}","class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right","function TreeNode(val, left, right) {
    this.val = (val===undefined ? 0 : val)
    this.left = (left===undefined ? null : left)
    this.right = (right===undefined ? null : right)
}"
63b598448ad4593d6b7b021a,balanced-binary-tree,"params = [
    {
    ""input"": [3,9,20,None,None,15,7],
    ""output"": True
    },
    {
    ""input"": [1,2,2,3,3,None,None,4,4],
    ""output"": False
    },
    {
    ""input"": [],
    ""output"": True
    },
    {
    ""input"": [1],
    ""output"": True
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
    ""output"": True
    },
    {
    ""input"": [1, None, 2],
    ""output"": True
    },
    {
    ""input"": [1, 2, None],
    ""output"": True
    },
    {
    ""input"": [1, None, 2, None, 3],
    ""output"": False
    },
    {
    ""input"": [1, 2, None, 3, None, 4],
    ""output"": False
    },
    {
    ""input"": [1, None, 2, 3, None, None, 4],
    ""output"": False
    }
]


def create_tree(lst):
    if not lst:
        return None
    root = TreeNode(lst[0])
    queue = [root]
    i = 1
    while queue and i < len(lst):
        node = queue.pop(0)
        if i < len(lst) and lst[i] is not None:
            node.left = TreeNode(lst[i])
            queue.append(node.left)
        i += 1
        if i < len(lst) and lst[i] is not None:
            node.right = TreeNode(lst[i])
            queue.append(node.right)
        i += 1
    return root

obj = Solution()

for param in params:
    input_list = param[""input""]
    expected_output = param[""output""]
    root = create_tree(input_list)
    output = obj.isBalanced(root)
    if output == expected_output:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input List: {input_list} Expected output: {expected_output}, but got {output}"")","const params = [
    {
    ""input"": [3,9,20,null,null,15,7],
    ""output"": true
    },
    {
    ""input"": [1,2,2,3,3,null,null,4,4],
    ""output"": false
    },
    {
    ""input"": [],
    ""output"": true
    },
    {
    ""input"": [1],
    ""output"": true
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
    ""output"": true
    },
    {
    ""input"": [1, null, 2],
    ""output"": true
    },
    {
    ""input"": [1, 2, null],
    ""output"": true
    },
    {
    ""input"": [1, null, 2, null, 3],
    ""output"": false
    },
    {
    ""input"": [1, 2, null, 3, null, 4],
    ""output"": false
    },
    {
    ""input"": [1, null, 2, 3, null, null, 4],
    ""output"": false
    }
]


function create_tree(lst) {
    if (!lst || lst.length === 0) {
        return null;
    }
    let root = new TreeNode(lst[0]);
    let queue = [root];
    let i = 1;
    while (queue.length > 0 && i < lst.length) {
        let node = queue.shift();
        if (i < lst.length && lst[i] !== null) {
            node.left = new TreeNode(lst[i]);
            queue.push(node.left);
        }
        i += 1;
        if (i < lst.length && lst[i] !== null) {
            node.right = new TreeNode(lst[i]);
            queue.push(node.right);
        }
        i += 1;
    }
    return root;
}

for (let i = 0; i < params.length; i++) {
    let param = params[i];
    let input_list = param[""input""];
    let expected_output = param[""output""];
    let root = create_tree(input_list);
    let output = isBalanced(root);
    if (output === expected_output) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. Input List: ${input_list}  Expected output: ${expected_output}, but got ${output}`);
    }
}","class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right","function TreeNode(val, left, right) {
    this.val = (val===undefined ? 0 : val)
    this.left = (left===undefined ? null : left)
    this.right = (right===undefined ? null : right)
}"
63b598458ad4593d6b7b021b,same-tree,"params = [
    {
    ""input"": ([1,2,3], [1,2,3]),
    ""output"": True
    },
    {
    ""input"": ([1,2], [1,None,2]),
    ""output"": False
    },
    {
    ""input"": ([1,2,1], [1,1,2]),
    ""output"": False
    },
    {
    ""input"": ([], []),
    ""output"": True
    },
    {
    ""input"": ([1], [1]),
    ""output"": True
    },
    {
    ""input"": ([1,2,3], [1,2,3,4]),
    ""output"": False
    },
    {
    ""input"": ([1,2,3], [1,2]),
    ""output"": False
    },
    {
    ""input"": ([1,2,3,4,5], [1,2,3]),
    ""output"": False
    },
    {
    ""input"": ([1,2,3,4,5], [1,2,3,4,5]),
    ""output"": True
    },
    {
    ""input"": ([1,2,3,4,5], [5,4,3,2,1]),
    ""output"": False
    }
]

def create_tree(lst):
    if not lst:
        return None
    root = TreeNode(lst[0])
    queue = [root]
    i = 1
    while queue and i < len(lst):
        node = queue.pop(0)
        if i < len(lst) and lst[i] is not None:
            node.left = TreeNode(lst[i])
            queue.append(node.left)
        i += 1
        if i < len(lst) and lst[i] is not None:
            node.right = TreeNode(lst[i])
            queue.append(node.right)
        i += 1
    return root

obj = Solution()

for param in params:
    p = create_tree(param[""input""][0])
    q = create_tree(param[""input""][1])
    expected_output = param[""output""]
    output = obj.isSameTree(p, q)
    if output == expected_output:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. p: ${param['p']} q: ${param['q']} Expected output: ${expected_output}, but got ${output}"")","params = [
    {
    ""input"": [[1,2,3], [1,2,3]],
    ""output"": true
    },
    {
    ""input"": [[1,2], [1,null,2]],
    ""output"": false
    },
    {
    ""input"": [[1,2,1], [1,1,2]],
    ""output"": false
    },
    {
    ""input"": [[], []],
    ""output"": true
    },
    {
    ""input"": [[1], [1]],
    ""output"": true
    },
    {
    ""input"": [[1,2,3], [1,2,3,4]],
    ""output"": false
    },
    {
    ""input"": [[1,2,3], [1,2]],
    ""output"": false
    },
    {
    ""input"": [[1,2,3,4,5], [1,2,3]],
    ""output"": false
    },
    {
    ""input"": [[1,2,3,4,5], [1,2,3,4,5]],
    ""output"": true
    },
    {
    ""input"": [[1,2,3,4,5], [5,4,3,2,1]],
    ""output"": false
    }
]

function create_tree(lst) {
    if (!lst || lst.length === 0) {
        return null;
    }
    let root = new TreeNode(lst[0]);
    let queue = [root];
    let i = 1;
    while (queue.length > 0 && i < lst.length) {
        let node = queue.shift();
        if (i < lst.length && lst[i] !== null) {
            node.left = new TreeNode(lst[i]);
            queue.push(node.left);
        }
        i += 1;
        if (i < lst.length && lst[i] !== null) {
            node.right = new TreeNode(lst[i]);
            queue.push(node.right);
        }
        i += 1;
    }
    return root;
}

for (let param of params) {
    let p = create_tree(param[""input""][0]);
    let q = create_tree(param[""input""][1]);
    let expected_output = param[""output""];
    let output = isSameTree(p, q);
    if (output === expected_output) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. p: ${param['p']} q: ${param['q']} Expected output: ${expected_output}, but got ${output}`);
    }
}","class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None","function TreeNode(val, left, right) {
    this.val = (val===undefined ? 0 : val)
    this.left = (left===undefined ? null : left)
    this.right = (right===undefined ? null : right)
}"
63b598458ad4593d6b7b021c,subtree-of-another-tree,"params = [
    {
    ""input"": ([3,4,5,1,2], [4,1,2]),
    ""output"": True
    },
    {
    ""input"": ([3,4,5,1,2,None,None,None,None,0], [4,1,2]),
    ""output"": False
    },
    {
    ""input"": ([1,2,3,4,5], [1,2,3]),
    ""output"": False
    },
    {
    ""input"": ([1,2,3,4,5], [5,4,3]),
    ""output"": False
    },
    {
    ""input"": ([1], [2]),
    ""output"": False
    },
    {
    ""input"": ([1,2,3,4,5], [4,5]),
    ""output"": False
    },
    {
    ""input"": ([1,2,3,4,5], [4,5,6]),
    ""output"": False
    },
    {
    ""input"": ([1,2,3,4,5,6,7], [1,2,3]),
    ""output"": False
    },
    {
    ""input"": ([1,2,3,4,5,6,7], [5,6,7]),
    ""output"": False
    },
    {
    ""input"": ([1,2,3,4,5,6,7], [8]),
    ""output"": False
    }
]

def create_tree(lst):
    if not lst:
        return None
    root = TreeNode(lst[0])
    queue = [root]
    i = 1
    while queue and i < len(lst):
        node = queue.pop(0)
        if i < len(lst) and lst[i] is not None:
            node.left = TreeNode(lst[i])
            queue.append(node.left)
        i += 1
        if i < len(lst) and lst[i] is not None:
            node.right = TreeNode(lst[i])
            queue.append(node.right)
        i += 1
    return root

obj = Solution()
for param in params:
    s = create_tree(param[""input""][0])
    t = create_tree(param[""input""][1])
    expected_output = param[""output""]
    output = obj.isSubtree(s, t)
    if output == expected_output:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. subRoot: {param['input'][1]} root: {param['input'][0]} Expected output: {expected_output}, but got {output}"")","const params = [
    {
    ""input"": [[3,4,5,1,2], [4,1,2]],
    ""output"": true
    },
    {
    ""input"": [[3,4,5,1,2,null,null,null,null,0], [4,1,2]],
    ""output"": false
    },
    {
    ""input"": [[1,2,3,4,5], [1,2,3]],
    ""output"": false
    },
    {
    ""input"": [[1,2,3,4,5], [5,4,3]],
    ""output"": false
    },
    {
    ""input"": [[1], [2]],
    ""output"": false
    },
    {
    ""input"": [[1,2,3,4,5], [4,5]],
    ""output"": false
    },
    {
    ""input"": [[1,2,3,4,5], [4,5,6]],
    ""output"": false
    },
    {
    ""input"": [[1,2,3,4,5,6,7], [1,2,3]],
    ""output"": false
    },
    {
    ""input"": [[1,2,3,4,5,6,7], [5,6,7]],
    ""output"": false
    },
    {
    ""input"": [[1,2,3,4,5,6,7], [8]],
    ""output"": false
    }
]

function create_tree(lst) {
    if (!lst || lst.length === 0) {
        return null;
    }
    let root = new TreeNode(lst[0]);
    let queue = [root];
    let i = 1;
    while (queue.length > 0 && i < lst.length) {
        let node = queue.shift();
        if (i < lst.length && lst[i] !== null) {
            node.left = new TreeNode(lst[i]);
            queue.push(node.left);
        }
        i += 1;
        if (i < lst.length && lst[i] !== null) {
            node.right = new TreeNode(lst[i]);
            queue.push(node.right);
        }
        i += 1;
    }
    return root;
}

for (let param of params) {
    let s = create_tree(param[""input""][0]);
    let t = create_tree(param[""input""][1]);
    let expected_output = param[""output""];
    let output = isSubtree(s, t);
    if (output === expected_output) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. subRoot: ${param['input'][1]} root: ${param['input'][0]} Expected output: ${expected_output}, but got ${output}`);
    }
}","class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right","function TreeNode(val, left, right) {
    this.val = (val===undefined ? 0 : val)
    this.left = (left===undefined ? null : left)
    this.right = (right===undefined ? null : right)
}"
63b598468ad4593d6b7b021d,lowest-common-ancestor-of-a-binary-search-tree,,,,
63b598478ad4593d6b7b021e,binary-tree-level-order-traversal,,,,
63b598488ad4593d6b7b021f,binary-tree-right-side-view,,,,
63b5984b8ad4593d6b7b0220,count-good-nodes-in-binary-tree,,,,
63b5984c8ad4593d6b7b0221,validate-binary-search-tree,,,,
63b5984c8ad4593d6b7b0222,kth-smallest-element-in-a-bst,,,,
63b5984d8ad4593d6b7b0223,construct-binary-tree-from-preorder-and-inorder-traversal,,,,
63b5984e8ad4593d6b7b0224,binary-tree-maximum-path-sum,,,,
63b5984f8ad4593d6b7b0225,serialize-and-deserialize-binary-tree,,,,
63b598508ad4593d6b7b0226,implement-trie-prefix-tree,,,,
63b598518ad4593d6b7b0227,design-add-and-search-words-data-structure,,,,
63b598518ad4593d6b7b0228,word-search-ii,,,,
63b598528ad4593d6b7b0229,kth-largest-element-in-a-stream,,,,
63b598538ad4593d6b7b022a,last-stone-weight,,,,
63b598548ad4593d6b7b022b,k-closest-points-to-origin,,,,
63b598558ad4593d6b7b022c,kth-largest-element-in-an-array,,,,
63b598558ad4593d6b7b022d,task-scheduler,,,,
63b598578ad4593d6b7b022e,design-twitter,,,,
63b598598ad4593d6b7b022f,find-median-from-data-stream,,,,
63b5985a8ad4593d6b7b0230,subsets-,,,,
63b5985b8ad4593d6b7b0231,combination-sum-,,,,
63b5985c8ad4593d6b7b0232,permutations-,,,,
63b5985c8ad4593d6b7b0233,subsets-ii-,,,,
63b5985d8ad4593d6b7b0234,combination-sum-ii-,,,,
63b5985e8ad4593d6b7b0235,word-search-,,,,
63b5985f8ad4593d6b7b0236,palindrome-partitioning-,,,,
63b598608ad4593d6b7b0237,letter-combinations-of-a-phone-number,,,,
63b598618ad4593d6b7b0238,n-queens,,,,
63b59a8f8ad4593d6b7b0239,number-of-islands,,,,
63b59a8f8ad4593d6b7b023a,clone-graph,,,,
63b59a918ad4593d6b7b023b,max-area-of-island,,,,
63b59a928ad4593d6b7b023c,pacific-atlantic-water-flow,,,,
63b59a938ad4593d6b7b023d,surrounded-regions,,,,
63b59a948ad4593d6b7b023e,rotting-oranges,,,,
63b59a958ad4593d6b7b023f,walls-and-gates,,,,
63b59a968ad4593d6b7b0240,course-schedule,,,,
63b59a978ad4593d6b7b0241,course-schedule-ii,,,,
63b59a988ad4593d6b7b0242,redundant-connection,,,,
63b59a998ad4593d6b7b0243,number-of-connected-components-in-an-undirected-graph,,,,
63b59a9b8ad4593d6b7b0244,graph-valid-tree,,,,
63b59a9c8ad4593d6b7b0245,word-ladder,,,,
63b59a9d8ad4593d6b7b0246,reconstruct-itinerary,,,,
63b59a9e8ad4593d6b7b0247,min-cost-to-connect-all-points,,,,
63b59a9f8ad4593d6b7b0248,network-delay-time,,,,
63b59aa08ad4593d6b7b0249,swim-in-rising-water,,,,
63b59aa08ad4593d6b7b024a,alien-dictionary,,,,
63b59aa18ad4593d6b7b024b,cheapest-flights-within-k-stops,,,,
63b59aa28ad4593d6b7b024c,valid-parenthesis-string,,,,
63b59aa38ad4593d6b7b024d,insert-interval,,,,
63b59aa48ad4593d6b7b024e,merge-intervals,,,,
63b59aa48ad4593d6b7b024f,non-overlapping-intervals,,,,
63b59aa58ad4593d6b7b0250,meeting-rooms,,,,
63b59aa68ad4593d6b7b0251,meeting-rooms-ii,,,,
63b59aa78ad4593d6b7b0252,minimum-interval-to-include-each-query,,,,
63b59aa88ad4593d6b7b0253,rotate-image,,,,
63b59aa88ad4593d6b7b0254,spiral-matrix,,,,
63b59aa98ad4593d6b7b0255,set-matrix-zeroes,,,,
63b59aaa8ad4593d6b7b0256,happy-number,,,,
63b59aab8ad4593d6b7b0257,plus-one,,,,
63b59aac8ad4593d6b7b0258,powx-n,,,,
63b59aad8ad4593d6b7b0259,multiply-strings,,,,
63b59aae8ad4593d6b7b025a,detect-squares,,,,
63b59aaf8ad4593d6b7b025b,single-number,,,,
63b59ab08ad4593d6b7b025c,number-of-1-bits,,,,
63b59ab08ad4593d6b7b025d,counting-bits,,,,
63b59ab18ad4593d6b7b025e,reverse-bits,,,,
63b59ab38ad4593d6b7b025f,missing-number,,,,
63b59ab48ad4593d6b7b0260,sum-of-two-integers,,,,
63b59ab58ad4593d6b7b0261,reverse-integer,,,,