_id,kebabCaseName,pythonTests,javascriptTests
63b594e78ad4593d6b7b01cc,contains-duplicate,"params = [
  {
    ""nums"" :  [1,2,3,1],
    ""ret"" : True
  },
  {
    ""nums"" :  [1,2,3,4],
    ""ret"" : False
  },
  {
    ""nums"" :  [1,1,1,3,3,4,3,2,4,2],
    ""ret"" : True
  },
  {
    ""nums"" :  [1,2,3,4,5,6,7,8,9,10],
    ""ret"" : False
  },
  {
    ""nums"" :  [1],
    ""ret"" : False
  },
  {
    ""nums"" :  [],
    ""ret"" : False
  },
  {
    ""nums"" :  [-1,-2,3,4,3,4,5,6,7,8,9,10],
    ""ret"" : True
  },
  {
    ""nums"" :  [-1,0,1,2,3,4,5,6,7,8,9,10],
    ""ret"" : False
  },
  {
    ""nums"" :  [-1,-1,-1,-1,-1,0,1,2,3,4,5,6,7,8],
    ""ret"" : True
  },
  {
    ""nums"" :  [10,20,30,40,50,10],
    ""ret"" : True
  }
]

for args in params:
  print(""\u2705 Test Passed."") if obj.containsDuplicate(args['nums']) == args['ret'] else print(f""\u274c Test Failed. nums={args['nums']}, expected: {args['ret']}"")","let testCases = [
  {
    ""nums"" :  [1,2,3,1],
    ""ret"" : true
  },
  {
    ""nums"" :  [1,2,3,4],
    ""ret"" : false
  },
  {
    ""nums"" :  [1,1,1,3,3,4,3,2,4,2],
    ""ret"" : true
  },
  {
    ""nums"" :  [1,2,3,4,5,6,7,8,9,10],
    ""ret"" : false
  },
  {
    ""nums"" :  [1],
    ""ret"" : false
  },
  {
    ""nums"" :  [],
    ""ret"" : false
  },
  {
    ""nums"" :  [-1,-2,3,4,3,4,5,6,7,8,9,10],
    ""ret"" : true
  },
  {
    ""nums"" :  [-1,0,1,2,3,4,5,6,7,8,9,10],
    ""ret"" : false
  },
  {
    ""nums"" :  [-1,-1,-1,-1,-1,0,1,2,3,4,5,6,7,8],
    ""ret"" : true
  },
  {
    ""nums"" :  [10,20,30,40,50,10],
    ""ret"" : true
  }
];

testCases.forEach(testCase => {
  if (containsDuplicate(testCase.nums) == testCase.ret) {
    console.log(""\u2705 Test Passed."")
  } else {
    console.log(`\u274c Test Failed. nums=${testCase.nums}, expected: ${testCase.ret}`)
  }
});"
63b594e88ad4593d6b7b01cd,valid-anagram,"params = [
  {
    ""s"" :  ""anagram"",
    ""t"" : ""nagaram"",
    ""ret"" : True
  },
  {
    ""s"" :  ""rat"",
    ""t"" : ""car"",
    ""ret"" : False
  },
  {
    ""s"" :  ""hello"",
    ""t"" : ""olleh"",
    ""ret"" : True
  },
  {
    ""s"" :  ""a"",
    ""t"" : ""a"",
    ""ret"" : True
  },
  {
    ""s"" :  """",
    ""t"" : """",
    ""ret"" : True
  },
  {
    ""s"" :  ""abcd"",
    ""t"" : ""dcba"",
    ""ret"" : True
  },
  {
    ""s"" :  ""abcdefgh"",
    ""t"" : ""hgfedcba"",
    ""ret"" : True
  },
  {
    ""s"" :  ""abcdefgh"",
    ""t"" : ""hgfedcb"",
    ""ret"" : False
  },
  {
    ""s"" :  ""abcdefghijklmnopqrstuvwxyz"",
    ""t"" : ""zyxwvutsrqponmlkjihgfedcba"",
    ""ret"" : True
  },
  {
    ""s"" :  ""abcdefghijklmnopqrstuvwxyz"",
    ""t"" : ""zyxwvutsrqponmlkjihgfedcb"",
    ""ret"" : False
  }
]

for args in params:
  print(""\u2705 Test Passed."") if obj.isAnagram(args['s'], args['t']) == args['ret'] else print(f""\u274c Test Failed. s={args['s']}, t={args['t']}, expected: {args['ret']}"")","let testCases = [
  {
    ""s"" :  ""anagram"",
    ""t"" : ""nagaram"",
    ""ret"" : true
  },
  {
    ""s"" :  ""rat"",
    ""t"" : ""car"",
    ""ret"" : false
  },
  {
    ""s"" :  ""hello"",
    ""t"" : ""olleh"",
    ""ret"" : true
  },
  {
    ""s"" :  ""a"",
    ""t"" : ""a"",
    ""ret"" : true
  },
  {
    ""s"" :  """",
    ""t"" : """",
    ""ret"" : true
  },
  {
    ""s"" :  ""abcd"",
    ""t"" : ""dcba"",
    ""ret"" : true
  },
  {
    ""s"" :  ""abcdefgh"",
    ""t"" : ""hgfedcba"",
    ""ret"" : true
  },
  {
    ""s"" :  ""abcdefgh"",
    ""t"" : ""hgfedcb"",
    ""ret"" : false
  },
  {
    ""s"" :  ""abcdefghijklmnopqrstuvwxyz"",
    ""t"" : ""zyxwvutsrqponmlkjihgfedcba"",
    ""ret"" : true
  },
  {
    ""s"" :  ""abcdefghijklmnopqrstuvwxyz"",
    ""t"" : ""zyxwvutsrqponmlkjihgfedcb"",
    ""ret"" : false
  }
];

testCases.forEach(testCase => {
  if (isAnagram(testCase.s, testCase.t) == testCase.ret) {
    console.log(""\u2705 Test Passed."")
  } else {
    console.log(`\u274c Test Failed. s=${testCase.s}, t=${test}`)
  }})"
63b594e98ad4593d6b7b01ce,two-sum,"params = [
  {
    ""nums"" :  [2, 7, 11, 15],
    ""target"" : 9,
    ""ret"" : [0, 1]
  },
  {
    ""nums"" :  [3, 2, 4],
    ""target"" : 6,
    ""ret"" : [1, 2]
  },
  {
    ""nums"" :  [3, 3],
    ""target"" : 6,
    ""ret"" : [0, 1]
  },
  {
    ""nums"" :  [-1, -2, -3, -4, -5],
    ""target"" : -8,
    ""ret"" : [2, 4]
  },
  {
    ""nums"" :  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""target"" : 15,
    ""ret"" : [6, 7]
  },
  {
    ""nums"" :  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""target"" : 11,
    ""ret"" : [4, 5]
  },
  {
    ""nums"" : [1,9,13,20,47],
    ""target"": 10,
    ""ret"": [0, 1]
  },
  {
    ""nums"": [3,2,4,1,9],
    ""target"": 12,
    ""ret"": [0, 4]
  }
]

for args in params:
  res = obj.twoSum(args['nums'], args['target'])
  if res == args['ret']:
      print(""\u2705 Test Passed."")
  else:
      print(f""\u274c Test Failed. nums={args['nums']}, target={args['target']}, expected: {args['ret']} but got {res}"")","const testCases = [
  {
    ""nums"" :  [2, 7, 11, 15],
    ""target"" : 9,
    ""ret"" : [0, 1]
  },
  {
    ""nums"" :  [3, 2, 4],
    ""target"" : 6,
    ""ret"" : [1, 2]
  },
  {
    ""nums"" :  [3, 3],
    ""target"" : 6,
    ""ret"" : [0, 1]
  },
  {
    ""nums"" :  [-1, -2, -3, -4, -5],
    ""target"" : -8,
    ""ret"" : [2, 4]
  },
  {
    ""nums"" :  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""target"" : 15,
    ""ret"" : [4, 5]
  },
  {
    ""nums"" :  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""target"" : 11,
    ""ret"" : [1, 9]
  },
  {
    ""nums"" :  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""target"" : 20,
    ""ret"" : [8, 9]
  },
  {
    ""nums"" :  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""target"" : 21,
    ""ret"" : [0, 9]
  },
  {
    ""nums"" :  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""target"" : 30,
    ""ret"" : [9, 9]
  },
  {
    ""nums"" :  [1],
    ""target"" : 1,
    ""ret"" : [0, 0]
  }
];

for (let args of testCases) {
  if (JSON.stringify(twoSum(args.nums, args.target)) === JSON.stringify(args.ret)) {
    console.log(""\u2705 Test Passed."");
  } else {
    console.log(`\u274c Test Failed. nums=${args.nums}, target=${args.target}, expected=${args.ret}`);
  }
}"
63b594ea8ad4593d6b7b01cf,group-anagrams,"params = [  
  { 
    ""strs"" : [""eat"",""tea"",""tan"",""ate"",""nat"",""bat""],
    ""ret"" : [[""bat""],[""nat"",""tan""],[""ate"",""eat"",""tea""]]
  },
  {
    ""strs"" : [""a""],
    ""ret"" : [[""a""]]
  },
  {
    ""strs"" : [""a"",""aa"",""aaa"",""aaaa"",""aaaaa"",""aaaaaa""],
    ""ret"" : [[""a""],[""aa""],[""aaa""],[""aaaa""],[""aaaaa""],[""aaaaaa""]]
  },
  {
    ""strs"" : [""a"",""ab"",""abc"",""abcd"",""abcde"",""abcdef""],
    ""ret"" : [['a'], ['ab'], ['abc'], ['abcd'], ['abcde'], ['abcdef']]
  },
  {
    ""strs"" : [""""],
    ""ret"" : [[""""]]
  },
  {
    ""strs"" : [""abc"",""cba"",""cab"",""acb"",""bac"",""bca""],
    ""ret"" : [[""abc"",""cba"",""cab"",""acb"",""bac"",""bca""]]
  },
  {
    ""strs"" : [""abc"",""cba"",""cab"",""acb"",""bac"",""bca"",""xyz""],
    ""ret"" : [[""abc"",""cba"",""cab"",""acb"",""bac"",""bca""],[""xyz""]]
  },
  {
    ""strs"" : [""abc"",""cba"",""cab"",""acb"",""bac"",""bca"",""xyz"",""zyx""],
    ""ret"" : [[""abc"",""cba"",""cab"",""acb"",""bac"",""bca""],[""xyz"",""zyx""]]
  },
  {
    ""strs"" : ["""",""a"",""aa"",""aaa""],
    ""ret"" : [[''], ['a'], ['aa'], ['aaa']]
  },
  {
    ""strs"" : ["""",""a"",""aa"",""aaa"",""ab"",""ba"",""aba"",""aab"",""baa"",""aab""],
    ""ret"" : [[''], ['a'], ['aa'], ['aaa'], ['ab', 'ba'], ['aba', 'aab', 'baa', 'aab']]
  },
  {
    ""strs"" : ["""",""a"",""aa"",""aaa"",""ab"",""ba"",""aba"",""aab"",""baa"",""aab"",""abc"",""cba"",""cab"",""acb"",""bac"",""bca"",""xyz"",""zyx""],
    ""ret"" : [[''], ['a'], ['aa'], ['aaa'], ['ab', 'ba'], ['aba', 'aab', 'baa', 'aab'], ['abc', 'cba', 'cab', 'acb', 'bac', 'bca'], ['xyz', 'zyx']]
  },
  {
    ""strs"" : ["""",""a"",""aa"",""aaa"",""ab"",""ba"",""aba"",""aab"",""baa"",""aab"",""abc"",""cba"",""cab"",""acb"",""bac"",""bca"",""xyz"",""zyx"",""aaaa"",""aaa"",""aaa"",""aaaa"",""aaa"",""aaaa"",""aaaa"",""aaa"",""aaa"",""aaa"",""aaaa""],
    ""ret"" : [[''], ['a'], ['aa'], ['aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa'], ['ab', 'ba'], ['aba', 'aab', 'baa', 'aab'], ['abc', 'cba', 'cab', 'acb', 'bac', 'bca'], ['xyz', 'zyx'], ['aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa']]
  }
]

for args in params:
  res = obj.groupAnagrams(args['strs'])
  args_ret = args['ret']
  
  def compare(lst1, lst2):
    # Sort the strings in each nested list
    lst1 = [sorted(sublist) for sublist in lst1]
    lst2 = [sorted(sublist) for sublist in lst2]
    # Sort the nested lists
    lst1.sort()
    lst2.sort()
    # Compare the two lists
    return lst1 == lst2


  print(""\u2705 Test Passed."") if compare(res, args_ret) else print(f""\u274c Test Failed. strs={args['strs']}, expected: {args_ret} but got {res}"")




","params = [  
  { 
    ""strs"" : [""eat"",""tea"",""tan"",""ate"",""nat"",""bat""],
    ""ret"" : [[""bat""],[""nat"",""tan""],[""ate"",""eat"",""tea""]]
  },
  {
    ""strs"" : [""a""],
    ""ret"" : [[""a""]]
  },
  {
    ""strs"" : [""a"",""aa"",""aaa"",""aaaa"",""aaaaa"",""aaaaaa""],
    ""ret"" : [[""a""],[""aa""],[""aaa""],[""aaaa""],[""aaaaa""],[""aaaaaa""]]
  },
  {
    ""strs"" : [""a"",""ab"",""abc"",""abcd"",""abcde"",""abcdef""],
    ""ret"" : [['a'], ['ab'], ['abc'], ['abcd'], ['abcde'], ['abcdef']]
  },
  {
    ""strs"" : [""""],
    ""ret"" : [[""""]]
  },
  {
    ""strs"" : [""abc"",""cba"",""cab"",""acb"",""bac"",""bca""],
    ""ret"" : [[""abc"",""cba"",""cab"",""acb"",""bac"",""bca""]]
  },
  {
    ""strs"" : [""abc"",""cba"",""cab"",""acb"",""bac"",""bca"",""xyz""],
    ""ret"" : [[""abc"",""cba"",""cab"",""acb"",""bac"",""bca""],[""xyz""]]
  },
  {
    ""strs"" : [""abc"",""cba"",""cab"",""acb"",""bac"",""bca"",""xyz"",""zyx""],
    ""ret"" : [[""abc"",""cba"",""cab"",""acb"",""bac"",""bca""],[""xyz"",""zyx""]]
  },
  {
    ""strs"" : ["""",""a"",""aa"",""aaa""],
    ""ret"" : [[''], ['a'], ['aa'], ['aaa']]
  },
  {
    ""strs"" : ["""",""a"",""aa"",""aaa"",""ab"",""ba"",""aba"",""aab"",""baa"",""aab""],
    ""ret"" : [[''], ['a'], ['aa'], ['aaa'], ['ab', 'ba'], ['aba', 'aab', 'baa', 'aab']]
  },
  {
    ""strs"" : ["""",""a"",""aa"",""aaa"",""ab"",""ba"",""aba"",""aab"",""baa"",""aab"",""abc"",""cba"",""cab"",""acb"",""bac"",""bca"",""xyz"",""zyx""],
    ""ret"" : [[''], ['a'], ['aa'], ['aaa'], ['ab', 'ba'], ['aba', 'aab', 'baa', 'aab'], ['abc', 'cba', 'cab', 'acb', 'bac', 'bca'], ['xyz', 'zyx']]
  },
  {
    ""strs"" : ["""",""a"",""aa"",""aaa"",""ab"",""ba"",""aba"",""aab"",""baa"",""aab"",""abc"",""cba"",""cab"",""acb"",""bac"",""bca"",""xyz"",""zyx"",""aaaa"",""aaa"",""aaa"",""aaaa"",""aaa"",""aaaa"",""aaaa"",""aaa"",""aaa"",""aaa"",""aaaa""],
    ""ret"" : [[''], ['a'], ['aa'], ['aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa'], ['ab', 'ba'], ['aba', 'aab', 'baa', 'aab'], ['abc', 'cba', 'cab', 'acb', 'bac', 'bca'], ['xyz', 'zyx'], ['aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa']]
  }
]

function compare(lst1, lst2) {
  // Sort the strings in each nested list
  lst1 = lst1.map(sublist => sublist.sort());
  lst2 = lst2.map(sublist => sublist.sort());
  // Sort the nested lists
  lst1.sort();
  lst2.sort();
  // Compare the two lists
  return JSON.stringify(lst1) === JSON.stringify(lst2);
}

for (let args of params) {
  let res = groupAnagrams(args.strs);
  let args_ret = args.ret;

  console.log(compare(res, args_ret) ? ""\u2705 Test Passed."" : `\u274c Test Failed. strs=${args.strs}, expected: ${args_ret} but got ${res}`);
}"
63b594eb8ad4593d6b7b01d0,top-k-frequent-elements,"params = [
  {
    ""nums"" : [1,1,1,2,2,3],
    ""k"" : 2,
    ""ret"" : [1,2]
  },
  {
    ""nums"" : [1],
    ""k"" : 1,
    ""ret"" : [1]
  },
  {
    ""nums"" : [1,2,2,2,3,3,3],
    ""k"" : 2,
    ""ret"" : [2,3]
  },
  {
    ""nums"" : [1,1,1,2,2,3,3,3,4,4,4,4],
    ""k"" : 3,
    ""ret"" : [4,1,3]
  },
  {
    ""nums"" : [1,1,1,2,2,3,3,3,4,4,4,4],
    ""k"" : 4,
    ""ret"" : [4,1,3,2]
  },
  {
    ""nums"" : [1,1,1,2,2,3,3,3,4,4,4,4],
    ""k"" : 5,
    ""ret"" : [4,1,3,2]
  },
  {
    ""nums"" : [1,1,1,2,2,3,3,3,4,4,4,4],
    ""k"" : 1,
    ""ret"" : [4]
  },
  {
    ""nums"" : [1,1,1,2,2,3,3,3,4,4,4,4],
    ""k"" : 6,
    ""ret"" : [4,1,3,2]
  },
  {
    ""nums"" : [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5],
    ""k"" : 4,
    ""ret"" : [1,2,3,4]
  },
  {
    ""nums"" : [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6],
    ""k"" : 6,
    ""ret"" : [1,2,3,4,5,6]
  }
]

for args in params:
    print(""\u2705 Test Passed."") if obj.topKFrequent(args['nums'], args['k']) == args['ret'] else print(f""\u274c Test Failed. nums={args['nums']}, k={args['k']}, expected: {args['ret']}"")","let params = [
  {
    ""nums"" : [1,1,1,2,2,3],
    ""k"" : 2,
    ""ret"" : [1,2]
  },
  {
    ""nums"" : [1],
    ""k"" : 1,
    ""ret"" : [1]
  },
  {
    ""nums"" : [1,2,2,2,3,3,3],
    ""k"" : 2,
    ""ret"" : [2,3]
  },
  {
    ""nums"" : [1,1,1,2,2,3,3,3,4,4,4,4],
    ""k"" : 3,
    ""ret"" : [4,1,3]
  },
  {
    ""nums"" : [1,1,1,2,2,3,3,3,4,4,4,4],
    ""k"" : 4,
    ""ret"" : [4,1,3,2]
  },
  {
    ""nums"" : [1,1,1,2,2,3,3,3,4,4,4,4],
    ""k"" : 5,
    ""ret"" : [4,1,3,2]
  },
  {
    ""nums"" : [1,1,1,2,2,3,3,3,4,4,4,4],
    ""k"" : 1,
    ""ret"" : [4]
  },
  {
    ""nums"" : [1,1,1,2,2,3,3,3,4,4,4,4],
    ""k"" : 6,
    ""ret"" : [4,1,3,2]
  },
  {
    ""nums"" : [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5],
    ""k"" : 4,
    ""ret"" : [1,2,3,4]
  },
  {
    ""nums"" : [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6],
    ""k"" : 6,
    ""ret"" : [1,2,3,4,5,6]
  }
]

for (let args of params) {
  if (JSON.stringify(topKFrequent(args.nums, args.k)) === JSON.stringify(args.ret)) {
      console.log(""\u2705 Test Passed."")
  } else {
      console.log(`\u274c Test Failed. nums=${args.nums}, k=${args.k}, expected: ${args.ret}`)
  }
}"
63b594eb8ad4593d6b7b01d1,product-of-array-except-self,"params = [
  {
    ""nums"" : [1,2,3,4],
    ""ret"" : [24,12,8,6]
  },
  {
    ""nums"" : [-1,1,0,-3,3],
    ""ret"" : [0,0,9,0,0]
  },
  {
    ""nums"" : [1,2,3,4,5],
    ""ret"" : [120,60,40,30,24]
  },
  {
    ""nums"" : [-1,0,1],
    ""ret"" : [0, -1, 0]
  },
  {
    ""nums"" : [1,1,1,1],
    ""ret"" : [1,1,1,1]
  },
  {
    ""nums"" : [1,2,3],
    ""ret"" : [6,3,2]
  },
  {
    ""nums"" : [-1,-2,-3],
    ""ret"" : [6, 3, 2]
  },
  {
    ""nums"" : [0,1,2],
    ""ret"" : [2,0,0]
  },
  {
    ""nums"" : [1,1,2,2],
    ""ret"" : [4,4,2,2]
  },
  {
    ""nums"" : [1,2,3,4,5,6],
    ""ret"" : [720,360,240,180,144,120]
  }
]

for args in params:
  result = obj.productExceptSelf(args[""nums""])
  print(""\u2705 Test Passed."") if result == args[""ret""] else print(f""\u274c Test Failed. nums={args['nums']}, expected: {args['ret']} but got {result}"")","params = [
  {
    ""nums"" : [1,2,3,4],
    ""ret"" : [24,12,8,6]
  },
  {
    ""nums"" : [-1,1,0,-3,3],
    ""ret"" : [0,0,9,0,0]
  },
  {
    ""nums"" : [1,2,3,4,5],
    ""ret"" : [120,60,40,30,24]
  },
  {
    ""nums"" : [-1,0,1],
    ""ret"" : [0, -1, 0]
  },
  {
    ""nums"" : [1,1,1,1],
    ""ret"" : [1,1,1,1]
  },
  {
    ""nums"" : [1,2,3],
    ""ret"" : [6,3,2]
  },
  {
    ""nums"" : [-1,-2,-3],
    ""ret"" : [6, 3, 2]
  },
  {
    ""nums"" : [0,1,2],
    ""ret"" : [2,0,0]
  },
  {
    ""nums"" : [1,1,2,2],
    ""ret"" : [4,4,2,2]
  },
  {
    ""nums"" : [1,2,3,4,5,6],
    ""ret"" : [720,360,240,180,144,120]
  }
]

params.forEach(args => {
  if (JSON.stringify(productExceptSelf(args.nums)) === JSON.stringify(args.ret)) console.log(""\u2705 Test Passed."")
  else console.log(`\u274c Test Failed. nums=${args.nums}, expected: ${args.ret}`)
})"
63b594ec8ad4593d6b7b01d2,valid-sudoku,"params = [    
    {       
      ""board"": [[""5"",""3"",""."",""."",""7"",""."",""."",""."","".""],
                [""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],
                [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],
                [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],
                [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],
                [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],
                [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],
                [""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],
                [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]],
      ""ret"": True
    },
    {
      ""board"": [[""8"",""3"",""."",""."",""7"",""."",""."",""."","".""],
                [""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],
                [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],
                [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],
                [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],
                [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],
                [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],
                [""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],
                [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]],
      ""ret"": False
    },
    {
      ""board"": [[""."",""."",""."",""."",""5"",""."",""."",""1"","".""],
                [""."",""4"",""."",""3"",""."",""."",""."",""."","".""],
                [""."",""."",""."",""."",""."",""3"",""."",""."",""1""],
                [""8"",""."",""."",""."",""."",""."",""."",""2"","".""],
                [""."",""."",""2"",""."",""7"",""."",""."",""."","".""],
                [""."",""1"",""5"",""."",""."",""."",""."",""."","".""],
                [""."",""."",""."",""."",""."",""2"",""."",""."","".""],
                [""."",""2"",""."",""9"",""."",""."",""."",""."","".""],
                [""."",""."",""4"",""."",""."",""."",""."",""."","".""]],
      ""ret"": False
    },
    {
      ""board"": [[""5"",""3"",""."",""."",""7"",""."",""."",""."",""5""],
                [""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],
                [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],
                [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],
                [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],
                [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],
                [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],
                [""."",""."",""."",""4"",""1"",""9"",""."",""."","".""],
                [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]],
      ""ret"" : False
    },
    {
      ""board"": [[""5"",""3"",""4"",""6"",""7"",""8"",""9"",""1"",""2""]
              ,[""6"",""7"",""2"",""1"",""9"",""5"",""3"",""4"",""8""]
              ,[""1"",""9"",""8"",""3"",""4"",""2"",""5"",""6"",""7""]
              ,[""8"",""5"",""9"",""7"",""6"",""1"",""4"",""2"",""3""]
              ,[""4"",""2"",""6"",""8"",""5"",""3"",""7"",""9"",""1""]
              ,[""7"",""1"",""3"",""9"",""2"",""4"",""8"",""5"",""6""]
              ,[""9"",""6"",""1"",""5"",""3"",""7"",""2"",""8"",""4""]
              ,[""2"",""8"",""7"",""4"",""1"",""9"",""6"",""3"",""5""]
              ,[""3"",""4"",""5"",""2"",""8"",""6"",""1"",""7"",""9""]],
      ""ret"" : True
    },
    {
      ""board"":  [[""7"",""8"",""1"",""4"",""6"",""2"",""5"",""9"",""3""]
                ,[""2"",""4"",""3"",""5"",""9"",""7"",""1"",""6"",""8""]
                ,[""5"",""6"",""9"",""8"",""1"",""3"",""7"",""2"",""4""]
                ,[""8"",""2"",""5"",""1"",""7"",""9"",""3"",""4"",""6""]
                ,[""1"",""9"",""7"",""3"",""4"",""6"",""8"",""5"",""2""]
                ,[""3"",""7"",""4"",""2"",""5"",""8"",""9"",""1"",""6""]
                ,[""9"",""1"",""2"",""6"",""3"",""5"",""4"",""8"",""7""]
                ,[""6"",""5"",""8"",""7"",""2"",""1"",""9"",""3"",""5""]
                ,[""4"",""3"",""6"",""9"",""8"",""7"",""2"",""5"",""1""]],
      ""ret"": False
    },
    {
     ""board"": [[""5"",""3"",""9"",""6"",""7"",""4"",""8"",""2"",""1""]
              ,[""6"",""7"",""2"",""1"",""9"",""5"",""3"",""4"",""8""]
              ,[""1"",""9"",""8"",""3"",""4"",""2"",""5"",""6"",""7""]
              ,[""8"",""5"",""9"",""7"",""6"",""1"",""4"",""3"",""2""]
              ,[""4"",""2"",""6"",""8"",""5"",""3"",""7"",""9"",""1""]
              ,[""7"",""1"",""3"",""9"",""2"",""8"",""6"",""5"",""4""]
              ,[""9"",""6"",""1"",""5"",""3"",""7"",""2"",""8"",""3""]
              ,[""2"",""8"",""7"",""4"",""1"",""9"",""6"",""3"",""5""]
              ,[""3"",""4"",""5"",""2"",""8"",""6"",""1"",""7"",""9""]],
    ""ret"": False
    },
    {
      ""board"": [[""."",""4"",""9"",""."",""7"",""."",""."",""."",""1""],
                [""6"",""."",""."",""2"",""9"",""5"",""."",""."","".""],
                [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],
                [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],
                [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],
                [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],
                [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],
                [""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],
                [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]],
      ""ret"": False
    },
    {
      ""board"": [[""."",""4"",""."",""8"",""5"",""."",""."",""1"","".""],
                [""."",""."",""."",""."",""."",""9"",""."",""."",""4""],
                [""."",""."",""5"",""."",""1"",""."",""3"",""."","".""],
                [""."",""9"",""."",""."",""."",""."",""."",""."",""7""],
                [""1"",""."",""."",""."",""."",""."",""."",""."",""5""],
                [""8"",""."",""."",""."",""."",""."",""."",""4"","".""],
                [""."",""."",""3"",""."",""6"",""."",""5"",""."","".""],
                [""5"",""."",""."",""9"",""."",""."",""."",""."","".""],
                [""."",""2"",""."",""."",""8"",""."",""."",""7"","".""]],
      ""ret"": True
    },
    {
      ""board"": [[""5"",""3"",""."",""."",""7"",""."",""."",""."","".""],
                [""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],
                [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],
                [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],
                [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],
                [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],
                [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],
                [""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],
                [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]],
      ""ret"": True
    }
]

for args in params:
  result = obj.isValidSudoku(args['board'])
  print(""\u2705 Test Passed."") if result == args['ret'] else print(f""\u274c Test Failed. board={args['board']}, expected: {args['ret']} but got {result}"")","params = [    
  {       
    ""board"": [[""5"",""3"",""."",""."",""7"",""."",""."",""."","".""],
              [""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],
              [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],
              [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],
              [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],
              [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],
              [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],
              [""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],
              [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]],
    ""ret"": true
  },
  {
    ""board"": [[""8"",""3"",""."",""."",""7"",""."",""."",""."","".""],
              [""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],
              [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],
              [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],
              [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],
              [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],
              [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],
              [""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],
              [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]],
    ""ret"": false
  },
  {
    ""board"": [[""."",""."",""."",""."",""5"",""."",""."",""1"","".""],
              [""."",""4"",""."",""3"",""."",""."",""."",""."","".""],
              [""."",""."",""."",""."",""."",""3"",""."",""."",""1""],
              [""8"",""."",""."",""."",""."",""."",""."",""2"","".""],
              [""."",""."",""2"",""."",""7"",""."",""."",""."","".""],
              [""."",""1"",""5"",""."",""."",""."",""."",""."","".""],
              [""."",""."",""."",""."",""."",""2"",""."",""."","".""],
              [""."",""2"",""."",""9"",""."",""."",""."",""."","".""],
              [""."",""."",""4"",""."",""."",""."",""."",""."","".""]],
    ""ret"": false
  },
  {
    ""board"": [[""5"",""3"",""."",""."",""7"",""."",""."",""."",""5""],
              [""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],
              [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],
              [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],
              [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],
              [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],
              [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],
              [""."",""."",""."",""4"",""1"",""9"",""."",""."","".""],
              [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]],
    ""ret"" : false
  },
  {
    ""board"": [[""5"",""3"",""4"",""6"",""7"",""8"",""9"",""1"",""2""]
            ,[""6"",""7"",""2"",""1"",""9"",""5"",""3"",""4"",""8""]
            ,[""1"",""9"",""8"",""3"",""4"",""2"",""5"",""6"",""7""]
            ,[""8"",""5"",""9"",""7"",""6"",""1"",""4"",""2"",""3""]
            ,[""4"",""2"",""6"",""8"",""5"",""3"",""7"",""9"",""1""]
            ,[""7"",""1"",""3"",""9"",""2"",""4"",""8"",""5"",""6""]
            ,[""9"",""6"",""1"",""5"",""3"",""7"",""2"",""8"",""4""]
            ,[""2"",""8"",""7"",""4"",""1"",""9"",""6"",""3"",""5""]
            ,[""3"",""4"",""5"",""2"",""8"",""6"",""1"",""7"",""9""]],
    ""ret"" : true
  },
  {
    ""board"":  [[""7"",""8"",""1"",""4"",""6"",""2"",""5"",""9"",""3""]
              ,[""2"",""4"",""3"",""5"",""9"",""7"",""1"",""6"",""8""]
              ,[""5"",""6"",""9"",""8"",""1"",""3"",""7"",""2"",""4""]
              ,[""8"",""2"",""5"",""1"",""7"",""9"",""3"",""4"",""6""]
              ,[""1"",""9"",""7"",""3"",""4"",""6"",""8"",""5"",""2""]
              ,[""3"",""7"",""4"",""2"",""5"",""8"",""9"",""1"",""6""]
              ,[""9"",""1"",""2"",""6"",""3"",""5"",""4"",""8"",""7""]
              ,[""6"",""5"",""8"",""7"",""2"",""1"",""9"",""3"",""5""]
              ,[""4"",""3"",""6"",""9"",""8"",""7"",""2"",""5"",""1""]],
    ""ret"": false
  },
  {
   ""board"": [[""5"",""3"",""9"",""6"",""7"",""4"",""8"",""2"",""1""]
            ,[""6"",""7"",""2"",""1"",""9"",""5"",""3"",""4"",""8""]
            ,[""1"",""9"",""8"",""3"",""4"",""2"",""5"",""6"",""7""]
            ,[""8"",""5"",""9"",""7"",""6"",""1"",""4"",""3"",""2""]
            ,[""4"",""2"",""6"",""8"",""5"",""3"",""7"",""9"",""1""]
            ,[""7"",""1"",""3"",""9"",""2"",""8"",""6"",""5"",""4""]
            ,[""9"",""6"",""1"",""5"",""3"",""7"",""2"",""8"",""3""]
            ,[""2"",""8"",""7"",""4"",""1"",""9"",""6"",""3"",""5""]
            ,[""3"",""4"",""5"",""2"",""8"",""6"",""1"",""7"",""9""]],
  ""ret"": false
  },
  {
    ""board"": [[""."",""4"",""9"",""."",""7"",""."",""."",""."",""1""],
              [""6"",""."",""."",""2"",""9"",""5"",""."",""."","".""],
              [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],
              [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],
              [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],
              [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],
              [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],
              [""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],
              [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]],
    ""ret"": false
  },
  {
    ""board"": [[""."",""4"",""."",""8"",""5"",""."",""."",""1"","".""],
              [""."",""."",""."",""."",""."",""9"",""."",""."",""4""],
              [""."",""."",""5"",""."",""1"",""."",""3"",""."","".""],
              [""."",""9"",""."",""."",""."",""."",""."",""."",""7""],
              [""1"",""."",""."",""."",""."",""."",""."",""."",""5""],
              [""8"",""."",""."",""."",""."",""."",""."",""4"","".""],
              [""."",""."",""3"",""."",""6"",""."",""5"",""."","".""],
              [""5"",""."",""."",""9"",""."",""."",""."",""."","".""],
              [""."",""2"",""."",""."",""8"",""."",""."",""7"","".""]],
    ""ret"": true
  },
  {
    ""board"": [[""5"",""3"",""."",""."",""7"",""."",""."",""."","".""],
              [""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],
              [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],
              [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],
              [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],
              [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],
              [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],
              [""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],
              [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]],
    ""ret"": true
  }
]

for (let args of params) {
  let result = isValidSudoku(args.board);
  console.log(result === args.ret ? ""\u2705 Test Passed."" : `\u274c Test Failed. board=${args.board}, expected: ${args.ret} but got ${result}`);
}"
63b594ed8ad4593d6b7b01d3,encode-and-decode-strings,"params = [
    {
        ""strs"": [""lint"", ""code"", ""love"", ""you""],
        ""encoded"": ""lint:;code:;love:;you"",
        ""ret"": [""lint"", ""code"", ""love"", ""you""]
    },
    {
        ""strs"": [""we"", ""say"", "":"", ""yes""],
        ""encoded"": ""we:;say:;:::;yes"",
        ""ret"": [""we"", ""say"", "":"", ""yes""]
    },
    {
        ""strs"": [""hello"", ""world""],
        ""encoded"": ""hello:;world"",
        ""ret"": [""hello"", ""world""]
    },
    {
        ""strs"": [""a"", ""b"", ""c"", ""d"", ""e""],
        ""encoded"": ""a:;b:;c:;d:;e"",
        ""ret"": [""a"", ""b"", ""c"", ""d"", ""e""]
    },
    {
        ""strs"": [""apple"", ""banana"", ""cherry"", ""date""],
        ""encoded"": ""apple:;banana:;cherry:;date"",
        ""ret"": [""apple"", ""banana"", ""cherry"", ""date""]
    },
    {
        ""strs"": [""abc"", ""def"", ""ghi"", ""jkl"", ""mno"", ""pqr"", ""stu"", ""vw"", ""xyz""],
        ""encoded"": ""abc:;def:;ghi:;jkl:;mno:;pqr:;stu:;vw:;xyz"",
        ""ret"": [""abc"", ""def"", ""ghi"", ""jkl"", ""mno"", ""pqr"", ""stu"", ""vw"", ""xyz""]
    },
    {
        ""strs"": [""cat"", ""dog"", ""bird"", ""fish"", ""lion""],
        ""encoded"": ""cat:;dog:;bird:;fish:;lion"",
        ""ret"": [""cat"", ""dog"", ""bird"", ""fish"", ""lion""]
    },
    {
        ""strs"": [],
        ""encoded"": """",
        ""ret"": []
    },
    {
        ""strs"": ["""", """", """", """"],
        ""encoded"": "":::"",
        ""ret"": ["""", """", """", """"]
    }
]

for args in params:
  encoded_str = obj.encode(args['strs'])
  decoded_strs = obj.decode(encoded_str)
  print(""\u2705 Test Passed."") if decoded_strs == args['ret'] else print(f""\u274c Test Failed. Input: {args['strs']}, expected: {args['ret']} but got {decoded_strs}"")","params = [
  {
      ""strs"": [""lint"", ""code"", ""love"", ""you""],
      ""encoded"": ""lint:;code:;love:;you"",
      ""ret"": [""lint"", ""code"", ""love"", ""you""]
  },
  {
      ""strs"": [""we"", ""say"", "":"", ""yes""],
      ""encoded"": ""we:;say:;:::;yes"",
      ""ret"": [""we"", ""say"", "":"", ""yes""]
  },
  {
      ""strs"": [""hello"", ""world""],
      ""encoded"": ""hello:;world"",
      ""ret"": [""hello"", ""world""]
  },
  {
      ""strs"": [""a"", ""b"", ""c"", ""d"", ""e""],
      ""encoded"": ""a:;b:;c:;d:;e"",
      ""ret"": [""a"", ""b"", ""c"", ""d"", ""e""]
  },
  {
      ""strs"": [""apple"", ""banana"", ""cherry"", ""date""],
      ""encoded"": ""apple:;banana:;cherry:;date"",
      ""ret"": [""apple"", ""banana"", ""cherry"", ""date""]
  },
  {
      ""strs"": [""abc"", ""def"", ""ghi"", ""jkl"", ""mno"", ""pqr"", ""stu"", ""vw"", ""xyz""],
      ""encoded"": ""abc:;def:;ghi:;jkl:;mno:;pqr:;stu:;vw:;xyz"",
      ""ret"": [""abc"", ""def"", ""ghi"", ""jkl"", ""mno"", ""pqr"", ""stu"", ""vw"", ""xyz""]
  },
  {
      ""strs"": [""cat"", ""dog"", ""bird"", ""fish"", ""lion""],
      ""encoded"": ""cat:;dog:;bird:;fish:;lion"",
      ""ret"": [""cat"", ""dog"", ""bird"", ""fish"", ""lion""]
  },
  {
      ""strs"": [],
      ""encoded"": """",
      ""ret"": []
  },
  {
      ""strs"": ["""", """", """", """"],
      ""encoded"": "":::"",
      ""ret"": ["""", """", """", """"]
  }
]

for (let args of params) {
  let encoded_str = encode(args.strs);
  let decoded_strs = decode(encoded_str);
  console.log(decoded_strs === args.ret ? ""\u2705 Test Passed."" : `\u274c Test Failed. Input: ${args.strs}, expected: ${args.ret} but got ${decoded_strs}`);
}"
63b594ee8ad4593d6b7b01d4,longest-consecutive-sequence,"params = [
    {
        ""nums"": [100,4,200,1,3,2],
        ""ret"": 4
    },
    {
        ""nums"": [0,3,7,2,5,8,4,6,0,1],
        ""ret"": 9
    },
    {
        ""nums"": [],
        ""ret"": 0
    },
    {
        ""nums"": [1],
        ""ret"": 1
    },
    {
        ""nums"": [1,1,1,1,1],
        ""ret"": 1
    },
    {
        ""nums"": [1,2,1,2,1,2],
        ""ret"": 2
    },
    {
        ""nums"": [-1, 0, 1],
        ""ret"": 3
    },
    {
        ""nums"": [1,2,0,1],
        ""ret"": 3
    },
    {
        ""nums"": [9,1,4,7,3,-1,0,5,8,-2,6],
        ""ret"": 7
    },
    {
        ""nums"": [1,3,5,2,4],
        ""ret"": 5
    },
]

for args in params:
  result = obj.longestConsecutive(args['nums'])
  print(""\u2705 Test Passed."") if result == args['ret'] else print(f""\u274c Test Failed. Input: {args['nums']}, expected: {args['ret']} but got {result}"")","params = [
  {
      ""nums"": [100,4,200,1,3,2],
      ""ret"": 4
  },
  {
      ""nums"": [0,3,7,2,5,8,4,6,0,1],
      ""ret"": 9
  },
  {
      ""nums"": [],
      ""ret"": 0
  },
  {
      ""nums"": [1],
      ""ret"": 1
  },
  {
      ""nums"": [1,1,1,1,1],
      ""ret"": 1
  },
  {
      ""nums"": [1,2,1,2,1,2],
      ""ret"": 2
  },
  {
      ""nums"": [-1, 0, 1],
      ""ret"": 3
  },
  {
      ""nums"": [1,2,0,1],
      ""ret"": 3
  },
  {
      ""nums"": [9,1,4,7,3,-1,0,5,8,-2,6],
      ""ret"": 7
  },
  {
      ""nums"": [1,3,5,2,4],
      ""ret"": 5
  },
]

for (let args of params) {
  let result = longestConsecutive(args.nums);
  console.log(result === args.ret ? ""\u2705 Test Passed."" : `\u274c Test Failed. Input: ${args.nums}, expected: ${args.ret} but got ${result}`);
}"
63b594ef8ad4593d6b7b01d5,valid-palindrome,"params = [
    {
        ""s"": ""A man, a plan, a canal: Panama"",
        ""ret"": True
    },
    {
        ""s"": ""race a car"",
        ""ret"": False
    },
    {
        ""s"": "" "",
        ""ret"": True
    },
    {
        ""s"": """",
        ""ret"": True
    },
    {
        ""s"": ""!@#$%^&*()_+"",
        ""ret"": True
    },
    {
        ""s"": ""121"",
        ""ret"": True
    },
    {
        ""s"": ""ab_a"",
        ""ret"": True
    },
    {
        ""s"" : ""This is a test sentence!"",
        ""ret"" : False
    },
    {
        ""s"": ""A man, a plan, a canal: Panama!"",
        ""ret"": True
    },

]

for args in params:
  print(""_ Test Passed."") if obj.isPalindrome(args['s']) == args['ret'] else print(f""_ Test Failed. Input: {args['s']}, expected: {args['ret']}"")","params = [
  {
      ""s"": ""A man, a plan, a canal: Panama"",
      ""ret"": True
  },
  {
      ""s"": ""race a car"",
      ""ret"": False
  },
  {
      ""s"": "" "",
      ""ret"": True
  },
  {
      ""s"": """",
      ""ret"": True
  },
  {
      ""s"": ""!@#$%^&*()_+"",
      ""ret"": True
  },
  {
      ""s"": ""121"",
      ""ret"": True
  },
  {
      ""s"": ""ab_a"",
      ""ret"": True
  },
  {
      ""s"" : ""This is a test sentence!"",
      ""ret"" : False
  },
  {
      ""s"": ""A man, a plan, a canal: Panama!"",
      ""ret"": True
  },
]

for (let i = 0; i < params.length; i++) {
  let args = params[i];
  console.log(isPalindrome(args['s']) === args['ret'] ? ""\u2705 Test Passed."" : `\u274c Test Failed. Input: ${args['s']}, expected: ${args['ret']}`);
}"
63b594f68ad4593d6b7b01d6,two-sum-ii-input-array-is-sorted,"params = [
    {
        ""numbers"": [1, 2, 3, 4, 5],
        ""target"": 5,
        ""ret"": [1, 4]
    },
    {
        ""numbers"": [1, 2, 3, 4, 5],
        ""target"": 6,
        ""ret"": [1, 5]
    },
    {
        ""numbers"": [1, 2, 3, 4, 5, 6],
        ""target"": 7,
        ""ret"": [1, 6]
    },
    {
        ""numbers"": [1, 2, 3, 4, 5, 6],
        ""target"": 8,
        ""ret"": [2, 6]
    },
    {
        ""numbers"": [1, 2, 3, 4, 5, 6],
        ""target"": 9,
        ""ret"": [3, 6]
    },
    {
        ""numbers"": [1, 2, 3, 4, 5, 6],
        ""target"": 10,
        ""ret"": [4, 6]
    },
    {
        ""numbers"": [1, 2, 3, 4, 5, 6],
        ""target"": 11,
        ""ret"": [5, 6]
    },
    {
      ""numbers"": [2,7,11,15],
      ""target"": 9,
      ""ret"": [1,2]
    },
    {
    ""numbers"": [2,3,4],
    ""target"": 6,
    ""ret"": [1,3]
    },
    {
      ""numbers"": [-1,0],
      ""target"": -1,
      ""ret"": [1,2]
    }
]

for args in params:
    print(""_ Test Passed."") if obj.twoSum(args['numbers'], args['target']) == args['ret'] else print(f""_ Test Failed. Input: {args['numbers']}, {args['target']}, expected: {args['ret']}"")","params = [
  {
      ""numbers"": [1, 2, 3, 4, 5],
      ""target"": 5,
      ""ret"": [1, 4]
  },
  {
      ""numbers"": [1, 2, 3, 4, 5],
      ""target"": 6,
      ""ret"": [1, 5]
  },
  {
      ""numbers"": [1, 2, 3, 4, 5, 6],
      ""target"": 7,
      ""ret"": [1, 6]
  },
  {
      ""numbers"": [1, 2, 3, 4, 5, 6],
      ""target"": 8,
      ""ret"": [2, 6]
  },
  {
      ""numbers"": [1, 2, 3, 4, 5, 6],
      ""target"": 9,
      ""ret"": [3, 6]
  },
  {
      ""numbers"": [1, 2, 3, 4, 5, 6],
      ""target"": 10,
      ""ret"": [4, 6]
  },
  {
      ""numbers"": [1, 2, 3, 4, 5, 6],
      ""target"": 11,
      ""ret"": [5, 6]
  },
  {
    ""numbers"": [2,7,11,15],
    ""target"": 9,
    ""ret"": [1,2]
  },
  {
  ""numbers"": [2,3,4],
  ""target"": 6,
  ""ret"": [1,3]
  },
  {
    ""numbers"": [-1,0],
    ""target"": -1,
    ""ret"": [1,2]
  }
]

for (let i = 0; i < params.length; i++) {
  let args = params[i];
  console.log(twoSum(args['numbers'], args['target']) === args['ret'] ? '\u2705 Test Passed.' : `\u274c Test Failed. Input: ${args['numbers']}, ${args['target']}, expected: ${args['ret']}`);
}"
63b594f68ad4593d6b7b01d7,3-sum,,
63b594f78ad4593d6b7b01d8,container-with-most-water,"params = [    
    {   
        ""height"": [1,8,6,2,5,4,8,3,7],
        ""ret"": 49
    },
    {
        ""height"": [1,1],
        ""ret"": 1
    },
    {
        ""height"": [1,2,3,4,5,6,7,8,9,10],
        ""ret"": 25
    },
    {
        ""height"": [10,9,8,7,6,5,4,3,2,1],
        ""ret"": 25
    },
    {
        ""height"": [5,5,5,5,5],
        ""ret"": 20
    },
    {
        ""height"": [1,3,5,7,9],
        ""ret"": 10
    },
    {
        ""height"": [9,7,5,3,1],
        ""ret"": 10
    },
    {
        ""height"": [5,10,5,10,5],
        ""ret"": 20
    },
    {
        ""height"": [1,1,1,1,1,1,1,1,1,1],
        ""ret"": 9
    },
    {
        ""height"": [1,2,1,2,1,2,1,2,1,2],
        ""ret"": 16
    }
]

for args in params:
  res =  obj.maxArea(args['height'])
  print(""_ Test Passed."") if res == args['ret'] else print(f""_ Test Failed. Input: {args['height']}, expected: {args['ret']} but got {res}"")","params = [    
  {   
      ""height"": [1,8,6,2,5,4,8,3,7],
      ""ret"": 49
  },
  {
      ""height"": [1,1],
      ""ret"": 1
  },
  {
      ""height"": [1,2,3,4,5,6,7,8,9,10],
      ""ret"": 25
  },
  {
      ""height"": [10,9,8,7,6,5,4,3,2,1],
      ""ret"": 25
  },
  {
      ""height"": [5,5,5,5,5],
      ""ret"": 20
  },
  {
      ""height"": [1,3,5,7,9],
      ""ret"": 10
  },
  {
      ""height"": [9,7,5,3,1],
      ""ret"": 10
  },
  {
      ""height"": [5,10,5,10,5],
      ""ret"": 20
  },
  {
      ""height"": [1,1,1,1,1,1,1,1,1,1],
      ""ret"": 9
  },
  {
      ""height"": [1,2,1,2,1,2,1,2,1,2],
      ""ret"": 16
  }
]

for (let i = 0; i < params.length; i++) {
  let args = params[i];
  let res = maxArea(args['height']);
  res == args['ret'] ? console.log(""\u2705 Test Passed."") : console.log(`\u274c Test Failed. Input: ${args['height']}, expected: ${args['ret']}, got: ${res}`);
}"
63b594f88ad4593d6b7b01d9,trapping-rain-water,"params = [    
    { 
        ""height"": [0,1,0,2,1,0,1,3,2,1,2,1],
        ""ret"": 6
    },
    {
        ""height"": [4,2,0,3,2,5],
        ""ret"": 9
    },
    {
        ""height"": [1,2,3,4,5,6],
        ""ret"": 0
    },
    {
        ""height"": [6,5,4,3,2,1],
        ""ret"": 0
    },
    {
        ""height"": [1,0,1],
        ""ret"": 1
    },
    {
        ""height"": [1,1,1,1,1],
        ""ret"": 0
    },
    {
        ""height"": [3,2,1,2,3],
        ""ret"": 4
    },
    {
        ""height"": [1,1,1,1,1,1,1,1,1,1],
        ""ret"": 0
    },
    {
        ""height"": [5,5,5,5,5,5,5,5,5,5],
        ""ret"": 0
    },
    {
        ""height"": [1,1,1,1,1,1,1,1,1,1,1],
        ""ret"": 0
    }
]


for args in params:
  result = obj.trap(args['height'])
  if result == args['ret']:
      print(""\u2705 Test Passed."")
  else:
      print(f""\u274c Test Failed. Input: {args['height']}, expected: {args['ret']}, but got {result}"")","params = [    
  { 
      ""height"": [0,1,0,2,1,0,1,3,2,1,2,1],
      ""ret"": 6
  },
  {
      ""height"": [4,2,0,3,2,5],
      ""ret"": 9
  },
  {
      ""height"": [1,2,3,4,5,6],
      ""ret"": 0
  },
  {
      ""height"": [6,5,4,3,2,1],
      ""ret"": 0
  },
  {
      ""height"": [1,0,1],
      ""ret"": 1
  },
  {
      ""height"": [1,1,1,1,1],
      ""ret"": 0
  },
  {
      ""height"": [3,2,1,2,3],
      ""ret"": 4
  },
  {
      ""height"": [1,1,1,1,1,1,1,1,1,1],
      ""ret"": 0
  },
  {
      ""height"": [5,5,5,5,5,5,5,5,5,5],
      ""ret"": 0
  },
  {
      ""height"": [1,1,1,1,1,1,1,1,1,1,1],
      ""ret"": 0
  }
]

for (let i = 0; i < params.length; i++) {
  let args = params[i];
  let result = trap(args['height']);
  if (result === args['ret']) {
      console.log(""\u2705 Test Passed."")
  } else {
      console.log(`\u274c Test Failed. Input: ${args['height']}, expected: ${args['ret']}, but got ${result}`)
  }
}"
63b594fa8ad4593d6b7b01da,best-time-to-buy-and-sell-stock,"params = [
    {
        ""prices"": [7,1,5,3,6,4],
        ""ret"": 5
    },
    {
        ""prices"": [7,6,4,3,1],
        ""ret"": 0
    },
    {
        ""prices"": [1,1,1,1,1,1],
        ""ret"": 0
    },
    {
        ""prices"": [1,2,3,4,5,6],
        ""ret"": 5
    },
    {
        ""prices"": [6,5,4,3,2,1],
        ""ret"": 0
    },
    {
        ""prices"": [1],
        ""ret"": 0
    },
    {
        ""prices"": [],
        ""ret"": 0
    },
    {
        ""prices"": [2,2,2,2,2],
        ""ret"": 0
    },
    {
        ""prices"": [1,2,3,4,5,6,7,8,9,10],
        ""ret"": 9
    },
    {
        ""prices"": [10,9,8,7,6,5,4,3,2,1],
        ""ret"": 0
    },
    {
        ""prices"": [4,6,2,8,3,10],
        ""ret"": 8
    },
    {
        ""prices"": [15,12,10,8,11,20],
        ""ret"": 12
    },
    {
        ""prices"": [1,2,3,4,5,6],
        ""ret"": 5
    },
    {
        ""prices"": [6,5,4,3,2,1],
        ""ret"": 0
    },
    {
        ""prices"": [2,4,6,8,10,12],
        ""ret"": 10
    }
]

for args in params:
  result = obj.maxProfit(args['prices'])
  if result == args['ret']:
      print(""\u2705 Test Passed."")
  else:
      print(f""\u274c Test Failed. Input: {args['prices']}, expected: {args['ret']}, but got {result}"")","params = [
  {
      ""prices"": [7,1,5,3,6,4],
      ""ret"": 5
  },
  {
      ""prices"": [7,6,4,3,1],
      ""ret"": 0
  },
  {
      ""prices"": [1,1,1,1,1,1],
      ""ret"": 0
  },
  {
      ""prices"": [1,2,3,4,5,6],
      ""ret"": 5
  },
  {
      ""prices"": [6,5,4,3,2,1],
      ""ret"": 0
  },
  {
      ""prices"": [1],
      ""ret"": 0
  },
  {
      ""prices"": [],
      ""ret"": 0
  },
  {
      ""prices"": [2,2,2,2,2],
      ""ret"": 0
  },
  {
      ""prices"": [1,2,3,4,5,6,7,8,9,10],
      ""ret"": 9
  },
  {
      ""prices"": [10,9,8,7,6,5,4,3,2,1],
      ""ret"": 0
  },
  {
      ""prices"": [4,6,2,8,3,10],
      ""ret"": 8
  },
  {
      ""prices"": [15,12,10,8,11,20],
      ""ret"": 12
  },
  {
      ""prices"": [1,2,3,4,5,6],
      ""ret"": 5
  },
  {
      ""prices"": [6,5,4,3,2,1],
      ""ret"": 0
  },
  {
      ""prices"": [2,4,6,8,10,12],
      ""ret"": 10
  }
]

for (let i = 0; i < params.length; i++) {
  let args = params[i];
  let result = maxProfit(args['prices']);
  if (result === args['ret']) {
      console.log(""\u2705 Test Passed."");
  } else {
      console.log(`\u274c Test Failed. Input: ${args['prices']}, expected: ${args['ret']}, but got ${result}`);
  }
}"
63b594fa8ad4593d6b7b01db,longest-substring-without-repeating-characters,"params = [
    {
        ""s"": ""abcabcbb"",
        ""ret"": 3
    },
    {
        ""s"": ""bbbbb"",
        ""ret"": 1
    },
    {
        ""s"": ""pwwkew"",
        ""ret"": 3
    },
    {
        ""s"": ""abcdefghijklmnopqrstuvwxyz"",
        ""ret"": 26
    },
    {
        ""s"": ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"",
        ""ret"": 52
    },
    {
        ""s"": """",
        ""ret"": 0
    },
    {
        ""s"": ""a"",
        ""ret"": 1
    },
    {
        ""s"": ""aa"",
        ""ret"": 1
    },
    {
        ""s"": ""ab"",
        ""ret"": 2
    },
    {
        ""s"": ""aaab"",
        ""ret"": 2
    },
    {
        ""s"": ""aab"",
        ""ret"": 2
    }, 
    {
        ""s"": ""dvdf"",
        ""ret"": 3
    },
    {
        ""s"": ""ohvh"",
        ""ret"": 3
    },
    {
        ""s"": ""abcabcabcabcabcabcabcabcab"",
        ""ret"": 3
    },
]


for args in params:
    result = obj.lengthOfLongestSubstring(args['s'])
    if result == args['ret']:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {args['s']}, expected: {args['ret']}, but got {result}"")","params = [
  {
      ""s"": ""abcabcbb"",
      ""ret"": 3
  },
  {
      ""s"": ""bbbbb"",
      ""ret"": 1
  },
  {
      ""s"": ""pwwkew"",
      ""ret"": 3
  },
  {
      ""s"": ""abcdefghijklmnopqrstuvwxyz"",
      ""ret"": 26
  },
  {
      ""s"": ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"",
      ""ret"": 52
  },
  {
      ""s"": """",
      ""ret"": 0
  },
  {
      ""s"": ""a"",
      ""ret"": 1
  },
  {
      ""s"": ""aa"",
      ""ret"": 1
  },
  {
      ""s"": ""ab"",
      ""ret"": 2
  },
  {
      ""s"": ""aaab"",
      ""ret"": 2
  },
  {
      ""s"": ""aab"",
      ""ret"": 2
  }, 
  {
      ""s"": ""dvdf"",
      ""ret"": 3
  },
  {
      ""s"": ""ohvh"",
      ""ret"": 3
  },
  {
      ""s"": ""abcabcabcabcabcabcabcabcab"",
      ""ret"": 3
  },
]


for (let i = 0; i < params.length; i++) {
    let args = params[i];
    let result = lengthOfLongestSubstring(args['s']);
    if (result === args['ret']) {
        console.log(""\u2705 Test Passed."")
    } else {
        console.log(`\u274c Test Failed. Input: ${args['s']}, expected: ${args['ret']}, but got ${result}`)
    }
}"
63b594fb8ad4593d6b7b01dc,longest-repeating-character-replacement,"params = [
    {
        ""s"": ""ABAB"",
        ""k"": 2,
        ""ret"": 4
    },
    {
        ""s"": ""AABABBA"",
        ""k"": 1,
        ""ret"": 4
    },
    {
        ""s"": ""AAAB"",
        ""k"": 0,
        ""ret"": 3
    },
    {
        ""s"": ""A"",
        ""k"": 0,
        ""ret"": 1
    },
    {
        ""s"": ""AAABB"",
        ""k"": 2,
        ""ret"": 5
    },
    {
        ""s"": ""AAABBB"",
        ""k"": 2,
        ""ret"": 5
    },
    {
        ""s"": ""AAABBB"",
        ""k"": 3,
        ""ret"": 6
    },
    {
        ""s"": ""AAABBB"",
        ""k"": 4,
        ""ret"": 6
    },
    {
        ""s"": ""AAAAAAABBB"",
        ""k"": 2,
        ""ret"": 9
    },
    {
        ""s"": ""AAAAAAABBB"",
        ""k"": 3,
        ""ret"": 10
    },
    {
        ""s"": ""ABCDEFG"",
        ""k"": 2,
        ""ret"": 3
    },
    {
        ""s"": ""AAACCCGGGTTT"",
        ""k"": 4,
        ""ret"": 7
    },
    {
        ""s"": ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"",
        ""k"": 25,
        ""ret"": 26
    },
    {
        ""s"": ""AAABBB"",
        ""k"": 1,
        ""ret"": 4
    },
    {
        ""s"": ""ABABABABABA"",
        ""k"": 3,
        ""ret"": 7
    },
    {
        ""s"": ""ABCDABD"",
        ""k"": 2,
        ""ret"": 4
    },
    {
        ""s"": ""ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"",
        ""k"": 50,
        ""ret"": 52
    },
    {
        ""s"": ""ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"",
        ""k"": 100,
        ""ret"": 78
    },
    {
        ""s"": ""ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"",
        ""k"": 200,
        ""ret"": 104
    },
    {
        ""s"": ""ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"",
        ""k"": 250,
        ""ret"": 130
    }
]

for args in params:
  result = obj.characterReplacement(args['s'], args['k'])
  if result == args['ret']:
      print(""\u2705 Test Passed."")
  else:
      print(f""\u274c Test Failed. Input: {args['s']}, {args['k']}, expected: {args['ret']}, but got {result}"")","params = [
  {
      ""s"": ""ABAB"",
      ""k"": 2,
      ""ret"": 4
  },
  {
      ""s"": ""AABABBA"",
      ""k"": 1,
      ""ret"": 4
  },
  {
      ""s"": ""AAAB"",
      ""k"": 0,
      ""ret"": 3
  },
  {
      ""s"": ""A"",
      ""k"": 0,
      ""ret"": 1
  },
  {
      ""s"": ""AAABB"",
      ""k"": 2,
      ""ret"": 5
  },
  {
      ""s"": ""AAABBB"",
      ""k"": 2,
      ""ret"": 5
  },
  {
      ""s"": ""AAABBB"",
      ""k"": 3,
      ""ret"": 6
  },
  {
      ""s"": ""AAABBB"",
      ""k"": 4,
      ""ret"": 6
  },
  {
      ""s"": ""AAAAAAABBB"",
      ""k"": 2,
      ""ret"": 9
  },
  {
      ""s"": ""AAAAAAABBB"",
      ""k"": 3,
      ""ret"": 10
  },
  {
      ""s"": ""ABCDEFG"",
      ""k"": 2,
      ""ret"": 3
  },
  {
      ""s"": ""AAACCCGGGTTT"",
      ""k"": 4,
      ""ret"": 7
  },
  {
      ""s"": ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"",
      ""k"": 25,
      ""ret"": 26
  },
  {
      ""s"": ""AAABBB"",
      ""k"": 1,
      ""ret"": 4
  },
  {
      ""s"": ""ABABABABABA"",
      ""k"": 3,
      ""ret"": 7
  },
  {
      ""s"": ""ABCDABD"",
      ""k"": 2,
      ""ret"": 4
  },
  {
      ""s"": ""ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"",
      ""k"": 50,
      ""ret"": 52
  },
  {
      ""s"": ""ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"",
      ""k"": 100,
      ""ret"": 78
  },
  {
      ""s"": ""ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"",
      ""k"": 200,
      ""ret"": 104
  },
  {
      ""s"": ""ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"",
      ""k"": 250,
      ""ret"": 130
  }
]

for (let i = 0; i < params.length; i++) {
  let args = params[i];
  let result = characterReplacement(args['s'], args['k']);
  if (result === args['ret']) {
      console.log(""_ Test Passed."")
  } else {
      console.log(`_ Test Failed. Input: ${args['s']}, k: ${args['k']}, expected: ${args['ret']}, but got ${result}`)
  }
}"
63b594fc8ad4593d6b7b01dd,permutation-in-string,"params = [
    {
        ""s1"": ""ab"",
        ""s2"": ""eidbaooo"",
        ""ret"": True
    },
    {
        ""s1"": ""ab"",
        ""s2"": ""eidboaoo"",
        ""ret"": False
    },
    {
        ""s1"": ""abc"",
        ""s2"": ""cbaaabcb"",
        ""ret"": True
    },
    {
        ""s1"": ""abc"",
        ""s2"": ""cbacbaab"",
        ""ret"": True
    },
    {
        ""s1"": ""abc"",
        ""s2"": ""cbacbacb"",
        ""ret"": True
    },
    {
        ""s1"": """",
        ""s2"": ""cbacbacb"",
        ""ret"": True
    },
    {
        ""s1"": ""a"",
        ""s2"": """",
        ""ret"": False
    },
    {
        ""s1"": ""a"",
        ""s2"": ""a"",
        ""ret"": True
    },
    {
        ""s1"": ""ab"",
        ""s2"": ""aaab"",
        ""ret"": True
    },
    {
        ""s1"": ""ab"",
        ""s2"": ""baab"",
        ""ret"": True
    },
    {
        ""s1"": ""abcdef"",
        ""s2"": ""abcdefgabcdef"",
        ""ret"": True
    },
    {
        ""s1"": ""abcdef"",
        ""s2"": ""abcdabcdabcd"",
        ""ret"": False
    },
    {
        ""s1"": ""abcdef"",
        ""s2"": ""abcdefabcdefghijklmnopqrstuvwxyz"",
        ""ret"": True
    },
    {
        ""s1"": ""abcdef"",
        ""s2"": ""abcdefabcdefghijklmnopqrstuvwxyzabcdef"",
        ""ret"": True
    },
    {
        ""s1"": ""abcdef"",
        ""s2"": ""abcdefghijklmnopqrstuvwxyz"",
        ""ret"": True
    },
    {
        ""s1"": ""abcdefghijklmnopqrstuvwxyz"",
        ""s2"": ""abcdefabcdefghijklmnopqrstuvwxyzabcdefabcdefghijklmnopqrstuvwxyz"",
        ""ret"": True
    },
    {
        ""s1"": ""abcdefghijklmnopqrstuvwxyz"",
        ""s2"": ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"",
        ""ret"": True
    },
    {
        ""s1"": ""abcdefghijklmnopqrstuvwxyz"",
        ""s2"": ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"",
        ""ret"": True
    },
    {
        ""s1"": ""abcdefghijklmnopqrstuvwxyz"",
        ""s2"": ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"",
        ""ret"": True
    }
]

for args in params:
  result = obj.checkInclusion(args['s1'], args['s2'])
  if result == args['ret']:
      print(""\u2705 Test Passed."")
  else:
      print(f""\u274c Test Failed. Input: s1 = {args['s1']}, s2 = {args['s2']}, expected: {args['ret']}, but got {result}"")","params = [
  {
      ""s1"": ""ab"",
      ""s2"": ""eidbaooo"",
      ""ret"": true
  },
  {
      ""s1"": ""ab"",
      ""s2"": ""eidboaoo"",
      ""ret"": false
  },
  {
      ""s1"": ""abc"",
      ""s2"": ""cbaaabcb"",
      ""ret"": true
  },
  {
      ""s1"": ""abc"",
      ""s2"": ""cbacbaab"",
      ""ret"": true
  },
  {
      ""s1"": ""abc"",
      ""s2"": ""cbacbacb"",
      ""ret"": true
  },
  {
      ""s1"": """",
      ""s2"": ""cbacbacb"",
      ""ret"": true
  },
  {
      ""s1"": ""a"",
      ""s2"": """",
      ""ret"": false
  },
  {
      ""s1"": ""a"",
      ""s2"": ""a"",
      ""ret"": true
  },
  {
      ""s1"": ""ab"",
      ""s2"": ""aaab"",
      ""ret"": true
  },
  {
      ""s1"": ""ab"",
      ""s2"": ""baab"",
      ""ret"": true
  },
  {
      ""s1"": ""abcdef"",
      ""s2"": ""abcdefgabcdef"",
      ""ret"": true
  },
  {
      ""s1"": ""abcdef"",
      ""s2"": ""abcdabcdabcd"",
      ""ret"": false
  },
  {
      ""s1"": ""abcdef"",
      ""s2"": ""abcdefabcdefghijklmnopqrstuvwxyz"",
      ""ret"": true
  },
  {
      ""s1"": ""abcdef"",
      ""s2"": ""abcdefabcdefghijklmnopqrstuvwxyzabcdef"",
      ""ret"": true
  },
  {
      ""s1"": ""abcdef"",
      ""s2"": ""abcdefghijklmnopqrstuvwxyz"",
      ""ret"": true
  },
  {
      ""s1"": ""abcdefghijklmnopqrstuvwxyz"",
      ""s2"": ""abcdefabcdefghijklmnopqrstuvwxyzabcdefabcdefghijklmnopqrstuvwxyz"",
      ""ret"": true
  },
  {
      ""s1"": ""abcdefghijklmnopqrstuvwxyz"",
      ""s2"": ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"",
      ""ret"": true
  },
  {
      ""s1"": ""abcdefghijklmnopqrstuvwxyz"",
      ""s2"": ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"",
      ""ret"": true
  },
  {
      ""s1"": ""abcdefghijklmnopqrstuvwxyz"",
      ""s2"": ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"",
      ""ret"": true
  }
]

for (let i = 0; i < params.length; i++) {
  let result = checkInclusion(params[i][""s1""], params[i][""s2""])
  if (result === params[i][""ret""]) {
      console.log(""\u2705 Test Passed."")
  } else {
      console.log(`\u274c Test Failed. Input: s1: ${params[i][""s1""]}, s2: ${params[i][""s2""]}, expected: ${params[i][""ret""]}, but got ${result}`)
  }
}"
63b594fe8ad4593d6b7b01de,minimum-window-substring,"params = [
    {'s': 'ADOBECODEBANC', 't': 'ABC', 'ret': 'BANC'},
    {'s': 'a', 't': 'a', 'ret': 'a'},
    {'s': 'a', 't': 'aa', 'ret': ''},
    {'s': 'abcdabcd', 't': 'abc', 'ret': 'abc'},
    {'s': 'abcdabcd', 't': 'abcd', 'ret': 'abcd'},
    {'s': 'abcdabcd', 't': 'bcda', 'ret': 'abcd'},
    {'s': 'abcdabcd', 't': 'cabd', 'ret': 'abcd'},
    {'s': 'abcdabcd', 't': 'abcdabcd', 'ret': 'abcdabcd'},
    {'s': 'abcdabcd', 't': 'abcdabc', 'ret': 'abcdabc'},
    {'s': 'abcdabcd', 't': 'abcdef', 'ret': ''},
    {""s"": ""qwertyuiopasdfghjklzxcvbnmqwertyuio"", ""t"": ""qwertyuio"", ""ret"": ""qwertyuio""},
    {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefgh"", ""ret"": ""abcdefgh""},
    {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghi"", ""ret"": ""abcdefghi""},
    {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklm"", ""ret"": ""abcdefghijklm""},
    {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrs"", ""ret"": ""abcdefghijklmnopqrs""},
    {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrstuvwxyz"", ""ret"": ""abcdefghijklmnopqrstuvwxyz""},
    {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""ret"": ""abcdefghijklmnopqrstuvwxyzabcdefgh""},
    {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrstuvwxyzabcdefghi"", ""ret"": """"},
    {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefgh"", ""ret"": """"},
    {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghi"", ""ret"": """"},
]

for args in params:
    result = obj.minWindow(args['s'], args['t'])
    if result == args['ret']:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {args['s']}, {args['t']}, expected: {args['ret']}, but got {result}"")","params = [
  {'s': 'ADOBECODEBANC', 't': 'ABC', 'ret': 'BANC'},
  {'s': 'a', 't': 'a', 'ret': 'a'},
  {'s': 'a', 't': 'aa', 'ret': ''},
  {'s': 'abcdabcd', 't': 'abc', 'ret': 'abc'},
  {'s': 'abcdabcd', 't': 'abcd', 'ret': 'abcd'},
  {'s': 'abcdabcd', 't': 'bcda', 'ret': 'abcd'},
  {'s': 'abcdabcd', 't': 'cabd', 'ret': 'abcd'},
  {'s': 'abcdabcd', 't': 'abcdabcd', 'ret': 'abcdabcd'},
  {'s': 'abcdabcd', 't': 'abcdabc', 'ret': 'abcdabc'},
  {'s': 'abcdabcd', 't': 'abcdef', 'ret': ''},
  {""s"": ""qwertyuiopasdfghjklzxcvbnmqwertyuio"", ""t"": ""qwertyuio"", ""ret"": ""qwertyuio""},
  {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefgh"", ""ret"": ""abcdefgh""},
  {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghi"", ""ret"": ""abcdefghi""},
  {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklm"", ""ret"": ""abcdefghijklm""},
  {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrs"", ""ret"": ""abcdefghijklmnopqrs""},
  {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrstuvwxyz"", ""ret"": ""abcdefghijklmnopqrstuvwxyz""},
  {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""ret"": ""abcdefghijklmnopqrstuvwxyzabcdefgh""},
  {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrstuvwxyzabcdefghi"", ""ret"": """"},
  {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefgh"", ""ret"": """"},
  {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghi"", ""ret"": """"},
]

for (let i = 0; i < params.length; i++) {
  let test = params[i];
  let result = minWindow(test.s, test.t);
  if (result === test.ret) {
      console.log(""_ Test Passed."")
  } else {
      console.log(`_ Test Failed. Input: ${test.s}, ${test.t}, expected: ${test.ret}, but got ${result}`)
  }
}"
63b594ff8ad4593d6b7b01df,sliding-window-maximum,"params = [
    {
        ""nums"": [1,3,-1,-3,5,3,6,7],
        ""k"": 3,
        ""ret"": [3,3,5,5,6,7]
    },
    {
        ""nums"": [1,3,-1,-3,5,3,6,7],
        ""k"": 2,
        ""ret"": [3,3,-1,5,5,6,7]
    },
    {
        ""nums"": [1],
        ""k"": 1,
        ""ret"": [1]
    },
    {
        ""nums"": [1, 2, 3, 4, 5, 6],
        ""k"": 2,
        ""ret"": [2, 3, 4, 5, 6]
    },
    {
        ""nums"": [6, 5, 4, 3, 2, 1],
        ""k"": 3,
        ""ret"": [6, 5, 4, 3]
    },
    {
        ""nums"": [-1, -2, -3, -4, -5],
        ""k"": 4,
        ""ret"": [-1, -2]
    },
    {
        ""nums"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        ""k"": 5,
        ""ret"": [5, 6, 7, 8, 9, 10]
    },
    {
        ""nums"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        ""k"": 10,
        ""ret"": [10]
    },
    {
        ""nums"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        ""k"": 1,
        ""ret"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    },
    {
        ""nums"": [],
        ""k"": 5,
        ""ret"": []
    },
    {
        ""nums"": [1, 3, -1, -3, 5, 3, 6, 7],
        ""k"": 3,
        ""ret"": [3, 3, 5, 5, 6, 7]
    },
    {
        ""nums"": [1, 3, -1, -3, 5, 3, 6, 7, 8, 9, 10],
        ""k"": 4,
        ""ret"": [3, 5, 5, 6, 7, 8, 9, 10]
    },
    {
        ""nums"": [1, 3, -1, -3, 5, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        ""k"": 5,
        ""ret"": [5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
    },
    {
        ""nums"": [1, 3, -1, -3, 5, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
        ""k"": 6,
        ""ret"": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    },
    {
        ""nums"": [1, 3, -1, -3, 5, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],
        ""k"": 7,
        ""ret"": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
    },
    {
        ""nums"": [1, 3, -1, -3, 5, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22],
        ""k"": 8,
        ""ret"": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
    }
]

for args in params:
  result = obj.maxSlidingWindow(args['nums'], args['k'])
  if result == args['ret']:
    print(""\u2705 Test Passed."")
  else:
    print(f""\u274c Test Failed. Input: {args['nums']}, {args['k']}, expected: {args['ret']}, but got {result}"")","params = [
  {
      ""nums"": [1,3,-1,-3,5,3,6,7],
      ""k"": 3,
      ""ret"": [3,3,5,5,6,7]
  },
  {
      ""nums"": [1,3,-1,-3,5,3,6,7],
      ""k"": 2,
      ""ret"": [3,3,-1,5,5,6,7]
  },
  {
      ""nums"": [1],
      ""k"": 1,
      ""ret"": [1]
  },
  {
      ""nums"": [1, 2, 3, 4, 5, 6],
      ""k"": 2,
      ""ret"": [2, 3, 4, 5, 6]
  },
  {
      ""nums"": [6, 5, 4, 3, 2, 1],
      ""k"": 3,
      ""ret"": [6, 5, 4, 3]
  },
  {
      ""nums"": [-1, -2, -3, -4, -5],
      ""k"": 4,
      ""ret"": [-1, -2]
  },
  {
      ""nums"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      ""k"": 5,
      ""ret"": [5, 6, 7, 8, 9, 10]
  },
  {
      ""nums"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      ""k"": 10,
      ""ret"": [10]
  },
  {
      ""nums"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      ""k"": 1,
      ""ret"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  },
  {
      ""nums"": [],
      ""k"": 5,
      ""ret"": []
  },
  {
      ""nums"": [1, 3, -1, -3, 5, 3, 6, 7],
      ""k"": 3,
      ""ret"": [3, 3, 5, 5, 6, 7]
  },
  {
      ""nums"": [1, 3, -1, -3, 5, 3, 6, 7, 8, 9, 10],
      ""k"": 4,
      ""ret"": [3, 5, 5, 6, 7, 8, 9, 10]
  },
  {
      ""nums"": [1, 3, -1, -3, 5, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
      ""k"": 5,
      ""ret"": [5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
  },
  {
      ""nums"": [1, 3, -1, -3, 5, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
      ""k"": 6,
      ""ret"": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
  },
  {
      ""nums"": [1, 3, -1, -3, 5, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],
      ""k"": 7,
      ""ret"": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
  },
  {
      ""nums"": [1, 3, -1, -3, 5, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22],
      ""k"": 8,
      ""ret"": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
  }
]

function arraysEqual(a, b) {
  if (a === b) return true;
  if (a == null || b == null) return false;
  if (a.length != b.length) return false;

  for (var i = 0; i < a.length; ++i) {
      if (a[i] !== b[i]) return false;
  }
  return true;
}

for (let i = 0; i < params.length; i++) {
  let result = maxSlidingWindow(params[i].nums, params[i].k);
  if (arraysEqual(result, params[i].ret)) {
      console.log(""\u2705 Test Passed."");
  } else {
      console.log(`\u274c Test Failed. Input: ${params[i].nums}, ${params[i].k}, expected: ${params[i].ret}, but got ${result}`);
  }
}"
63b595008ad4593d6b7b01e0,valid-parentheses,"params = [
    {""s"": ""()"", ""ret"": True},
    {""s"": ""()[]{}"", ""ret"": True},
    {""s"": ""(]"", ""ret"": False},
    {""s"": ""({[]})"", ""ret"": True},
    {""s"": ""({[}])"", ""ret"": False},
    {""s"": ""(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("", ""ret"": False},
    {""s"": ""()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()"", ""ret"": True},
    {""s"": ""[({})]"", ""ret"": True},
    {""s"": """", ""ret"": True},
    {""s"": ""(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("", ""ret"": False},
    {""s"": ""()()()()"", ""ret"": True},
    {""s"": ""((()))"", ""ret"": True},
    {""s"": ""[{}]()"", ""ret"": True},
    {""s"": ""({[}])"", ""ret"": False},
    {""s"": ""(()[{}])"", ""ret"": True},
    {""s"": ""([)]"", ""ret"": False},
    {""s"": ""((((((((("", ""ret"": False},
    {""s"": ""){}{}{}{}{}{}{}{}{}"", ""ret"": False},
    {""s"": ""[](){}"", ""ret"": True},
    {""s"": ""[](){}()[]{}"", ""ret"": True},
]

for args in params:
    result = obj.isValid(args['s'])
    if result == args['ret']:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {args['s']}, expected: {args['ret']}, but got {result}"")","params = [
    {""s"": ""()"", ""ret"": True},
    {""s"": ""()[]{}"", ""ret"": True},
    {""s"": ""(]"", ""ret"": False},
    {""s"": ""({[]})"", ""ret"": True},
    {""s"": ""({[}])"", ""ret"": False},
    {""s"": ""(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("", ""ret"": False},
    {""s"": ""()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()"", ""ret"": True},
    {""s"": ""[({})]"", ""ret"": True},
    {""s"": """", ""ret"": True},
    {""s"": ""(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("", ""ret"": False},
    {""s"": ""()()()()"", ""ret"": True},
    {""s"": ""((()))"", ""ret"": True},
    {""s"": ""[{}]()"", ""ret"": True},
    {""s"": ""({[}])"", ""ret"": False},
    {""s"": ""(()[{}])"", ""ret"": True},
    {""s"": ""([)]"", ""ret"": False},
    {""s"": ""((((((((("", ""ret"": False},
    {""s"": ""){}{}{}{}{}{}{}{}{}"", ""ret"": False},
    {""s"": ""[](){}"", ""ret"": True},
    {""s"": ""[](){}()[]{}"", ""ret"": True},
]

for (let i = 0; i < params.length; i++) {
    let result = isValid(params[i].s);
    if (result === params[i].ret) {
        console.log(""\u2705 Test Passed."")
    } else {
        console.log(`\u274c Test Failed. Input: ${params[i].s}, expected: ${params[i].ret}, but got ${result}`)
    }
}"
63b595018ad4593d6b7b01e1,min-stack,,
63b595028ad4593d6b7b01e2,evaluate-reverse-polish-notation,,
63b595038ad4593d6b7b01e3,generate-parentheses,,
63b595038ad4593d6b7b01e4,daily-temperatures,,
63b595048ad4593d6b7b01e5,car-fleet,,
63b595058ad4593d6b7b01e6,largest-rectangle-in-histogram,,
63b595068ad4593d6b7b01e7,binary-search,,
63b595078ad4593d6b7b01e8,search-a-2-d-matrix,,
63b595088ad4593d6b7b01e9,koko-eating-bananas,,
63b595098ad4593d6b7b01ea,find-minimum-in-rotated-sorted-array,,
63b5950a8ad4593d6b7b01eb,search-in-rotated-sorted-array,,
63b5950c8ad4593d6b7b01ec,time-based-key-value-store,,
63b5950d8ad4593d6b7b01ed,median-of-two-sorted-arrays,,
63b5950e8ad4593d6b7b01ee,reverse-linked-list,,
63b5950e8ad4593d6b7b01ef,merge-two-sorted-lists,,
63b5950f8ad4593d6b7b01f0,reorder-list,,
63b595108ad4593d6b7b01f1,remove-nth-node-from-end-of-list,,
63b595118ad4593d6b7b01f2,copy-list-with-random-pointer,,
63b595128ad4593d6b7b01f3,add-two-numbers,,
63b595148ad4593d6b7b01f4,linked-list-cycle,,
63b595148ad4593d6b7b01f5,find-the-duplicate-number,,
63b595158ad4593d6b7b01f6,lru-cache,,
63b595168ad4593d6b7b01f7,merge-k-sorted-lists,,
63b595178ad4593d6b7b01f8,reverse-nodes-in-k-group,,
63b595188ad4593d6b7b01f9,invert-binary-tree,,
63b595198ad4593d6b7b01fa,maximum-depth-of-binary-tree,,
63b595388ad4593d6b7b01fb,climbing-stairs,,
63b595398ad4593d6b7b01fc,min-cost-climbing-stairs,,
63b5953a8ad4593d6b7b01fd,house-robber,,
63b5953b8ad4593d6b7b01fe,house-robber-ii,,
63b5953c8ad4593d6b7b01ff,longest-palindromic-substring,,
63b5953c8ad4593d6b7b0200,palindromic-substrings,,
63b5953d8ad4593d6b7b0201,decode-ways,,
63b5953e8ad4593d6b7b0202,coin-change,,
63b5953f8ad4593d6b7b0203,maximum-product-subarray,,
63b595408ad4593d6b7b0204,word-break,,
63b595418ad4593d6b7b0205,longest-increasing-subsequence,,
63b595418ad4593d6b7b0206,partition-equal-subset-sum,,
63b595428ad4593d6b7b0207,unique-paths,,
63b595438ad4593d6b7b0208,longest-common-subsequence,,
63b595448ad4593d6b7b0209,best-time-to-buy-and-sell-stock-with-cooldown,,
63b595458ad4593d6b7b020a,coin-change-ii,,
63b595468ad4593d6b7b020b,target-sum,,
63b595478ad4593d6b7b020c,interleaving-string,,
63b595488ad4593d6b7b020d,longest-increasing-path-in-a-matrix,,
63b595498ad4593d6b7b020e,distinct-subsequences,,
63b5954a8ad4593d6b7b020f,edit-distance,,
63b5954b8ad4593d6b7b0210,burst-balloons,,
63b5954b8ad4593d6b7b0211,regular-expression-matching,,
63b5954d8ad4593d6b7b0212,maximum-subarray,,
63b5954e8ad4593d6b7b0213,jump-game,,
63b5954f8ad4593d6b7b0214,jump-game-ii,,
63b595508ad4593d6b7b0215,gas-station,,
63b595518ad4593d6b7b0216,hand-of-straights,,
63b595518ad4593d6b7b0217,merge-triplets-to-form-target-triplet,,
63b595538ad4593d6b7b0218,partition-labels,,
63b598438ad4593d6b7b0219,diameter-of-binary-tree,,
63b598448ad4593d6b7b021a,balanced-binary-tree,,
63b598458ad4593d6b7b021b,same-tree,,
63b598458ad4593d6b7b021c,subtree-of-another-tree,,
63b598468ad4593d6b7b021d,lowest-common-ancestor-of-a-binary-search-tree,,
63b598478ad4593d6b7b021e,binary-tree-level-order-traversal,,
63b598488ad4593d6b7b021f,binary-tree-right-side-view,,
63b5984b8ad4593d6b7b0220,count-good-nodes-in-binary-tree,,
63b5984c8ad4593d6b7b0221,validate-binary-search-tree,,
63b5984c8ad4593d6b7b0222,kth-smallest-element-in-a-bst,,
63b5984d8ad4593d6b7b0223,construct-binary-tree-from-preorder-and-inorder-traversal,,
63b5984e8ad4593d6b7b0224,binary-tree-maximum-path-sum,,
63b5984f8ad4593d6b7b0225,serialize-and-deserialize-binary-tree,,
63b598508ad4593d6b7b0226,implement-trie-prefix-tree,,
63b598518ad4593d6b7b0227,design-add-and-search-words-data-structure,,
63b598518ad4593d6b7b0228,word-search-ii,,
63b598528ad4593d6b7b0229,kth-largest-element-in-a-stream,,
63b598538ad4593d6b7b022a,last-stone-weight,,
63b598548ad4593d6b7b022b,k-closest-points-to-origin,,
63b598558ad4593d6b7b022c,kth-largest-element-in-an-array,,
63b598558ad4593d6b7b022d,task-scheduler,,
63b598578ad4593d6b7b022e,design-twitter,,
63b598598ad4593d6b7b022f,find-median-from-data-stream-,,
63b5985a8ad4593d6b7b0230,subsets-,,
63b5985b8ad4593d6b7b0231,combination-sum-,,
63b5985c8ad4593d6b7b0232,permutations-,,
63b5985c8ad4593d6b7b0233,subsets-ii-,,
63b5985d8ad4593d6b7b0234,combination-sum-ii-,,
63b5985e8ad4593d6b7b0235,word-search-,,
63b5985f8ad4593d6b7b0236,palindrome-partitioning-,,
63b598608ad4593d6b7b0237,letter-combinations-of-a-phone-number-,,
63b598618ad4593d6b7b0238,n-queens,,
63b59a8f8ad4593d6b7b0239,number-of-islands,,
63b59a8f8ad4593d6b7b023a,clone-graph,,
63b59a918ad4593d6b7b023b,max-area-of-island,,
63b59a928ad4593d6b7b023c,pacific-atlantic-water-flow,,
63b59a938ad4593d6b7b023d,surrounded-regions,,
63b59a948ad4593d6b7b023e,rotting-oranges,,
63b59a958ad4593d6b7b023f,walls-and-gates,,
63b59a968ad4593d6b7b0240,course-schedule,,
63b59a978ad4593d6b7b0241,course-schedule-ii,,
63b59a988ad4593d6b7b0242,redundant-connection,,
63b59a998ad4593d6b7b0243,number-of-connected-components-in-an-undirected-graph,,
63b59a9b8ad4593d6b7b0244,graph-valid-tree,,
63b59a9c8ad4593d6b7b0245,word-ladder,,
63b59a9d8ad4593d6b7b0246,reconstruct-itinerary,,
63b59a9e8ad4593d6b7b0247,min-cost-to-connect-all-points,,
63b59a9f8ad4593d6b7b0248,network-delay-time,,
63b59aa08ad4593d6b7b0249,swim-in-rising-water,,
63b59aa08ad4593d6b7b024a,alien-dictionary,,
63b59aa18ad4593d6b7b024b,cheapest-flights-within-k-stops,,
63b59aa28ad4593d6b7b024c,valid-parenthesis-string,,
63b59aa38ad4593d6b7b024d,insert-interval,,
63b59aa48ad4593d6b7b024e,merge-intervals,,
63b59aa48ad4593d6b7b024f,non-overlapping-intervals,,
63b59aa58ad4593d6b7b0250,meeting-rooms,,
63b59aa68ad4593d6b7b0251,meeting-rooms-ii,,
63b59aa78ad4593d6b7b0252,minimum-interval-to-include-each-query,,
63b59aa88ad4593d6b7b0253,rotate-image,,
63b59aa88ad4593d6b7b0254,spiral-matrix,,
63b59aa98ad4593d6b7b0255,set-matrix-zeroes,,
63b59aaa8ad4593d6b7b0256,happy-number,,
63b59aab8ad4593d6b7b0257,plus-one,,
63b59aac8ad4593d6b7b0258,powx-n,,
63b59aad8ad4593d6b7b0259,multiply-strings,,
63b59aae8ad4593d6b7b025a,detect-squares,,
63b59aaf8ad4593d6b7b025b,single-number,,
63b59ab08ad4593d6b7b025c,number-of-1-bits,,
63b59ab08ad4593d6b7b025d,counting-bits,,
63b59ab18ad4593d6b7b025e,reverse-bits,,
63b59ab38ad4593d6b7b025f,missing-number,,
63b59ab48ad4593d6b7b0260,sum-of-two-integers,,
63b59ab58ad4593d6b7b0261,reverse-integer,,