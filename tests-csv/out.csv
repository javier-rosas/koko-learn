_id,kebabCaseName,pythonTests,javascriptTests,pythonDataStructures,javascriptDataStructures
63b594e78ad4593d6b7b01cc,contains-duplicate,"params = [
  {
    ""nums"" :  [1,2,3,1],
    ""ret"" : True
  },
  {
    ""nums"" :  [1,2,3,4],
    ""ret"" : False
  },
  {
    ""nums"" :  [1,1,1,3,3,4,3,2,4,2],
    ""ret"" : True
  },
  {
    ""nums"" :  [1,2,3,4,5,6,7,8,9,10],
    ""ret"" : False
  },
  {
    ""nums"" :  [1],
    ""ret"" : False
  },
  {
    ""nums"" :  [],
    ""ret"" : False
  },
  {
    ""nums"" :  [-1,-2,3,4,3,4,5,6,7,8,9,10],
    ""ret"" : True
  },
  {
    ""nums"" :  [-1,0,1,2,3,4,5,6,7,8,9,10],
    ""ret"" : False
  },
  {
    ""nums"" :  [-1,-1,-1,-1,-1,0,1,2,3,4,5,6,7,8],
    ""ret"" : True
  },
  {
    ""nums"" :  [10,20,30,40,50,10],
    ""ret"" : True
  }
]

obj = Solution()

for args in params:
    result = obj.containsDuplicate(args['nums'])
    print(""\u2705 Test Passed."") if result == args['ret'] else print(f""\u274c Test Failed. nums={args['nums']}, expected: {args['ret']}, but got {result}"")","let testCases = [
  {
    ""nums"" :  [1,2,3,1],
    ""ret"" : true
  },
  {
    ""nums"" :  [1,2,3,4],
    ""ret"" : false
  },
  {
    ""nums"" :  [1,1,1,3,3,4,3,2,4,2],
    ""ret"" : true
  },
  {
    ""nums"" :  [1,2,3,4,5,6,7,8,9,10],
    ""ret"" : false
  },
  {
    ""nums"" :  [1],
    ""ret"" : false
  },
  {
    ""nums"" :  [],
    ""ret"" : false
  },
  {
    ""nums"" :  [-1,-2,3,4,3,4,5,6,7,8,9,10],
    ""ret"" : true
  },
  {
    ""nums"" :  [-1,0,1,2,3,4,5,6,7,8,9,10],
    ""ret"" : false
  },
  {
    ""nums"" :  [-1,-1,-1,-1,-1,0,1,2,3,4,5,6,7,8],
    ""ret"" : true
  },
  {
    ""nums"" :  [10,20,30,40,50,10],
    ""ret"" : true
  }
];

testCases.forEach(testCase => {
  if (containsDuplicate(testCase.nums) == testCase.ret) {
    console.log(""\u2705 Test Passed."")
  } else {
    console.log(`\u274c Test Failed. nums=${testCase.nums}, expected: ${testCase.ret}`)
  }
});",,
63b594e88ad4593d6b7b01cd,valid-anagram,"params = [
  {
    ""s"" :  ""anagram"",
    ""t"" : ""nagaram"",
    ""ret"" : True
  },
  {
    ""s"" :  ""rat"",
    ""t"" : ""car"",
    ""ret"" : False
  },
  {
    ""s"" :  ""hello"",
    ""t"" : ""olleh"",
    ""ret"" : True
  },
  {
    ""s"" :  ""a"",
    ""t"" : ""a"",
    ""ret"" : True
  },
  {
    ""s"" :  """",
    ""t"" : """",
    ""ret"" : True
  },
  {
    ""s"" :  ""abcd"",
    ""t"" : ""dcba"",
    ""ret"" : True
  },
  {
    ""s"" :  ""abcdefgh"",
    ""t"" : ""hgfedcba"",
    ""ret"" : True
  },
  {
    ""s"" :  ""abcdefgh"",
    ""t"" : ""hgfedcb"",
    ""ret"" : False
  },
  {
    ""s"" :  ""abcdefghijklmnopqrstuvwxyz"",
    ""t"" : ""zyxwvutsrqponmlkjihgfedcba"",
    ""ret"" : True
  },
  {
    ""s"" :  ""abcdefghijklmnopqrstuvwxyz"",
    ""t"" : ""zyxwvutsrqponmlkjihgfedcb"",
    ""ret"" : False
  }
]

obj = Solution()

for args in params:
    result = obj.isAnagram(args['s'], args['t'])
    print(""\u2705 Test Passed."") if result == args['ret'] else print(f""\u274c Test Failed. s={args['s']}, t={args['t']}, expected: {args['ret']}, but got {result}"")","let testCases = [
  {
    ""s"" :  ""anagram"",
    ""t"" : ""nagaram"",
    ""ret"" : true
  },
  {
    ""s"" :  ""rat"",
    ""t"" : ""car"",
    ""ret"" : false
  },
  {
    ""s"" :  ""hello"",
    ""t"" : ""olleh"",
    ""ret"" : true
  },
  {
    ""s"" :  ""a"",
    ""t"" : ""a"",
    ""ret"" : true
  },
  {
    ""s"" :  """",
    ""t"" : """",
    ""ret"" : true
  },
  {
    ""s"" :  ""abcd"",
    ""t"" : ""dcba"",
    ""ret"" : true
  },
  {
    ""s"" :  ""abcdefgh"",
    ""t"" : ""hgfedcba"",
    ""ret"" : true
  },
  {
    ""s"" :  ""abcdefgh"",
    ""t"" : ""hgfedcb"",
    ""ret"" : false
  },
  {
    ""s"" :  ""abcdefghijklmnopqrstuvwxyz"",
    ""t"" : ""zyxwvutsrqponmlkjihgfedcba"",
    ""ret"" : true
  },
  {
    ""s"" :  ""abcdefghijklmnopqrstuvwxyz"",
    ""t"" : ""zyxwvutsrqponmlkjihgfedcb"",
    ""ret"" : false
  }
];

testCases.forEach(testCase => {
  if (isAnagram(testCase.s, testCase.t) == testCase.ret) {
    console.log(""\u2705 Test Passed."")
  } else {
    console.log(`\u274c Test Failed. s=${testCase.s}, t=${test}`)
  }})",,
63b594e98ad4593d6b7b01ce,two-sum,"params = [
  {
    ""nums"" :  [2, 7, 11, 15],
    ""target"" : 9,
    ""ret"" : [0, 1]
  },
  {
    ""nums"" :  [3, 2, 4],
    ""target"" : 6,
    ""ret"" : [1, 2]
  },
  {
    ""nums"" :  [3, 3],
    ""target"" : 6,
    ""ret"" : [0, 1]
  },
  {
    ""nums"" :  [-1, -2, -3, -4, -5],
    ""target"" : -8,
    ""ret"" : [2, 4]
  },
  {
    ""nums"" :  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""target"" : 15,
    ""ret"" : [6, 7]
  },
  {
    ""nums"" :  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""target"" : 11,
    ""ret"" : [4, 5]
  },
  {
    ""nums"" : [1,9,13,20,47],
    ""target"": 10,
    ""ret"": [0, 1]
  },
  {
    ""nums"": [3,2,4,1,9],
    ""target"": 12,
    ""ret"": [0, 4]
  }
]

obj = Solution()
for args in params:
  res = obj.twoSum(args['nums'], args['target'])
  if res == args['ret']:
      print(""\u2705 Test Passed."")
  else:
      print(f""\u274c Test Failed. nums={args['nums']}, target={args['target']}, expected: {args['ret']} but got {res}"")","const testCases = [
  {
    ""nums"" :  [2, 7, 11, 15],
    ""target"" : 9,
    ""ret"" : [0, 1]
  },
  {
    ""nums"" :  [3, 2, 4],
    ""target"" : 6,
    ""ret"" : [1, 2]
  },
  {
    ""nums"" :  [3, 3],
    ""target"" : 6,
    ""ret"" : [0, 1]
  },
  {
    ""nums"" :  [-1, -2, -3, -4, -5],
    ""target"" : -8,
    ""ret"" : [2, 4]
  },
  {
    ""nums"" :  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""target"" : 15,
    ""ret"" : [4, 5]
  },
  {
    ""nums"" :  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""target"" : 11,
    ""ret"" : [1, 9]
  },
  {
    ""nums"" :  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""target"" : 20,
    ""ret"" : [8, 9]
  },
  {
    ""nums"" :  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""target"" : 21,
    ""ret"" : [0, 9]
  },
  {
    ""nums"" :  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""target"" : 30,
    ""ret"" : [9, 9]
  },
  {
    ""nums"" :  [1],
    ""target"" : 1,
    ""ret"" : [0, 0]
  }
];

for (let args of testCases) {
  if (JSON.stringify(twoSum(args.nums, args.target)) === JSON.stringify(args.ret)) {
    console.log(""\u2705 Test Passed."");
  } else {
    console.log(`\u274c Test Failed. nums=${args.nums}, target=${args.target}, expected=${args.ret}`);
  }
}",,
63b594ea8ad4593d6b7b01cf,group-anagrams,"params = [  
  { 
    ""strs"" : [""eat"",""tea"",""tan"",""ate"",""nat"",""bat""],
    ""ret"" : [[""bat""],[""nat"",""tan""],[""ate"",""eat"",""tea""]]
  },
  {
    ""strs"" : [""a""],
    ""ret"" : [[""a""]]
  },
  {
    ""strs"" : [""a"",""aa"",""aaa"",""aaaa"",""aaaaa"",""aaaaaa""],
    ""ret"" : [[""a""],[""aa""],[""aaa""],[""aaaa""],[""aaaaa""],[""aaaaaa""]]
  },
  {
    ""strs"" : [""a"",""ab"",""abc"",""abcd"",""abcde"",""abcdef""],
    ""ret"" : [['a'], ['ab'], ['abc'], ['abcd'], ['abcde'], ['abcdef']]
  },
  {
    ""strs"" : [""""],
    ""ret"" : [[""""]]
  },
  {
    ""strs"" : [""abc"",""cba"",""cab"",""acb"",""bac"",""bca""],
    ""ret"" : [[""abc"",""cba"",""cab"",""acb"",""bac"",""bca""]]
  },
  {
    ""strs"" : [""abc"",""cba"",""cab"",""acb"",""bac"",""bca"",""xyz""],
    ""ret"" : [[""abc"",""cba"",""cab"",""acb"",""bac"",""bca""],[""xyz""]]
  },
  {
    ""strs"" : [""abc"",""cba"",""cab"",""acb"",""bac"",""bca"",""xyz"",""zyx""],
    ""ret"" : [[""abc"",""cba"",""cab"",""acb"",""bac"",""bca""],[""xyz"",""zyx""]]
  },
  {
    ""strs"" : ["""",""a"",""aa"",""aaa""],
    ""ret"" : [[''], ['a'], ['aa'], ['aaa']]
  },
  {
    ""strs"" : ["""",""a"",""aa"",""aaa"",""ab"",""ba"",""aba"",""aab"",""baa"",""aab""],
    ""ret"" : [[''], ['a'], ['aa'], ['aaa'], ['ab', 'ba'], ['aba', 'aab', 'baa', 'aab']]
  },
  {
    ""strs"" : ["""",""a"",""aa"",""aaa"",""ab"",""ba"",""aba"",""aab"",""baa"",""aab"",""abc"",""cba"",""cab"",""acb"",""bac"",""bca"",""xyz"",""zyx""],
    ""ret"" : [[''], ['a'], ['aa'], ['aaa'], ['ab', 'ba'], ['aba', 'aab', 'baa', 'aab'], ['abc', 'cba', 'cab', 'acb', 'bac', 'bca'], ['xyz', 'zyx']]
  },
  {
    ""strs"" : ["""",""a"",""aa"",""aaa"",""ab"",""ba"",""aba"",""aab"",""baa"",""aab"",""abc"",""cba"",""cab"",""acb"",""bac"",""bca"",""xyz"",""zyx"",""aaaa"",""aaa"",""aaa"",""aaaa"",""aaa"",""aaaa"",""aaaa"",""aaa"",""aaa"",""aaa"",""aaaa""],
    ""ret"" : [[''], ['a'], ['aa'], ['aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa'], ['ab', 'ba'], ['aba', 'aab', 'baa', 'aab'], ['abc', 'cba', 'cab', 'acb', 'bac', 'bca'], ['xyz', 'zyx'], ['aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa']]
  }
]

obj = Solution()

for args in params:
  res = obj.groupAnagrams(args['strs'])
  args_ret = args['ret']
  
  def compare(lst1, lst2):
    # Sort the strings in each nested list
    lst1 = [sorted(sublist) for sublist in lst1]
    lst2 = [sorted(sublist) for sublist in lst2]
    # Sort the nested lists
    lst1.sort()
    lst2.sort()
    # Compare the two lists
    return lst1 == lst2


  print(""\u2705 Test Passed."") if compare(res, args_ret) else print(f""\u274c Test Failed. strs={args['strs']}, expected: {args_ret} but got {res}"")","let params = [  
  { 
    ""strs"" : [""eat"",""tea"",""tan"",""ate"",""nat"",""bat""],
    ""ret"" : [[""bat""],[""nat"",""tan""],[""ate"",""eat"",""tea""]]
  },
  {
    ""strs"" : [""a""],
    ""ret"" : [[""a""]]
  },
  {
    ""strs"" : [""a"",""aa"",""aaa"",""aaaa"",""aaaaa"",""aaaaaa""],
    ""ret"" : [[""a""],[""aa""],[""aaa""],[""aaaa""],[""aaaaa""],[""aaaaaa""]]
  },
  {
    ""strs"" : [""a"",""ab"",""abc"",""abcd"",""abcde"",""abcdef""],
    ""ret"" : [['a'], ['ab'], ['abc'], ['abcd'], ['abcde'], ['abcdef']]
  },
  {
    ""strs"" : [""""],
    ""ret"" : [[""""]]
  },
  {
    ""strs"" : [""abc"",""cba"",""cab"",""acb"",""bac"",""bca""],
    ""ret"" : [[""abc"",""cba"",""cab"",""acb"",""bac"",""bca""]]
  },
  {
    ""strs"" : [""abc"",""cba"",""cab"",""acb"",""bac"",""bca"",""xyz""],
    ""ret"" : [[""abc"",""cba"",""cab"",""acb"",""bac"",""bca""],[""xyz""]]
  },
  {
    ""strs"" : [""abc"",""cba"",""cab"",""acb"",""bac"",""bca"",""xyz"",""zyx""],
    ""ret"" : [[""abc"",""cba"",""cab"",""acb"",""bac"",""bca""],[""xyz"",""zyx""]]
  },
  {
    ""strs"" : ["""",""a"",""aa"",""aaa""],
    ""ret"" : [[''], ['a'], ['aa'], ['aaa']]
  },
  {
    ""strs"" : ["""",""a"",""aa"",""aaa"",""ab"",""ba"",""aba"",""aab"",""baa"",""aab""],
    ""ret"" : [[''], ['a'], ['aa'], ['aaa'], ['ab', 'ba'], ['aba', 'aab', 'baa', 'aab']]
  },
  {
    ""strs"" : ["""",""a"",""aa"",""aaa"",""ab"",""ba"",""aba"",""aab"",""baa"",""aab"",""abc"",""cba"",""cab"",""acb"",""bac"",""bca"",""xyz"",""zyx""],
    ""ret"" : [[''], ['a'], ['aa'], ['aaa'], ['ab', 'ba'], ['aba', 'aab', 'baa', 'aab'], ['abc', 'cba', 'cab', 'acb', 'bac', 'bca'], ['xyz', 'zyx']]
  },
  {
    ""strs"" : ["""",""a"",""aa"",""aaa"",""ab"",""ba"",""aba"",""aab"",""baa"",""aab"",""abc"",""cba"",""cab"",""acb"",""bac"",""bca"",""xyz"",""zyx"",""aaaa"",""aaa"",""aaa"",""aaaa"",""aaa"",""aaaa"",""aaaa"",""aaa"",""aaa"",""aaa"",""aaaa""],
    ""ret"" : [[''], ['a'], ['aa'], ['aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa'], ['ab', 'ba'], ['aba', 'aab', 'baa', 'aab'], ['abc', 'cba', 'cab', 'acb', 'bac', 'bca'], ['xyz', 'zyx'], ['aaaa', 'aaaa', 'aaaa', 'aaaa', 'aaaa']]
  }
]

function compare(lst1, lst2) {
  // Sort the strings in each nested list
  lst1 = lst1.map(sublist => sublist.sort());
  lst2 = lst2.map(sublist => sublist.sort());
  // Sort the nested lists
  lst1.sort();
  lst2.sort();
  // Compare the two lists
  return JSON.stringify(lst1) === JSON.stringify(lst2);
}

for (let args of params) {
  let res = groupAnagrams(args.strs);
  let args_ret = args.ret;

  console.log(compare(res, args_ret) ? ""\u2705 Test Passed."" : `\u274c Test Failed. strs=${args.strs}, expected: ${args_ret} but got ${res}`);
}",,
63b594eb8ad4593d6b7b01d0,top-k-frequent-elements,"params = [
  {
    ""nums"" : [1,1,1,2,2,3],
    ""k"" : 2,
    ""ret"" : [1,2]
  },
  {
    ""nums"" : [1],
    ""k"" : 1,
    ""ret"" : [1]
  },
  {
    ""nums"" : [1,2,2,2,3,3,3],
    ""k"" : 2,
    ""ret"" : [2,3]
  },
  {
    ""nums"" : [1,1,1,2,2,3,3,3,4,4,4,4],
    ""k"" : 3,
    ""ret"" : [4,1,3]
  },
  {
    ""nums"" : [1,1,1,2,2,3,3,3,4,4,4,4],
    ""k"" : 4,
    ""ret"" : [4,1,3,2]
  },
  {
    ""nums"" : [1,1,1,2,2,3,3,3,4,4,4,4],
    ""k"" : 5,
    ""ret"" : [4,1,3,2]
  },
  {
    ""nums"" : [1,1,1,2,2,3,3,3,4,4,4,4],
    ""k"" : 1,
    ""ret"" : [4]
  },
  {
    ""nums"" : [1,1,1,2,2,3,3,3,4,4,4,4],
    ""k"" : 6,
    ""ret"" : [4,1,3,2]
  },
  {
    ""nums"" : [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5],
    ""k"" : 4,
    ""ret"" : [1,2,3,4]
  },
  {
    ""nums"" : [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6],
    ""k"" : 6,
    ""ret"" : [1,2,3,4,5,6]
  }
]
obj = Solution()
for args in params:
    print(""\u2705 Test Passed."") if obj.topKFrequent(args['nums'], args['k']) == args['ret'] else print(f""\u274c Test Failed. nums={args['nums']}, k={args['k']}, expected: {args['ret']}"")","let params = [
  {
    ""nums"" : [1,1,1,2,2,3],
    ""k"" : 2,
    ""ret"" : [1,2]
  },
  {
    ""nums"" : [1],
    ""k"" : 1,
    ""ret"" : [1]
  },
  {
    ""nums"" : [1,2,2,2,3,3,3],
    ""k"" : 2,
    ""ret"" : [2,3]
  },
  {
    ""nums"" : [1,1,1,2,2,3,3,3,4,4,4,4],
    ""k"" : 3,
    ""ret"" : [4,1,3]
  },
  {
    ""nums"" : [1,1,1,2,2,3,3,3,4,4,4,4],
    ""k"" : 4,
    ""ret"" : [4,1,3,2]
  },
  {
    ""nums"" : [1,1,1,2,2,3,3,3,4,4,4,4],
    ""k"" : 5,
    ""ret"" : [4,1,3,2]
  },
  {
    ""nums"" : [1,1,1,2,2,3,3,3,4,4,4,4],
    ""k"" : 1,
    ""ret"" : [4]
  },
  {
    ""nums"" : [1,1,1,2,2,3,3,3,4,4,4,4],
    ""k"" : 6,
    ""ret"" : [4,1,3,2]
  },
  {
    ""nums"" : [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5],
    ""k"" : 4,
    ""ret"" : [1,2,3,4]
  },
  {
    ""nums"" : [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6],
    ""k"" : 6,
    ""ret"" : [1,2,3,4,5,6]
  }
]

for (let args of params) {
  if (JSON.stringify(topKFrequent(args.nums, args.k)) === JSON.stringify(args.ret)) {
      console.log(""\u2705 Test Passed."")
  } else {
      console.log(`\u274c Test Failed. nums=${args.nums}, k=${args.k}, expected: ${args.ret}`)
  }
}",,
63b594eb8ad4593d6b7b01d1,product-of-array-except-self,"params = [
  {
    ""nums"" : [1,2,3,4],
    ""ret"" : [24,12,8,6]
  },
  {
    ""nums"" : [-1,1,0,-3,3],
    ""ret"" : [0,0,9,0,0]
  },
  {
    ""nums"" : [1,2,3,4,5],
    ""ret"" : [120,60,40,30,24]
  },
  {
    ""nums"" : [-1,0,1],
    ""ret"" : [0, -1, 0]
  },
  {
    ""nums"" : [1,1,1,1],
    ""ret"" : [1,1,1,1]
  },
  {
    ""nums"" : [1,2,3],
    ""ret"" : [6,3,2]
  },
  {
    ""nums"" : [-1,-2,-3],
    ""ret"" : [6, 3, 2]
  },
  {
    ""nums"" : [0,1,2],
    ""ret"" : [2,0,0]
  },
  {
    ""nums"" : [1,1,2,2],
    ""ret"" : [4,4,2,2]
  },
  {
    ""nums"" : [1,2,3,4,5,6],
    ""ret"" : [720,360,240,180,144,120]
  }
]

obj = Solution()
for args in params:
  result = obj.productExceptSelf(args[""nums""])
  print(""\u2705 Test Passed."") if result == args[""ret""] else print(f""\u274c Test Failed. nums={args['nums']}, expected: {args['ret']} but got {result}"")","let params = [
  {
    ""nums"" : [1,2,3,4],
    ""ret"" : [24,12,8,6]
  },
  {
    ""nums"" : [-1,1,0,-3,3],
    ""ret"" : [0,0,9,0,0]
  },
  {
    ""nums"" : [1,2,3,4,5],
    ""ret"" : [120,60,40,30,24]
  },
  {
    ""nums"" : [-1,0,1],
    ""ret"" : [0, -1, 0]
  },
  {
    ""nums"" : [1,1,1,1],
    ""ret"" : [1,1,1,1]
  },
  {
    ""nums"" : [1,2,3],
    ""ret"" : [6,3,2]
  },
  {
    ""nums"" : [-1,-2,-3],
    ""ret"" : [6, 3, 2]
  },
  {
    ""nums"" : [0,1,2],
    ""ret"" : [2,0,0]
  },
  {
    ""nums"" : [1,1,2,2],
    ""ret"" : [4,4,2,2]
  },
  {
    ""nums"" : [1,2,3,4,5,6],
    ""ret"" : [720,360,240,180,144,120]
  }
]

params.forEach(args => {
  if (JSON.stringify(productExceptSelf(args.nums)) === JSON.stringify(args.ret)) console.log(""\u2705 Test Passed."")
  else console.log(`\u274c Test Failed. nums=${args.nums}, expected: ${args.ret}`)
})",,
63b594ec8ad4593d6b7b01d2,valid-sudoku,"params = [    
    {       
      ""board"": [[""5"",""3"",""."",""."",""7"",""."",""."",""."","".""],
                [""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],
                [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],
                [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],
                [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],
                [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],
                [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],
                [""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],
                [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]],
      ""ret"": True
    },
    {
      ""board"": [[""8"",""3"",""."",""."",""7"",""."",""."",""."","".""],
                [""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],
                [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],
                [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],
                [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],
                [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],
                [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],
                [""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],
                [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]],
      ""ret"": False
    },
    {
      ""board"": [[""."",""."",""."",""."",""5"",""."",""."",""1"","".""],
                [""."",""4"",""."",""3"",""."",""."",""."",""."","".""],
                [""."",""."",""."",""."",""."",""3"",""."",""."",""1""],
                [""8"",""."",""."",""."",""."",""."",""."",""2"","".""],
                [""."",""."",""2"",""."",""7"",""."",""."",""."","".""],
                [""."",""1"",""5"",""."",""."",""."",""."",""."","".""],
                [""."",""."",""."",""."",""."",""2"",""."",""."","".""],
                [""."",""2"",""."",""9"",""."",""."",""."",""."","".""],
                [""."",""."",""4"",""."",""."",""."",""."",""."","".""]],
      ""ret"": False
    },
    {
      ""board"": [[""5"",""3"",""."",""."",""7"",""."",""."",""."",""5""],
                [""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],
                [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],
                [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],
                [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],
                [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],
                [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],
                [""."",""."",""."",""4"",""1"",""9"",""."",""."","".""],
                [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]],
      ""ret"" : False
    },
    {
      ""board"": [[""5"",""3"",""4"",""6"",""7"",""8"",""9"",""1"",""2""]
              ,[""6"",""7"",""2"",""1"",""9"",""5"",""3"",""4"",""8""]
              ,[""1"",""9"",""8"",""3"",""4"",""2"",""5"",""6"",""7""]
              ,[""8"",""5"",""9"",""7"",""6"",""1"",""4"",""2"",""3""]
              ,[""4"",""2"",""6"",""8"",""5"",""3"",""7"",""9"",""1""]
              ,[""7"",""1"",""3"",""9"",""2"",""4"",""8"",""5"",""6""]
              ,[""9"",""6"",""1"",""5"",""3"",""7"",""2"",""8"",""4""]
              ,[""2"",""8"",""7"",""4"",""1"",""9"",""6"",""3"",""5""]
              ,[""3"",""4"",""5"",""2"",""8"",""6"",""1"",""7"",""9""]],
      ""ret"" : True
    },
    {
      ""board"":  [[""7"",""8"",""1"",""4"",""6"",""2"",""5"",""9"",""3""]
                ,[""2"",""4"",""3"",""5"",""9"",""7"",""1"",""6"",""8""]
                ,[""5"",""6"",""9"",""8"",""1"",""3"",""7"",""2"",""4""]
                ,[""8"",""2"",""5"",""1"",""7"",""9"",""3"",""4"",""6""]
                ,[""1"",""9"",""7"",""3"",""4"",""6"",""8"",""5"",""2""]
                ,[""3"",""7"",""4"",""2"",""5"",""8"",""9"",""1"",""6""]
                ,[""9"",""1"",""2"",""6"",""3"",""5"",""4"",""8"",""7""]
                ,[""6"",""5"",""8"",""7"",""2"",""1"",""9"",""3"",""5""]
                ,[""4"",""3"",""6"",""9"",""8"",""7"",""2"",""5"",""1""]],
      ""ret"": False
    },
    {
     ""board"": [[""5"",""3"",""9"",""6"",""7"",""4"",""8"",""2"",""1""]
              ,[""6"",""7"",""2"",""1"",""9"",""5"",""3"",""4"",""8""]
              ,[""1"",""9"",""8"",""3"",""4"",""2"",""5"",""6"",""7""]
              ,[""8"",""5"",""9"",""7"",""6"",""1"",""4"",""3"",""2""]
              ,[""4"",""2"",""6"",""8"",""5"",""3"",""7"",""9"",""1""]
              ,[""7"",""1"",""3"",""9"",""2"",""8"",""6"",""5"",""4""]
              ,[""9"",""6"",""1"",""5"",""3"",""7"",""2"",""8"",""3""]
              ,[""2"",""8"",""7"",""4"",""1"",""9"",""6"",""3"",""5""]
              ,[""3"",""4"",""5"",""2"",""8"",""6"",""1"",""7"",""9""]],
    ""ret"": False
    },
    {
      ""board"": [[""."",""4"",""9"",""."",""7"",""."",""."",""."",""1""],
                [""6"",""."",""."",""2"",""9"",""5"",""."",""."","".""],
                [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],
                [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],
                [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],
                [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],
                [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],
                [""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],
                [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]],
      ""ret"": False
    },
    {
      ""board"": [[""."",""4"",""."",""8"",""5"",""."",""."",""1"","".""],
                [""."",""."",""."",""."",""."",""9"",""."",""."",""4""],
                [""."",""."",""5"",""."",""1"",""."",""3"",""."","".""],
                [""."",""9"",""."",""."",""."",""."",""."",""."",""7""],
                [""1"",""."",""."",""."",""."",""."",""."",""."",""5""],
                [""8"",""."",""."",""."",""."",""."",""."",""4"","".""],
                [""."",""."",""3"",""."",""6"",""."",""5"",""."","".""],
                [""5"",""."",""."",""9"",""."",""."",""."",""."","".""],
                [""."",""2"",""."",""."",""8"",""."",""."",""7"","".""]],
      ""ret"": True
    },
    {
      ""board"": [[""5"",""3"",""."",""."",""7"",""."",""."",""."","".""],
                [""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],
                [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],
                [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],
                [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],
                [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],
                [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],
                [""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],
                [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]],
      ""ret"": True
    }
]

obj = Solution()

for args in params:
  result = obj.isValidSudoku(args['board'])
  print(""\u2705 Test Passed."") if result == args['ret'] else print(f""\u274c Test Failed. board={args['board']}, expected: {args['ret']} but got {result}"")","let params = [    
  {       
    ""board"": [[""5"",""3"",""."",""."",""7"",""."",""."",""."","".""],
              [""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],
              [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],
              [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],
              [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],
              [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],
              [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],
              [""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],
              [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]],
    ""ret"": true
  },
  {
    ""board"": [[""8"",""3"",""."",""."",""7"",""."",""."",""."","".""],
              [""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],
              [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],
              [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],
              [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],
              [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],
              [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],
              [""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],
              [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]],
    ""ret"": false
  },
  {
    ""board"": [[""."",""."",""."",""."",""5"",""."",""."",""1"","".""],
              [""."",""4"",""."",""3"",""."",""."",""."",""."","".""],
              [""."",""."",""."",""."",""."",""3"",""."",""."",""1""],
              [""8"",""."",""."",""."",""."",""."",""."",""2"","".""],
              [""."",""."",""2"",""."",""7"",""."",""."",""."","".""],
              [""."",""1"",""5"",""."",""."",""."",""."",""."","".""],
              [""."",""."",""."",""."",""."",""2"",""."",""."","".""],
              [""."",""2"",""."",""9"",""."",""."",""."",""."","".""],
              [""."",""."",""4"",""."",""."",""."",""."",""."","".""]],
    ""ret"": false
  },
  {
    ""board"": [[""5"",""3"",""."",""."",""7"",""."",""."",""."",""5""],
              [""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],
              [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],
              [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],
              [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],
              [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],
              [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],
              [""."",""."",""."",""4"",""1"",""9"",""."",""."","".""],
              [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]],
    ""ret"" : false
  },
  {
    ""board"": [[""5"",""3"",""4"",""6"",""7"",""8"",""9"",""1"",""2""]
            ,[""6"",""7"",""2"",""1"",""9"",""5"",""3"",""4"",""8""]
            ,[""1"",""9"",""8"",""3"",""4"",""2"",""5"",""6"",""7""]
            ,[""8"",""5"",""9"",""7"",""6"",""1"",""4"",""2"",""3""]
            ,[""4"",""2"",""6"",""8"",""5"",""3"",""7"",""9"",""1""]
            ,[""7"",""1"",""3"",""9"",""2"",""4"",""8"",""5"",""6""]
            ,[""9"",""6"",""1"",""5"",""3"",""7"",""2"",""8"",""4""]
            ,[""2"",""8"",""7"",""4"",""1"",""9"",""6"",""3"",""5""]
            ,[""3"",""4"",""5"",""2"",""8"",""6"",""1"",""7"",""9""]],
    ""ret"" : true
  },
  {
    ""board"":  [[""7"",""8"",""1"",""4"",""6"",""2"",""5"",""9"",""3""]
              ,[""2"",""4"",""3"",""5"",""9"",""7"",""1"",""6"",""8""]
              ,[""5"",""6"",""9"",""8"",""1"",""3"",""7"",""2"",""4""]
              ,[""8"",""2"",""5"",""1"",""7"",""9"",""3"",""4"",""6""]
              ,[""1"",""9"",""7"",""3"",""4"",""6"",""8"",""5"",""2""]
              ,[""3"",""7"",""4"",""2"",""5"",""8"",""9"",""1"",""6""]
              ,[""9"",""1"",""2"",""6"",""3"",""5"",""4"",""8"",""7""]
              ,[""6"",""5"",""8"",""7"",""2"",""1"",""9"",""3"",""5""]
              ,[""4"",""3"",""6"",""9"",""8"",""7"",""2"",""5"",""1""]],
    ""ret"": false
  },
  {
   ""board"": [[""5"",""3"",""9"",""6"",""7"",""4"",""8"",""2"",""1""]
            ,[""6"",""7"",""2"",""1"",""9"",""5"",""3"",""4"",""8""]
            ,[""1"",""9"",""8"",""3"",""4"",""2"",""5"",""6"",""7""]
            ,[""8"",""5"",""9"",""7"",""6"",""1"",""4"",""3"",""2""]
            ,[""4"",""2"",""6"",""8"",""5"",""3"",""7"",""9"",""1""]
            ,[""7"",""1"",""3"",""9"",""2"",""8"",""6"",""5"",""4""]
            ,[""9"",""6"",""1"",""5"",""3"",""7"",""2"",""8"",""3""]
            ,[""2"",""8"",""7"",""4"",""1"",""9"",""6"",""3"",""5""]
            ,[""3"",""4"",""5"",""2"",""8"",""6"",""1"",""7"",""9""]],
  ""ret"": false
  },
  {
    ""board"": [[""."",""4"",""9"",""."",""7"",""."",""."",""."",""1""],
              [""6"",""."",""."",""2"",""9"",""5"",""."",""."","".""],
              [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],
              [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],
              [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],
              [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],
              [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],
              [""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],
              [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]],
    ""ret"": false
  },
  {
    ""board"": [[""."",""4"",""."",""8"",""5"",""."",""."",""1"","".""],
              [""."",""."",""."",""."",""."",""9"",""."",""."",""4""],
              [""."",""."",""5"",""."",""1"",""."",""3"",""."","".""],
              [""."",""9"",""."",""."",""."",""."",""."",""."",""7""],
              [""1"",""."",""."",""."",""."",""."",""."",""."",""5""],
              [""8"",""."",""."",""."",""."",""."",""."",""4"","".""],
              [""."",""."",""3"",""."",""6"",""."",""5"",""."","".""],
              [""5"",""."",""."",""9"",""."",""."",""."",""."","".""],
              [""."",""2"",""."",""."",""8"",""."",""."",""7"","".""]],
    ""ret"": true
  },
  {
    ""board"": [[""5"",""3"",""."",""."",""7"",""."",""."",""."","".""],
              [""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],
              [""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],
              [""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],
              [""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],
              [""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],
              [""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],
              [""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],
              [""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]],
    ""ret"": true
  }
]

for (let args of params) {
  let result = isValidSudoku(args.board);
  console.log(result === args.ret ? ""\u2705 Test Passed."" : `\u274c Test Failed. board=${args.board}, expected: ${args.ret} but got ${result}`);
}",,
63b594ed8ad4593d6b7b01d3,encode-and-decode-strings,"params = [
    {
        ""strs"": [""lint"", ""code"", ""love"", ""you""],
        ""encoded"": ""lint:;code:;love:;you"",
        ""ret"": [""lint"", ""code"", ""love"", ""you""]
    },
    {
        ""strs"": [""we"", ""say"", "":"", ""yes""],
        ""encoded"": ""we:;say:;:::;yes"",
        ""ret"": [""we"", ""say"", "":"", ""yes""]
    },
    {
        ""strs"": [""hello"", ""world""],
        ""encoded"": ""hello:;world"",
        ""ret"": [""hello"", ""world""]
    },
    {
        ""strs"": [""a"", ""b"", ""c"", ""d"", ""e""],
        ""encoded"": ""a:;b:;c:;d:;e"",
        ""ret"": [""a"", ""b"", ""c"", ""d"", ""e""]
    },
    {
        ""strs"": [""apple"", ""banana"", ""cherry"", ""date""],
        ""encoded"": ""apple:;banana:;cherry:;date"",
        ""ret"": [""apple"", ""banana"", ""cherry"", ""date""]
    },
    {
        ""strs"": [""abc"", ""def"", ""ghi"", ""jkl"", ""mno"", ""pqr"", ""stu"", ""vw"", ""xyz""],
        ""encoded"": ""abc:;def:;ghi:;jkl:;mno:;pqr:;stu:;vw:;xyz"",
        ""ret"": [""abc"", ""def"", ""ghi"", ""jkl"", ""mno"", ""pqr"", ""stu"", ""vw"", ""xyz""]
    },
    {
        ""strs"": [""cat"", ""dog"", ""bird"", ""fish"", ""lion""],
        ""encoded"": ""cat:;dog:;bird:;fish:;lion"",
        ""ret"": [""cat"", ""dog"", ""bird"", ""fish"", ""lion""]
    },
    {
        ""strs"": [],
        ""encoded"": """",
        ""ret"": []
    },
    {
        ""strs"": ["""", """", """", """"],
        ""encoded"": "":::"",
        ""ret"": ["""", """", """", """"]
    }
]

obj = Solution()
for args in params:
  encoded_str = obj.encode(args['strs'])
  decoded_strs = obj.decode(encoded_str)
  print(""\u2705 Test Passed."") if decoded_strs == args['ret'] else print(f""\u274c Test Failed. Input: {args['strs']}, expected: {args['ret']} but got {decoded_strs}"")","let params = [
  {
      ""strs"": [""lint"", ""code"", ""love"", ""you""],
      ""encoded"": ""lint:;code:;love:;you"",
      ""ret"": [""lint"", ""code"", ""love"", ""you""]
  },
  {
      ""strs"": [""we"", ""say"", "":"", ""yes""],
      ""encoded"": ""we:;say:;:::;yes"",
      ""ret"": [""we"", ""say"", "":"", ""yes""]
  },
  {
      ""strs"": [""hello"", ""world""],
      ""encoded"": ""hello:;world"",
      ""ret"": [""hello"", ""world""]
  },
  {
      ""strs"": [""a"", ""b"", ""c"", ""d"", ""e""],
      ""encoded"": ""a:;b:;c:;d:;e"",
      ""ret"": [""a"", ""b"", ""c"", ""d"", ""e""]
  },
  {
      ""strs"": [""apple"", ""banana"", ""cherry"", ""date""],
      ""encoded"": ""apple:;banana:;cherry:;date"",
      ""ret"": [""apple"", ""banana"", ""cherry"", ""date""]
  },
  {
      ""strs"": [""abc"", ""def"", ""ghi"", ""jkl"", ""mno"", ""pqr"", ""stu"", ""vw"", ""xyz""],
      ""encoded"": ""abc:;def:;ghi:;jkl:;mno:;pqr:;stu:;vw:;xyz"",
      ""ret"": [""abc"", ""def"", ""ghi"", ""jkl"", ""mno"", ""pqr"", ""stu"", ""vw"", ""xyz""]
  },
  {
      ""strs"": [""cat"", ""dog"", ""bird"", ""fish"", ""lion""],
      ""encoded"": ""cat:;dog:;bird:;fish:;lion"",
      ""ret"": [""cat"", ""dog"", ""bird"", ""fish"", ""lion""]
  },
  {
      ""strs"": [],
      ""encoded"": """",
      ""ret"": []
  },
  {
      ""strs"": ["""", """", """", """"],
      ""encoded"": "":::"",
      ""ret"": ["""", """", """", """"]
  }
]

for (let args of params) {
  let encoded_str = encode(args.strs);
  let decoded_strs = decode(encoded_str);
  console.log(decoded_strs === args.ret ? ""\u2705 Test Passed."" : `\u274c Test Failed. Input: ${args.strs}, expected: ${args.ret} but got ${decoded_strs}`);
}",,
63b594ee8ad4593d6b7b01d4,longest-consecutive-sequence,"params = [
    {
        ""nums"": [100,4,200,1,3,2],
        ""ret"": 4
    },
    {
        ""nums"": [0,3,7,2,5,8,4,6,0,1],
        ""ret"": 9
    },
    {
        ""nums"": [],
        ""ret"": 0
    },
    {
        ""nums"": [1],
        ""ret"": 1
    },
    {
        ""nums"": [1,1,1,1,1],
        ""ret"": 1
    },
    {
        ""nums"": [1,2,1,2,1,2],
        ""ret"": 2
    },
    {
        ""nums"": [-1, 0, 1],
        ""ret"": 3
    },
    {
        ""nums"": [1,2,0,1],
        ""ret"": 3
    },
    {
        ""nums"": [9,1,4,7,3,-1,0,5,8,-2,6],
        ""ret"": 7
    },
    {
        ""nums"": [1,3,5,2,4],
        ""ret"": 5
    },
]

obj = Solution()
for args in params:
  result = obj.longestConsecutive(args['nums'])
  print(""\u2705 Test Passed."") if result == args['ret'] else print(f""\u274c Test Failed. Input: {args['nums']}, expected: {args['ret']} but got {result}"")","let params = [
  {
      ""nums"": [100,4,200,1,3,2],
      ""ret"": 4
  },
  {
      ""nums"": [0,3,7,2,5,8,4,6,0,1],
      ""ret"": 9
  },
  {
      ""nums"": [],
      ""ret"": 0
  },
  {
      ""nums"": [1],
      ""ret"": 1
  },
  {
      ""nums"": [1,1,1,1,1],
      ""ret"": 1
  },
  {
      ""nums"": [1,2,1,2,1,2],
      ""ret"": 2
  },
  {
      ""nums"": [-1, 0, 1],
      ""ret"": 3
  },
  {
      ""nums"": [1,2,0,1],
      ""ret"": 3
  },
  {
      ""nums"": [9,1,4,7,3,-1,0,5,8,-2,6],
      ""ret"": 7
  },
  {
      ""nums"": [1,3,5,2,4],
      ""ret"": 5
  },
]

for (let args of params) {
  let result = longestConsecutive(args.nums);
  console.log(result === args.ret ? ""\u2705 Test Passed."" : `\u274c Test Failed. Input: ${args.nums}, expected: ${args.ret} but got ${result}`);
}",,
63b594ef8ad4593d6b7b01d5,valid-palindrome,"params = [
    {
        ""s"": ""A man, a plan, a canal: Panama"",
        ""ret"": True
    },
    {
        ""s"": ""race a car"",
        ""ret"": False
    },
    {
        ""s"": "" "",
        ""ret"": True
    },
    {
        ""s"": """",
        ""ret"": True
    },
    {
        ""s"": ""!@#$%^&*()_+"",
        ""ret"": True
    },
    {
        ""s"": ""121"",
        ""ret"": True
    },
    {
        ""s"": ""ab_a"",
        ""ret"": True
    },
    {
        ""s"" : ""This is a test sentence!"",
        ""ret"" : False
    },
    {
        ""s"": ""A man, a plan, a canal: Panama!"",
        ""ret"": True
    },

]
obj = Solution()
for args in params:
  print(""_ Test Passed."") if obj.isPalindrome(args['s']) == args['ret'] else print(f""_ Test Failed. Input: {args['s']}, expected: {args['ret']}"")","let params = [
  {
      ""s"": ""A man, a plan, a canal: Panama"",
      ""ret"": True
  },
  {
      ""s"": ""race a car"",
      ""ret"": False
  },
  {
      ""s"": "" "",
      ""ret"": True
  },
  {
      ""s"": """",
      ""ret"": True
  },
  {
      ""s"": ""!@#$%^&*()_+"",
      ""ret"": True
  },
  {
      ""s"": ""121"",
      ""ret"": True
  },
  {
      ""s"": ""ab_a"",
      ""ret"": True
  },
  {
      ""s"" : ""This is a test sentence!"",
      ""ret"" : False
  },
  {
      ""s"": ""A man, a plan, a canal: Panama!"",
      ""ret"": True
  },
]

for (let i = 0; i < params.length; i++) {
  let args = params[i];
  console.log(isPalindrome(args['s']) === args['ret'] ? ""\u2705 Test Passed."" : `\u274c Test Failed. Input: ${args['s']}, expected: ${args['ret']}`);
}",,
63b594f68ad4593d6b7b01d6,two-sum-ii-input-array-is-sorted,"params = [
    {
        ""numbers"": [1, 2, 3, 4, 5],
        ""target"": 5,
        ""ret"": [1, 4]
    },
    {
        ""numbers"": [1, 2, 3, 4, 5],
        ""target"": 6,
        ""ret"": [1, 5]
    },
    {
        ""numbers"": [1, 2, 3, 4, 5, 6],
        ""target"": 7,
        ""ret"": [1, 6]
    },
    {
        ""numbers"": [1, 2, 3, 4, 5, 6],
        ""target"": 8,
        ""ret"": [2, 6]
    },
    {
        ""numbers"": [1, 2, 3, 4, 5, 6],
        ""target"": 9,
        ""ret"": [3, 6]
    },
    {
        ""numbers"": [1, 2, 3, 4, 5, 6],
        ""target"": 10,
        ""ret"": [4, 6]
    },
    {
        ""numbers"": [1, 2, 3, 4, 5, 6],
        ""target"": 11,
        ""ret"": [5, 6]
    },
    {
      ""numbers"": [2,7,11,15],
      ""target"": 9,
      ""ret"": [1,2]
    },
    {
    ""numbers"": [2,3,4],
    ""target"": 6,
    ""ret"": [1,3]
    },
    {
      ""numbers"": [-1,0],
      ""target"": -1,
      ""ret"": [1,2]
    }
]

from typing import List
class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        l, r = 0, len(numbers) - 1

        while l < r:
            curSum = numbers[l] + numbers[r]

            if curSum > target:
                r -= 1
            elif curSum < target:
                l += 1
            else:
                return [l + 1, r + 1]


obj = Solution()
for args in params:
    ret = obj.twoSum(args['numbers'], args['target'])
    print(""\u2705 Test Passed."") if ret == args['ret'] else print(f""\u274c Test Failed. Input: {args['numbers']}, {args['target']}, expected: {args['ret']} but got {ret}"")","let params = [
    {
        ""numbers"": [1, 2, 3, 4, 5],
        ""target"": 5,
        ""ret"": [1, 4]
    },
    {
        ""numbers"": [1, 2, 3, 4, 5],
        ""target"": 6,
        ""ret"": [1, 5]
    },
    {
        ""numbers"": [1, 2, 3, 4, 5, 6],
        ""target"": 7,
        ""ret"": [1, 6]
    },
    {
        ""numbers"": [1, 2, 3, 4, 5, 6],
        ""target"": 8,
        ""ret"": [2, 6]
    },
    {
        ""numbers"": [1, 2, 3, 4, 5, 6],
        ""target"": 9,
        ""ret"": [3, 6]
    },
    {
        ""numbers"": [1, 2, 3, 4, 5, 6],
        ""target"": 10,
        ""ret"": [4, 6]
    },
    {
        ""numbers"": [1, 2, 3, 4, 5, 6],
        ""target"": 11,
        ""ret"": [5, 6]
    },
    {
      ""numbers"": [2,7,11,15],
      ""target"": 9,
      ""ret"": [1,2]
    },
    {
    ""numbers"": [2,3,4],
    ""target"": 6,
    ""ret"": [1,3]
    },
    {
      ""numbers"": [-1,0],
      ""target"": -1,
      ""ret"": [1,2]
    }
]
  
for (let i = 0; i < params.length; i++) {
    let args = params[i];
    const ret = twoSum(args['numbers'], args['target'])
    console.log(JSON.stringify(ret) === JSON.stringify(args['ret']) ? '\u2705 Test Passed.' : `\u274c Test Failed. Input: ${JSON.stringify(args['numbers'])}, target = ${args['target']}, expected: ${JSON.stringify(args['ret'])} but got ${JSON.stringify(ret)}`);
}",,
63b594f68ad4593d6b7b01d7,3-sum,"params = [
{
""input"": [-1,0,1,2,-1,-4],
""output"": [[-1,-1,2],[-1,0,1]]
},
{
""input"": [0,1,1],
""output"": []
},
{
""input"": [0,0,0],
""output"": [[0,0,0]]
},
{
""input"": [1,2,3,4,5,6],
""output"": []
},
{
""input"": [-1,-2,-3,-4,-5,-6],
""output"": []
},
{
""input"": [1,1,1,1,1,1],
""output"": []
},
{
""input"": [-1,-1,-1,-1,-1,-1],
""output"": []
},
{
""input"": [-1,1,-1,1,-1,1],
""output"": []
},
{
""input"": [-1,0,1,2,3,4,5,6,7,8,9,10],
""output"": [[-1, 0, 1]]
},
{
""input"": [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0],
""output"": []
},
{
""input"": [1,-1,0,1,-1,0],
""output"": [[-1, 0, 1]]
},
{
""input"": [1,1,-2],
""output"": [[-2,1,1]]
},
{
""input"": [1,2,3,-3,-2,-1],
""output"": [[-3, 1, 2], [-2, -1, 3]]
},
{
""input"": [1,1,1,-1,-1,-1],
""output"": []
},
{
""input"": [1,1,1,1,1,-4],
""output"": []
},
{
""input"": [-1,-1,0,1,1,2],
""output"": [[-1, -1, 2], [-1, 0, 1]]
},
{
""input"": [-1,-1,-1,0,0,0],
""output"": [[0, 0, 0]]
},
{
""input"": [1,1,1,1,1,1,-6],
""output"": []
},
{
""input"": [-1,-1,-1,-1,-1,5],
""output"": []
},
{
""input"": [-1,1,-1,1,-1,1,0],
""output"": [[-1, 0, 1]]
}
]

obj = Solution()
for test in params:
    input_list = test[""input""]
    expected_output = test[""output""]
    result = obj.threeSum(input_list)
    result_list = []
    for i in result:
        result_list.append(i)
    if result_list == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_list}, expected: {expected_output}, but got {result_list}"")","let params = [
    {
    ""input"": [-1,0,1,2,-1,-4],
    ""output"": [[-1,-1,2],[-1,0,1]]
    },
    {
    ""input"": [0,1,1],
    ""output"": []
    },
    {
    ""input"": [0,0,0],
    ""output"": [[0,0,0]]
    },
    {
    ""input"": [1,2,3,4,5,6],
    ""output"": []
    },
    {
    ""input"": [-1,-2,-3,-4,-5,-6],
    ""output"": []
    },
    {
    ""input"": [1,1,1,1,1,1],
    ""output"": []
    },
    {
    ""input"": [-1,-1,-1,-1,-1,-1],
    ""output"": []
    },
    {
    ""input"": [-1,1,-1,1,-1,1],
    ""output"": []
    },
    {
    ""input"": [-1,0,1,2,3,4,5,6,7,8,9,10],
    ""output"": [[-1, 0, 1]]
    },
    {
    ""input"": [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0],
    ""output"": []
    },
    {
    ""input"": [1,-1,0,1,-1,0],
    ""output"": [[-1, 0, 1]]
    },
    {
    ""input"": [1,1,-2],
    ""output"": [[-2,1,1]]
    },
    {
    ""input"": [1,2,3,-3,-2,-1],
    ""output"": [[-3, 1, 2], [-2, -1, 3]]
    },
    {
    ""input"": [1,1,1,-1,-1,-1],
    ""output"": []
    },
    {
    ""input"": [1,1,1,1,1,-4],
    ""output"": []
    },
    {
    ""input"": [-1,-1,0,1,1,2],
    ""output"": [[-1, -1, 2], [-1, 0, 1]]
    },
    {
    ""input"": [-1,-1,-1,0,0,0],
    ""output"": [[0, 0, 0]]
    },
    {
    ""input"": [1,1,1,1,1,1,-6],
    ""output"": []
    },
    {
    ""input"": [-1,-1,-1,-1,-1,5],
    ""output"": []
    },
    {
    ""input"": [-1,1,-1,1,-1,1,0],
    ""output"": [[-1, 0, 1]]
    }
    ]

for (let test of params) {
    let input_list = test[""input""];
    let expected_output = test[""output""];
    let result = threeSum(input_list);
    let result_list = [];
    for (let i of result) {
        result_list.push(i);
    }
    if (result_list.sort().toString() === expected_output.sort().toString()) {
        console.log(""\u2705 Test Passed."");
    } else {
        console.log(`\u274c Test Failed. Input: ${input_list}, expected: ${expected_output}, but got ${result_list}`);
    }
}
    ",,
63b594f78ad4593d6b7b01d8,container-with-most-water,"params = [    
    {   
        ""height"": [1,8,6,2,5,4,8,3,7],
        ""ret"": 49
    },
    {
        ""height"": [1,1],
        ""ret"": 1
    },
    {
        ""height"": [1,2,3,4,5,6,7,8,9,10],
        ""ret"": 25
    },
    {
        ""height"": [10,9,8,7,6,5,4,3,2,1],
        ""ret"": 25
    },
    {
        ""height"": [5,5,5,5,5],
        ""ret"": 20
    },
    {
        ""height"": [1,3,5,7,9],
        ""ret"": 10
    },
    {
        ""height"": [9,7,5,3,1],
        ""ret"": 10
    },
    {
        ""height"": [5,10,5,10,5],
        ""ret"": 20
    },
    {
        ""height"": [1,1,1,1,1,1,1,1,1,1],
        ""ret"": 9
    },
    {
        ""height"": [1,2,1,2,1,2,1,2,1,2],
        ""ret"": 16
    }
]

obj = Solution()
for args in params:
  res =  obj.maxArea(args['height'])
  print(""\u2705 Test Passed."") if res == args['ret'] else print(f""\u274c Test Failed. Input: {args['height']}, expected: {args['ret']} but got {res}"")","let params = [    
  {   
      ""height"": [1,8,6,2,5,4,8,3,7],
      ""ret"": 49
  },
  {
      ""height"": [1,1],
      ""ret"": 1
  },
  {
      ""height"": [1,2,3,4,5,6,7,8,9,10],
      ""ret"": 25
  },
  {
      ""height"": [10,9,8,7,6,5,4,3,2,1],
      ""ret"": 25
  },
  {
      ""height"": [5,5,5,5,5],
      ""ret"": 20
  },
  {
      ""height"": [1,3,5,7,9],
      ""ret"": 10
  },
  {
      ""height"": [9,7,5,3,1],
      ""ret"": 10
  },
  {
      ""height"": [5,10,5,10,5],
      ""ret"": 20
  },
  {
      ""height"": [1,1,1,1,1,1,1,1,1,1],
      ""ret"": 9
  },
  {
      ""height"": [1,2,1,2,1,2,1,2,1,2],
      ""ret"": 16
  }
]

for (let i = 0; i < params.length; i++) {
  let args = params[i];
  let res = maxArea(args['height']);
  res == args['ret'] ? console.log(""\u2705 Test Passed."") : console.log(`\u274c Test Failed. Input: ${args['height']}, expected: ${args['ret']}, got: ${res}`);
}",,
63b594f88ad4593d6b7b01d9,trapping-rain-water,"params = [    
    { 
        ""height"": [0,1,0,2,1,0,1,3,2,1,2,1],
        ""ret"": 6
    },
    {
        ""height"": [4,2,0,3,2,5],
        ""ret"": 9
    },
    {
        ""height"": [1,2,3,4,5,6],
        ""ret"": 0
    },
    {
        ""height"": [6,5,4,3,2,1],
        ""ret"": 0
    },
    {
        ""height"": [1,0,1],
        ""ret"": 1
    },
    {
        ""height"": [1,1,1,1,1],
        ""ret"": 0
    },
    {
        ""height"": [3,2,1,2,3],
        ""ret"": 4
    },
    {
        ""height"": [1,1,1,1,1,1,1,1,1,1],
        ""ret"": 0
    },
    {
        ""height"": [5,5,5,5,5,5,5,5,5,5],
        ""ret"": 0
    },
    {
        ""height"": [1,1,1,1,1,1,1,1,1,1,1],
        ""ret"": 0
    }
]

obj = Solution()
for args in params:
  result = obj.trap(args['height'])
  if result == args['ret']:
      print(""\u2705 Test Passed."")
  else:
      print(f""\u274c Test Failed. Input: {args['height']}, expected: {args['ret']}, but got {result}"")","let params = [    
  { 
      ""height"": [0,1,0,2,1,0,1,3,2,1,2,1],
      ""ret"": 6
  },
  {
      ""height"": [4,2,0,3,2,5],
      ""ret"": 9
  },
  {
      ""height"": [1,2,3,4,5,6],
      ""ret"": 0
  },
  {
      ""height"": [6,5,4,3,2,1],
      ""ret"": 0
  },
  {
      ""height"": [1,0,1],
      ""ret"": 1
  },
  {
      ""height"": [1,1,1,1,1],
      ""ret"": 0
  },
  {
      ""height"": [3,2,1,2,3],
      ""ret"": 4
  },
  {
      ""height"": [1,1,1,1,1,1,1,1,1,1],
      ""ret"": 0
  },
  {
      ""height"": [5,5,5,5,5,5,5,5,5,5],
      ""ret"": 0
  },
  {
      ""height"": [1,1,1,1,1,1,1,1,1,1,1],
      ""ret"": 0
  }
]

for (let i = 0; i < params.length; i++) {
  let args = params[i];
  let result = trap(args['height']);
  if (result === args['ret']) {
      console.log(""\u2705 Test Passed."")
  } else {
      console.log(`\u274c Test Failed. Input: ${args['height']}, expected: ${args['ret']}, but got ${result}`)
  }
}",,
63b594fa8ad4593d6b7b01da,best-time-to-buy-and-sell-stock,"params = [
    {
        ""prices"": [7,1,5,3,6,4],
        ""ret"": 5
    },
    {
        ""prices"": [7,6,4,3,1],
        ""ret"": 0
    },
    {
        ""prices"": [1,1,1,1,1,1],
        ""ret"": 0
    },
    {
        ""prices"": [1,2,3,4,5,6],
        ""ret"": 5
    },
    {
        ""prices"": [6,5,4,3,2,1],
        ""ret"": 0
    },
    {
        ""prices"": [1],
        ""ret"": 0
    },
    {
        ""prices"": [],
        ""ret"": 0
    },
    {
        ""prices"": [2,2,2,2,2],
        ""ret"": 0
    },
    {
        ""prices"": [1,2,3,4,5,6,7,8,9,10],
        ""ret"": 9
    },
    {
        ""prices"": [10,9,8,7,6,5,4,3,2,1],
        ""ret"": 0
    },
    {
        ""prices"": [4,6,2,8,3,10],
        ""ret"": 8
    },
    {
        ""prices"": [15,12,10,8,11,20],
        ""ret"": 12
    },
    {
        ""prices"": [1,2,3,4,5,6],
        ""ret"": 5
    },
    {
        ""prices"": [6,5,4,3,2,1],
        ""ret"": 0
    },
    {
        ""prices"": [2,4,6,8,10,12],
        ""ret"": 10
    }
]
obj = Solution()
for args in params:
  result = obj.maxProfit(args['prices'])
  if result == args['ret']:
      print(""\u2705 Test Passed."")
  else:
      print(f""\u274c Test Failed. Input: {args['prices']}, expected: {args['ret']}, but got {result}"")","let params = [
  {
      ""prices"": [7,1,5,3,6,4],
      ""ret"": 5
  },
  {
      ""prices"": [7,6,4,3,1],
      ""ret"": 0
  },
  {
      ""prices"": [1,1,1,1,1,1],
      ""ret"": 0
  },
  {
      ""prices"": [1,2,3,4,5,6],
      ""ret"": 5
  },
  {
      ""prices"": [6,5,4,3,2,1],
      ""ret"": 0
  },
  {
      ""prices"": [1],
      ""ret"": 0
  },
  {
      ""prices"": [],
      ""ret"": 0
  },
  {
      ""prices"": [2,2,2,2,2],
      ""ret"": 0
  },
  {
      ""prices"": [1,2,3,4,5,6,7,8,9,10],
      ""ret"": 9
  },
  {
      ""prices"": [10,9,8,7,6,5,4,3,2,1],
      ""ret"": 0
  },
  {
      ""prices"": [4,6,2,8,3,10],
      ""ret"": 8
  },
  {
      ""prices"": [15,12,10,8,11,20],
      ""ret"": 12
  },
  {
      ""prices"": [1,2,3,4,5,6],
      ""ret"": 5
  },
  {
      ""prices"": [6,5,4,3,2,1],
      ""ret"": 0
  },
  {
      ""prices"": [2,4,6,8,10,12],
      ""ret"": 10
  }
]

for (let i = 0; i < params.length; i++) {
  let args = params[i];
  let result = maxProfit(args['prices']);
  if (result === args['ret']) {
      console.log(""\u2705 Test Passed."");
  } else {
      console.log(`\u274c Test Failed. Input: ${args['prices']}, expected: ${args['ret']}, but got ${result}`);
  }
}",,
63b594fa8ad4593d6b7b01db,longest-substring-without-repeating-characters,"params = [
    {
        ""s"": ""abcabcbb"",
        ""ret"": 3
    },
    {
        ""s"": ""bbbbb"",
        ""ret"": 1
    },
    {
        ""s"": ""pwwkew"",
        ""ret"": 3
    },
    {
        ""s"": ""abcdefghijklmnopqrstuvwxyz"",
        ""ret"": 26
    },
    {
        ""s"": ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"",
        ""ret"": 52
    },
    {
        ""s"": """",
        ""ret"": 0
    },
    {
        ""s"": ""a"",
        ""ret"": 1
    },
    {
        ""s"": ""aa"",
        ""ret"": 1
    },
    {
        ""s"": ""ab"",
        ""ret"": 2
    },
    {
        ""s"": ""aaab"",
        ""ret"": 2
    },
    {
        ""s"": ""aab"",
        ""ret"": 2
    }, 
    {
        ""s"": ""dvdf"",
        ""ret"": 3
    },
    {
        ""s"": ""ohvh"",
        ""ret"": 3
    },
    {
        ""s"": ""abcabcabcabcabcabcabcabcab"",
        ""ret"": 3
    },
]

obj = Solution()
for args in params:
    result = obj.lengthOfLongestSubstring(args['s'])
    if result == args['ret']:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {args['s']}, expected: {args['ret']}, but got {result}"")","let params = [
  {
      ""s"": ""abcabcbb"",
      ""ret"": 3
  },
  {
      ""s"": ""bbbbb"",
      ""ret"": 1
  },
  {
      ""s"": ""pwwkew"",
      ""ret"": 3
  },
  {
      ""s"": ""abcdefghijklmnopqrstuvwxyz"",
      ""ret"": 26
  },
  {
      ""s"": ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"",
      ""ret"": 52
  },
  {
      ""s"": """",
      ""ret"": 0
  },
  {
      ""s"": ""a"",
      ""ret"": 1
  },
  {
      ""s"": ""aa"",
      ""ret"": 1
  },
  {
      ""s"": ""ab"",
      ""ret"": 2
  },
  {
      ""s"": ""aaab"",
      ""ret"": 2
  },
  {
      ""s"": ""aab"",
      ""ret"": 2
  }, 
  {
      ""s"": ""dvdf"",
      ""ret"": 3
  },
  {
      ""s"": ""ohvh"",
      ""ret"": 3
  },
  {
      ""s"": ""abcabcabcabcabcabcabcabcab"",
      ""ret"": 3
  },
]


for (let i = 0; i < params.length; i++) {
    let args = params[i];
    let result = lengthOfLongestSubstring(args['s']);
    if (result === args['ret']) {
        console.log(""\u2705 Test Passed."")
    } else {
        console.log(`\u274c Test Failed. Input: ${args['s']}, expected: ${args['ret']}, but got ${result}`)
    }
}",,
63b594fb8ad4593d6b7b01dc,longest-repeating-character-replacement,"params = [
    {
        ""s"": ""ABAB"",
        ""k"": 2,
        ""ret"": 4
    },
    {
        ""s"": ""AABABBA"",
        ""k"": 1,
        ""ret"": 4
    },
    {
        ""s"": ""AAAB"",
        ""k"": 0,
        ""ret"": 3
    },
    {
        ""s"": ""A"",
        ""k"": 0,
        ""ret"": 1
    },
    {
        ""s"": ""AAABB"",
        ""k"": 2,
        ""ret"": 5
    },
    {
        ""s"": ""AAABBB"",
        ""k"": 2,
        ""ret"": 5
    },
    {
        ""s"": ""AAABBB"",
        ""k"": 3,
        ""ret"": 6
    },
    {
        ""s"": ""AAABBB"",
        ""k"": 4,
        ""ret"": 6
    },
    {
        ""s"": ""AAAAAAABBB"",
        ""k"": 2,
        ""ret"": 9
    },
    {
        ""s"": ""AAAAAAABBB"",
        ""k"": 3,
        ""ret"": 10
    },
    {
        ""s"": ""ABCDEFG"",
        ""k"": 2,
        ""ret"": 3
    },
    {
        ""s"": ""AAACCCGGGTTT"",
        ""k"": 4,
        ""ret"": 7
    },
    {
        ""s"": ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"",
        ""k"": 25,
        ""ret"": 26
    },
    {
        ""s"": ""AAABBB"",
        ""k"": 1,
        ""ret"": 4
    },
    {
        ""s"": ""ABABABABABA"",
        ""k"": 3,
        ""ret"": 7
    },
    {
        ""s"": ""ABCDABD"",
        ""k"": 2,
        ""ret"": 4
    },
    {
        ""s"": ""ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"",
        ""k"": 50,
        ""ret"": 52
    },
    {
        ""s"": ""ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"",
        ""k"": 100,
        ""ret"": 78
    },
    {
        ""s"": ""ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"",
        ""k"": 200,
        ""ret"": 104
    },
    {
        ""s"": ""ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"",
        ""k"": 250,
        ""ret"": 130
    }
]
obj = Solution()
for args in params:
  result = obj.characterReplacement(args['s'], args['k'])
  if result == args['ret']:
      print(""\u2705 Test Passed."")
  else:
      print(f""\u274c Test Failed. Input: {args['s']}, {args['k']}, expected: {args['ret']}, but got {result}"")","let params = [
  {
      ""s"": ""ABAB"",
      ""k"": 2,
      ""ret"": 4
  },
  {
      ""s"": ""AABABBA"",
      ""k"": 1,
      ""ret"": 4
  },
  {
      ""s"": ""AAAB"",
      ""k"": 0,
      ""ret"": 3
  },
  {
      ""s"": ""A"",
      ""k"": 0,
      ""ret"": 1
  },
  {
      ""s"": ""AAABB"",
      ""k"": 2,
      ""ret"": 5
  },
  {
      ""s"": ""AAABBB"",
      ""k"": 2,
      ""ret"": 5
  },
  {
      ""s"": ""AAABBB"",
      ""k"": 3,
      ""ret"": 6
  },
  {
      ""s"": ""AAABBB"",
      ""k"": 4,
      ""ret"": 6
  },
  {
      ""s"": ""AAAAAAABBB"",
      ""k"": 2,
      ""ret"": 9
  },
  {
      ""s"": ""AAAAAAABBB"",
      ""k"": 3,
      ""ret"": 10
  },
  {
      ""s"": ""ABCDEFG"",
      ""k"": 2,
      ""ret"": 3
  },
  {
      ""s"": ""AAACCCGGGTTT"",
      ""k"": 4,
      ""ret"": 7
  },
  {
      ""s"": ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"",
      ""k"": 25,
      ""ret"": 26
  },
  {
      ""s"": ""AAABBB"",
      ""k"": 1,
      ""ret"": 4
  },
  {
      ""s"": ""ABABABABABA"",
      ""k"": 3,
      ""ret"": 7
  },
  {
      ""s"": ""ABCDABD"",
      ""k"": 2,
      ""ret"": 4
  },
  {
      ""s"": ""ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"",
      ""k"": 50,
      ""ret"": 52
  },
  {
      ""s"": ""ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"",
      ""k"": 100,
      ""ret"": 78
  },
  {
      ""s"": ""ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"",
      ""k"": 200,
      ""ret"": 104
  },
  {
      ""s"": ""ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"",
      ""k"": 250,
      ""ret"": 130
  }
]

for (let i = 0; i < params.length; i++) {
  let args = params[i];
  let result = characterReplacement(args['s'], args['k']);
  if (result === args['ret']) {
      console.log(""_ Test Passed."")
  } else {
      console.log(`_ Test Failed. Input: ${args['s']}, k: ${args['k']}, expected: ${args['ret']}, but got ${result}`)
  }
}",,
63b594fc8ad4593d6b7b01dd,permutation-in-string,"params = [
    {
        ""s1"": ""ab"",
        ""s2"": ""eidbaooo"",
        ""ret"": True
    },
    {
        ""s1"": ""ab"",
        ""s2"": ""eidboaoo"",
        ""ret"": False
    },
    {
        ""s1"": ""abc"",
        ""s2"": ""cbaaabcb"",
        ""ret"": True
    },
    {
        ""s1"": ""abc"",
        ""s2"": ""cbacbaab"",
        ""ret"": True
    },
    {
        ""s1"": ""abc"",
        ""s2"": ""cbacbacb"",
        ""ret"": True
    },
    {
        ""s1"": """",
        ""s2"": ""cbacbacb"",
        ""ret"": True
    },
    {
        ""s1"": ""a"",
        ""s2"": """",
        ""ret"": False
    },
    {
        ""s1"": ""a"",
        ""s2"": ""a"",
        ""ret"": True
    },
    {
        ""s1"": ""ab"",
        ""s2"": ""aaab"",
        ""ret"": True
    },
    {
        ""s1"": ""ab"",
        ""s2"": ""baab"",
        ""ret"": True
    },
    {
        ""s1"": ""abcdef"",
        ""s2"": ""abcdefgabcdef"",
        ""ret"": True
    },
    {
        ""s1"": ""abcdef"",
        ""s2"": ""abcdabcdabcd"",
        ""ret"": False
    },
    {
        ""s1"": ""abcdef"",
        ""s2"": ""abcdefabcdefghijklmnopqrstuvwxyz"",
        ""ret"": True
    },
    {
        ""s1"": ""abcdef"",
        ""s2"": ""abcdefabcdefghijklmnopqrstuvwxyzabcdef"",
        ""ret"": True
    },
    {
        ""s1"": ""abcdef"",
        ""s2"": ""abcdefghijklmnopqrstuvwxyz"",
        ""ret"": True
    },
    {
        ""s1"": ""abcdefghijklmnopqrstuvwxyz"",
        ""s2"": ""abcdefabcdefghijklmnopqrstuvwxyzabcdefabcdefghijklmnopqrstuvwxyz"",
        ""ret"": True
    },
    {
        ""s1"": ""abcdefghijklmnopqrstuvwxyz"",
        ""s2"": ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"",
        ""ret"": True
    },
    {
        ""s1"": ""abcdefghijklmnopqrstuvwxyz"",
        ""s2"": ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"",
        ""ret"": True
    },
    {
        ""s1"": ""abcdefghijklmnopqrstuvwxyz"",
        ""s2"": ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"",
        ""ret"": True
    }
]
obj = Solution()
for args in params:
  result = obj.checkInclusion(args['s1'], args['s2'])
  if result == args['ret']:
      print(""\u2705 Test Passed."")
  else:
      print(f""\u274c Test Failed. Input: s1 = {args['s1']}, s2 = {args['s2']}, expected: {args['ret']}, but got {result}"")","let params = [
  {
      ""s1"": ""ab"",
      ""s2"": ""eidbaooo"",
      ""ret"": true
  },
  {
      ""s1"": ""ab"",
      ""s2"": ""eidboaoo"",
      ""ret"": false
  },
  {
      ""s1"": ""abc"",
      ""s2"": ""cbaaabcb"",
      ""ret"": true
  },
  {
      ""s1"": ""abc"",
      ""s2"": ""cbacbaab"",
      ""ret"": true
  },
  {
      ""s1"": ""abc"",
      ""s2"": ""cbacbacb"",
      ""ret"": true
  },
  {
      ""s1"": """",
      ""s2"": ""cbacbacb"",
      ""ret"": true
  },
  {
      ""s1"": ""a"",
      ""s2"": """",
      ""ret"": false
  },
  {
      ""s1"": ""a"",
      ""s2"": ""a"",
      ""ret"": true
  },
  {
      ""s1"": ""ab"",
      ""s2"": ""aaab"",
      ""ret"": true
  },
  {
      ""s1"": ""ab"",
      ""s2"": ""baab"",
      ""ret"": true
  },
  {
      ""s1"": ""abcdef"",
      ""s2"": ""abcdefgabcdef"",
      ""ret"": true
  },
  {
      ""s1"": ""abcdef"",
      ""s2"": ""abcdabcdabcd"",
      ""ret"": false
  },
  {
      ""s1"": ""abcdef"",
      ""s2"": ""abcdefabcdefghijklmnopqrstuvwxyz"",
      ""ret"": true
  },
  {
      ""s1"": ""abcdef"",
      ""s2"": ""abcdefabcdefghijklmnopqrstuvwxyzabcdef"",
      ""ret"": true
  },
  {
      ""s1"": ""abcdef"",
      ""s2"": ""abcdefghijklmnopqrstuvwxyz"",
      ""ret"": true
  },
  {
      ""s1"": ""abcdefghijklmnopqrstuvwxyz"",
      ""s2"": ""abcdefabcdefghijklmnopqrstuvwxyzabcdefabcdefghijklmnopqrstuvwxyz"",
      ""ret"": true
  },
  {
      ""s1"": ""abcdefghijklmnopqrstuvwxyz"",
      ""s2"": ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"",
      ""ret"": true
  },
  {
      ""s1"": ""abcdefghijklmnopqrstuvwxyz"",
      ""s2"": ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"",
      ""ret"": true
  },
  {
      ""s1"": ""abcdefghijklmnopqrstuvwxyz"",
      ""s2"": ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"",
      ""ret"": true
  }
]

for (let i = 0; i < params.length; i++) {
  let result = checkInclusion(params[i][""s1""], params[i][""s2""])
  if (result === params[i][""ret""]) {
      console.log(""\u2705 Test Passed."")
  } else {
      console.log(`\u274c Test Failed. Input: s1: ${params[i][""s1""]}, s2: ${params[i][""s2""]}, expected: ${params[i][""ret""]}, but got ${result}`)
  }
}",,
63b594fe8ad4593d6b7b01de,minimum-window-substring,"params = [
    {'s': 'ADOBECODEBANC', 't': 'ABC', 'ret': 'BANC'},
    {'s': 'a', 't': 'a', 'ret': 'a'},
    {'s': 'a', 't': 'aa', 'ret': ''},
    {'s': 'abcdabcd', 't': 'abc', 'ret': 'abc'},
    {'s': 'abcdabcd', 't': 'abcd', 'ret': 'abcd'},
    {'s': 'abcdabcd', 't': 'bcda', 'ret': 'abcd'},
    {'s': 'abcdabcd', 't': 'cabd', 'ret': 'abcd'},
    {'s': 'abcdabcd', 't': 'abcdabcd', 'ret': 'abcdabcd'},
    {'s': 'abcdabcd', 't': 'abcdabc', 'ret': 'abcdabc'},
    {'s': 'abcdabcd', 't': 'abcdef', 'ret': ''},
    {""s"": ""qwertyuiopasdfghjklzxcvbnmqwertyuio"", ""t"": ""qwertyuio"", ""ret"": ""qwertyuio""},
    {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefgh"", ""ret"": ""abcdefgh""},
    {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghi"", ""ret"": ""abcdefghi""},
    {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklm"", ""ret"": ""abcdefghijklm""},
    {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrs"", ""ret"": ""abcdefghijklmnopqrs""},
    {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrstuvwxyz"", ""ret"": ""abcdefghijklmnopqrstuvwxyz""},
    {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""ret"": ""abcdefghijklmnopqrstuvwxyzabcdefgh""},
    {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrstuvwxyzabcdefghi"", ""ret"": """"},
    {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefgh"", ""ret"": """"},
    {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghi"", ""ret"": """"},
]
obj = Solution()
for args in params:
    result = obj.minWindow(args['s'], args['t'])
    if result == args['ret']:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {args['s']}, {args['t']}, expected: {args['ret']}, but got {result}"")","let params = [
  {'s': 'ADOBECODEBANC', 't': 'ABC', 'ret': 'BANC'},
  {'s': 'a', 't': 'a', 'ret': 'a'},
  {'s': 'a', 't': 'aa', 'ret': ''},
  {'s': 'abcdabcd', 't': 'abc', 'ret': 'abc'},
  {'s': 'abcdabcd', 't': 'abcd', 'ret': 'abcd'},
  {'s': 'abcdabcd', 't': 'bcda', 'ret': 'abcd'},
  {'s': 'abcdabcd', 't': 'cabd', 'ret': 'abcd'},
  {'s': 'abcdabcd', 't': 'abcdabcd', 'ret': 'abcdabcd'},
  {'s': 'abcdabcd', 't': 'abcdabc', 'ret': 'abcdabc'},
  {'s': 'abcdabcd', 't': 'abcdef', 'ret': ''},
  {""s"": ""qwertyuiopasdfghjklzxcvbnmqwertyuio"", ""t"": ""qwertyuio"", ""ret"": ""qwertyuio""},
  {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefgh"", ""ret"": ""abcdefgh""},
  {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghi"", ""ret"": ""abcdefghi""},
  {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklm"", ""ret"": ""abcdefghijklm""},
  {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrs"", ""ret"": ""abcdefghijklmnopqrs""},
  {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrstuvwxyz"", ""ret"": ""abcdefghijklmnopqrstuvwxyz""},
  {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""ret"": ""abcdefghijklmnopqrstuvwxyzabcdefgh""},
  {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrstuvwxyzabcdefghi"", ""ret"": """"},
  {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefgh"", ""ret"": """"},
  {""s"": ""abcdefghijklmnopqrstuvwxyzabcdefgh"", ""t"": ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghi"", ""ret"": """"},
]

for (let i = 0; i < params.length; i++) {
  let test = params[i];
  let result = minWindow(test.s, test.t);
  if (result === test.ret) {
      console.log(""_ Test Passed."")
  } else {
      console.log(`_ Test Failed. Input: ${test.s}, ${test.t}, expected: ${test.ret}, but got ${result}`)
  }
}",,
63b594ff8ad4593d6b7b01df,sliding-window-maximum,"params = [
    {
        ""nums"": [1,3,-1,-3,5,3,6,7],
        ""k"": 3,
        ""ret"": [3,3,5,5,6,7]
    },
    {
        ""nums"": [1,3,-1,-3,5,3,6,7],
        ""k"": 2,
        ""ret"": [3,3,-1,5,5,6,7]
    },
    {
        ""nums"": [1],
        ""k"": 1,
        ""ret"": [1]
    },
    {
        ""nums"": [1, 2, 3, 4, 5, 6],
        ""k"": 2,
        ""ret"": [2, 3, 4, 5, 6]
    },
    {
        ""nums"": [6, 5, 4, 3, 2, 1],
        ""k"": 3,
        ""ret"": [6, 5, 4, 3]
    },
    {
        ""nums"": [-1, -2, -3, -4, -5],
        ""k"": 4,
        ""ret"": [-1, -2]
    },
    {
        ""nums"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        ""k"": 5,
        ""ret"": [5, 6, 7, 8, 9, 10]
    },
    {
        ""nums"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        ""k"": 10,
        ""ret"": [10]
    },
    {
        ""nums"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        ""k"": 1,
        ""ret"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    },
    {
        ""nums"": [],
        ""k"": 5,
        ""ret"": []
    },
    {
        ""nums"": [1, 3, -1, -3, 5, 3, 6, 7],
        ""k"": 3,
        ""ret"": [3, 3, 5, 5, 6, 7]
    },
    {
        ""nums"": [1, 3, -1, -3, 5, 3, 6, 7, 8, 9, 10],
        ""k"": 4,
        ""ret"": [3, 5, 5, 6, 7, 8, 9, 10]
    },
    {
        ""nums"": [1, 3, -1, -3, 5, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        ""k"": 5,
        ""ret"": [5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
    },
    {
        ""nums"": [1, 3, -1, -3, 5, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
        ""k"": 6,
        ""ret"": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    },
    {
        ""nums"": [1, 3, -1, -3, 5, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],
        ""k"": 7,
        ""ret"": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
    },
    {
        ""nums"": [1, 3, -1, -3, 5, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22],
        ""k"": 8,
        ""ret"": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
    }
]
obj = Solution()
for args in params:
  result = obj.maxSlidingWindow(args['nums'], args['k'])
  if result == args['ret']:
    print(""\u2705 Test Passed."")
  else:
    print(f""\u274c Test Failed. Input: {args['nums']}, {args['k']}, expected: {args['ret']}, but got {result}"")","let params = [
  {
      ""nums"": [1,3,-1,-3,5,3,6,7],
      ""k"": 3,
      ""ret"": [3,3,5,5,6,7]
  },
  {
      ""nums"": [1,3,-1,-3,5,3,6,7],
      ""k"": 2,
      ""ret"": [3,3,-1,5,5,6,7]
  },
  {
      ""nums"": [1],
      ""k"": 1,
      ""ret"": [1]
  },
  {
      ""nums"": [1, 2, 3, 4, 5, 6],
      ""k"": 2,
      ""ret"": [2, 3, 4, 5, 6]
  },
  {
      ""nums"": [6, 5, 4, 3, 2, 1],
      ""k"": 3,
      ""ret"": [6, 5, 4, 3]
  },
  {
      ""nums"": [-1, -2, -3, -4, -5],
      ""k"": 4,
      ""ret"": [-1, -2]
  },
  {
      ""nums"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      ""k"": 5,
      ""ret"": [5, 6, 7, 8, 9, 10]
  },
  {
      ""nums"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      ""k"": 10,
      ""ret"": [10]
  },
  {
      ""nums"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      ""k"": 1,
      ""ret"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  },
  {
      ""nums"": [],
      ""k"": 5,
      ""ret"": []
  },
  {
      ""nums"": [1, 3, -1, -3, 5, 3, 6, 7],
      ""k"": 3,
      ""ret"": [3, 3, 5, 5, 6, 7]
  },
  {
      ""nums"": [1, 3, -1, -3, 5, 3, 6, 7, 8, 9, 10],
      ""k"": 4,
      ""ret"": [3, 5, 5, 6, 7, 8, 9, 10]
  },
  {
      ""nums"": [1, 3, -1, -3, 5, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
      ""k"": 5,
      ""ret"": [5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
  },
  {
      ""nums"": [1, 3, -1, -3, 5, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
      ""k"": 6,
      ""ret"": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
  },
  {
      ""nums"": [1, 3, -1, -3, 5, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],
      ""k"": 7,
      ""ret"": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
  },
  {
      ""nums"": [1, 3, -1, -3, 5, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22],
      ""k"": 8,
      ""ret"": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
  }
]

function arraysEqual(a, b) {
  if (a === b) return true;
  if (a == null || b == null) return false;
  if (a.length != b.length) return false;

  for (var i = 0; i < a.length; ++i) {
      if (a[i] !== b[i]) return false;
  }
  return true;
}

for (let i = 0; i < params.length; i++) {
  let result = maxSlidingWindow(params[i].nums, params[i].k);
  if (arraysEqual(result, params[i].ret)) {
      console.log(""\u2705 Test Passed."");
  } else {
      console.log(`\u274c Test Failed. Input: ${params[i].nums}, ${params[i].k}, expected: ${params[i].ret}, but got ${result}`);
  }
}",,
63b595008ad4593d6b7b01e0,valid-parentheses,"params = [
    {""s"": ""()"", ""ret"": True},
    {""s"": ""()[]{}"", ""ret"": True},
    {""s"": ""(]"", ""ret"": False},
    {""s"": ""({[]})"", ""ret"": True},
    {""s"": ""({[}])"", ""ret"": False},
    {""s"": ""(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("", ""ret"": False},
    {""s"": ""()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()"", ""ret"": True},
    {""s"": ""[({})]"", ""ret"": True},
    {""s"": """", ""ret"": True},
    {""s"": ""(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("", ""ret"": False},
    {""s"": ""()()()()"", ""ret"": True},
    {""s"": ""((()))"", ""ret"": True},
    {""s"": ""[{}]()"", ""ret"": True},
    {""s"": ""({[}])"", ""ret"": False},
    {""s"": ""(()[{}])"", ""ret"": True},
    {""s"": ""([)]"", ""ret"": False},
    {""s"": ""((((((((("", ""ret"": False},
    {""s"": ""){}{}{}{}{}{}{}{}{}"", ""ret"": False},
    {""s"": ""[](){}"", ""ret"": True},
    {""s"": ""[](){}()[]{}"", ""ret"": True},
]
obj = Solution()
for args in params:
    result = obj.isValid(args['s'])
    if result == args['ret']:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {args['s']}, expected: {args['ret']}, but got {result}"")","let params = [
    {""s"": ""()"", ""ret"": True},
    {""s"": ""()[]{}"", ""ret"": True},
    {""s"": ""(]"", ""ret"": False},
    {""s"": ""({[]})"", ""ret"": True},
    {""s"": ""({[}])"", ""ret"": False},
    {""s"": ""(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("", ""ret"": False},
    {""s"": ""()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()"", ""ret"": True},
    {""s"": ""[({})]"", ""ret"": True},
    {""s"": """", ""ret"": True},
    {""s"": ""(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("", ""ret"": False},
    {""s"": ""()()()()"", ""ret"": True},
    {""s"": ""((()))"", ""ret"": True},
    {""s"": ""[{}]()"", ""ret"": True},
    {""s"": ""({[}])"", ""ret"": False},
    {""s"": ""(()[{}])"", ""ret"": True},
    {""s"": ""([)]"", ""ret"": False},
    {""s"": ""((((((((("", ""ret"": False},
    {""s"": ""){}{}{}{}{}{}{}{}{}"", ""ret"": False},
    {""s"": ""[](){}"", ""ret"": True},
    {""s"": ""[](){}()[]{}"", ""ret"": True},
]

for (let i = 0; i < params.length; i++) {
    let result = isValid(params[i].s);
    if (result === params[i].ret) {
        console.log(""\u2705 Test Passed."")
    } else {
        console.log(`\u274c Test Failed. Input: ${params[i].s}, expected: ${params[i].ret}, but got ${result}`)
    }
}",,
63b595018ad4593d6b7b01e1,min-stack,"params = [
    {""method"": ""push"", ""val"": -2, ""ret"": None},
    {""method"": ""push"", ""val"": 0, ""ret"": None},
    {""method"": ""push"", ""val"": -3, ""ret"": None},
    {""method"": ""push"", ""val"": 5, ""ret"": None},
    {""method"": ""push"", ""val"": 3, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -3},
    {""method"": ""pop"", ""val"": None, ""ret"": 3},
    {""method"": ""top"", ""val"": None, ""ret"": 5},
    {""method"": ""getMin"", ""val"": None, ""ret"": -3},
    {""method"": ""push"", ""val"": -10, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -10},
    {""method"": ""pop"", ""val"": None, ""ret"": -10},
    {""method"": ""pop"", ""val"": None, ""ret"": 5},
    {""method"": ""pop"", ""val"": None, ""ret"": -3},
    {""method"": ""pop"", ""val"": None, ""ret"": 0},
    {""method"": ""getMin"", ""val"": None, ""ret"": -2},
    {""method"": ""push"", ""val"": 1, ""ret"": None},
    {""method"": ""push"", ""val"": 2, ""ret"": None},
    {""method"": ""push"", ""val"": 3, ""ret"": None},
    {""method"": ""push"", ""val"": 2, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -2},
    {""method"": ""pop"", ""val"": None, ""ret"": 2},
    {""method"": ""top"", ""val"": None, ""ret"": 3},
    {""method"": ""getMin"", ""val"": None, ""ret"": -2},
    {""method"": ""push"", ""val"": -100, ""ret"": None},
    {""method"": ""push"", ""val"": 100, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -100},
    {""method"": ""pop"", ""val"": None, ""ret"": 100},
    {""method"": ""push"", ""val"": 0, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -100},
    {""method"": ""push"", ""val"": -200, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -200},
    {""method"": ""top"", ""val"": None, ""ret"": -200},
    {""method"": ""pop"", ""val"": None, ""ret"": -200},
    {""method"": ""push"", ""val"": 2**31-1, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -100},
    {""method"": ""push"", ""val"": -(2**31), ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -(2**31)},
    {""method"": ""push"", ""val"": -100, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -(2**31)}
]

obj = MinStack()

for test in params:
    
    if test[""method""] == ""push"":
        obj.push(test[""val""])
        result = obj.stack[-1]
        if result == test[""val""]:
            print(""\u2705 Test Passed."")
        else:
            print(f""\u274c Test Failed. Input: {test['method']}, val={test['val']}, expected: {test['ret']}, but got {result}"")
    elif test[""method""] == ""pop"":
        result = obj.pop()
        if result == test[""ret""]:
            print(""\u2705 Test Passed."")
        else:
            print(f""\u274c Test Failed. Input: {test['method']}, expected: {test['ret']}, but got {result}"")
    elif test[""method""] == ""top"":
        result = obj.top()
        if result == test[""ret""]:
            print(""\u2705 Test Passed."")
        else:
            print(f""\u274c Test Failed. Input: {test['method']}, expected: {test['ret']}, but got {result}"")
    elif test[""method""] == ""getMin"":
        result = obj.getMin()
        if result == test[""ret""]:
            print(""\u2705 Test Passed."")
        else:
            print(f""\u274c Test Failed. Input: {test['method']}, expected: {test['ret']}, but got {result}"")","let params = [
    {""method"": ""push"", ""val"": -2, ""ret"": None},
    {""method"": ""push"", ""val"": 0, ""ret"": None},
    {""method"": ""push"", ""val"": -3, ""ret"": None},
    {""method"": ""push"", ""val"": 5, ""ret"": None},
    {""method"": ""push"", ""val"": 3, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -3},
    {""method"": ""pop"", ""val"": None, ""ret"": 3},
    {""method"": ""top"", ""val"": None, ""ret"": 5},
    {""method"": ""getMin"", ""val"": None, ""ret"": -3},
    {""method"": ""push"", ""val"": -10, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -10},
    {""method"": ""pop"", ""val"": None, ""ret"": -10},
    {""method"": ""pop"", ""val"": None, ""ret"": 5},
    {""method"": ""pop"", ""val"": None, ""ret"": -3},
    {""method"": ""pop"", ""val"": None, ""ret"": 0},
    {""method"": ""getMin"", ""val"": None, ""ret"": -2},
    {""method"": ""push"", ""val"": 1, ""ret"": None},
    {""method"": ""push"", ""val"": 2, ""ret"": None},
    {""method"": ""push"", ""val"": 3, ""ret"": None},
    {""method"": ""push"", ""val"": 2, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -2},
    {""method"": ""pop"", ""val"": None, ""ret"": 2},
    {""method"": ""top"", ""val"": None, ""ret"": 3},
    {""method"": ""getMin"", ""val"": None, ""ret"": -2},
    {""method"": ""push"", ""val"": -100, ""ret"": None},
    {""method"": ""push"", ""val"": 100, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -100},
    {""method"": ""pop"", ""val"": None, ""ret"": 100},
    {""method"": ""push"", ""val"": 0, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -100},
    {""method"": ""push"", ""val"": -200, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -200},
    {""method"": ""top"", ""val"": None, ""ret"": -200},
    {""method"": ""pop"", ""val"": None, ""ret"": -200},
    {""method"": ""push"", ""val"": 2**31-1, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -100},
    {""method"": ""push"", ""val"": -(2**31), ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -(2**31)},
    {""method"": ""push"", ""val"": -100, ""ret"": None},
    {""method"": ""getMin"", ""val"": None, ""ret"": -(2**31)}
]

var obj = new MinStack()

for (let test of params) {
    if (test[""method""] === ""push"") {
        obj.push(test[""val""]);
        let result = obj.stack[obj.stack.length - 1];
        if (result === test[""val""]) {
            console.log(""\u2705 Test Passed."");
        } else {
            console.log(`\u274c Test Failed. Input: ${test[""method""]}, val=${test[""val""]}, expected: ${test[""ret""]}, but got ${result}`);
        }
    } else if (test[""method""] === ""pop"") {
        let result = obj.pop();
        if (result === test[""ret""]) {
            console.log(""\u2705 Test Passed."");
        } else {
            console.log(`\u274c Test Failed. Input: ${test[""method""]}, expected: ${test[""ret""]}, but got ${result}`);
        }
    } else if (test[""method""] === ""top"") {
        let result = obj.top();
        if (result === test[""ret""]) {
            console.log(""\u2705 Test Passed."");
        } else {
            console.log(`\u274c Test Failed. Input: ${test[""method""]}, expected: ${test[""ret""]}, but got ${result}`);
        }
    } else if (test[""method""] === ""getMin"") {
        let result = obj.getMin();
        if (result === test[""ret""]) {
            console.log(""\u2705 Test Passed."");
        } else {
            console.log(`\u274c Test Failed. Input: ${test[""method""]}, expected: ${test[""ret""]}, but got ${result}`);
        }
    }
}",,
63b595028ad4593d6b7b01e2,evaluate-reverse-polish-notation,"params = [    
    {""input"": [""2"",""1"",""+"",""3"",""*""], ""output"": 9},
    {""input"": [""4"",""13"",""5"",""/"",""+""], ""output"": 6},
    {""input"": [""10"",""6"",""9"",""3"",""+"",""-11"",""*"",""/"",""*"",""17"",""+"",""5"",""+""], ""output"": 22},
    {""input"": [""1"",""2"",""3"",""4"",""+"",""+"",""+""], ""output"": 10},
    {""input"": [""5"",""2"",""3"",""*"",""+""], ""output"": 11},
    {""input"": [""5"",""2"",""3"",""1"",""-"",""*"",""+""], ""output"": 9},
    {""input"": [""5"",""2"",""/"",""6"",""*"",""11"",""+""], ""output"": 23},
    {""input"": [""5"",""-2"",""-"",""6"",""*"",""35"",""+""], ""output"": 77},
    {""input"": [""5"",""2"",""-1"",""/"",""-232"",""+""], ""output"": -234},
    {""input"": [""5"",""2"",""3"",""+"",""-7"", ""*""], ""output"": -35},
    {""input"": [""1"",""2"",""3"",""4"",""5"",""*"",""*"",""*"",""+"", ""23"",""+""], ""output"": 144}
    
]

obj = Solution()

for test in params:
    input_arr = test[""input""]
    expected_output = test[""output""]
    result = obj.evalRPN(input_arr)
    if result == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_arr}, expected: {expected_output}, but got {result}"")","let params = [    
    {""input"": [""2"",""1"",""+"",""3"",""*""], ""output"": 9},
    {""input"": [""4"",""13"",""5"",""/"",""+""], ""output"": 6},
    {""input"": [""10"",""6"",""9"",""3"",""+"",""-11"",""*"",""/"",""*"",""17"",""+"",""5"",""+""], ""output"": 22},
    {""input"": [""1"",""2"",""3"",""4"",""+"",""+"",""+""], ""output"": 10},
    {""input"": [""5"",""2"",""3"",""*"",""+""], ""output"": 11},
    {""input"": [""5"",""2"",""3"",""1"",""-"",""*"",""+""], ""output"": 9},
    {""input"": [""5"",""2"",""/"",""6"",""*"",""11"",""+""], ""output"": 23},
    {""input"": [""5"",""-2"",""-"",""6"",""*"",""35"",""+""], ""output"": 77},
    {""input"": [""5"",""2"",""-1"",""/"",""-232"",""+""], ""output"": -234},
    {""input"": [""5"",""2"",""3"",""+"",""-7"", ""*""], ""output"": -35},
    {""input"": [""1"",""2"",""3"",""4"",""5"",""*"",""*"",""*"",""+"", ""23"",""+""], ""output"": 144}
    
]

for (let test of params) {
    let input_arr = test[""input""];
    let expected_output = test[""output""];
    let result = evalRPN(input_arr);
    if (result === expected_output) {
        console.log(""\u2705 Test Passed."");
    } else {
        console.log(`\u274c Test Failed. Input: ${input_arr}, expected: ${expected_output}, but got ${result}`);
    }
}",,
63b595038ad4593d6b7b01e3,generate-parentheses,"params = [
{""input"": 0, ""output"": ['']},
{""input"": 1, ""output"": [""()""]},
{""input"": 2, ""output"": [""(())"", ""()()""]},
{""input"": 3, ""output"": [""((()))"", ""(()())"", ""(())()"", ""()(())"", ""()()()""]},
{""input"": 4, ""output"": [""(((())))"", ""((()()))"", ""((())())"", ""((()))()"", ""(()(()))"", ""(()()())"", ""(()())()"", ""(())(())"", ""(())()()"", ""()((()))"", ""()(()())"", ""()(())()"", ""()()(())"", ""()()()()""]},
{""input"": 5, ""output},
{""input"": 7, ""output},
]


obj = Solution()

for test in params:
    input_n = test[""input""]
    expected_output = test[""output""]
    result = obj.generateParenthesis(input_n)
    if set(result) == set(expected_output):
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_n}, expected: {expected_output}, but got {result}"")","let params = [
    {""input"": 0, ""output"": ['']},
    {""input"": 1, ""output"": [""()""]},
    {""input"": 2, ""output"": [""(())"", ""()()""]},
    {""input"": 3, ""output"": [""((()))"", ""(()())"", ""(())()"", ""()(())"", ""()()()""]},
    {""input"": 4, ""output"": [""(((())))"", ""((()()))"", ""((())())"", ""((()))()"", ""(()(()))"", ""(()()())"", ""(()())()"", ""(())(())"", ""(())()()"", ""()((()))"", ""()(()())"", ""()(())()"", ""()()(())"", ""()()()()""]},
    {""input"": 5, ""output},
    {""input"": 7, ""output}
]

for (let i = 0; i < params.length; i++) {
    let test = params[i];
    let input_num = test[""input""];
    let expected_output = test[""output""];
    let result = generateParenthesis(input_num);
    if (result.sort().toString() === expected_output.sort().toString()) {
        console.log(""\u2705 Test Passed."");
    } else {
        console.log(`\u274c Test Failed. Input: ${input_num}, expected: ${expected_output}, but got ${result}`);
    }
}
    ",,
63b595038ad4593d6b7b01e4,daily-temperatures,"params = [
{""input"": [73,74,75,71,69,72,76,73], ""output"": [1,1,4,2,1,1,0,0]},
{""input"": [30,40,50,60], ""output"": [1,1,1,0]},
{""input"": [30,60,90], ""output"": [1,1,0]},
{""input"": [100,99,98,97,96], ""output"": [0,0,0,0,0]},
{""input"": [30,30,30,30,30], ""output"": [0,0,0,0,0]},
{""input"": [100,60,30,90,80], ""output"": [0, 2, 1, 0, 0]},
{""input"": [30,60,90,80,70], ""output"": [1, 1, 0, 0, 0]},
{""input"": [70,80,90,60,30], ""output"": [1, 1, 0, 0, 0]},
{""input"": [30,40,20,10,50], ""output"": [1, 3, 2, 1, 0]},
{""input"": [100,90,80,70,60], ""output"": [0,0,0,0,0]},
{""input"": [30,60,90,50,40,70,80], ""output"": [1, 1, 0, 2, 1, 1, 0]},
]

obj = Solution()
for test in params:
    input_arr = test[""input""]
    expected_output = test[""output""]
    result = obj.dailyTemperatures(input_arr)
    if result == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_arr}, expected: {expected_output}, but got {result}"")","let params = [
    {""input"": [73,74,75,71,69,72,76,73], ""output"": [1,1,4,2,1,1,0,0]},
    {""input"": [30,40,50,60], ""output"": [1,1,1,0]},
    {""input"": [30,60,90], ""output"": [1,1,0]},
    {""input"": [100,99,98,97,96], ""output"": [0,0,0,0,0]},
    {""input"": [30,30,30,30,30], ""output"": [0,0,0,0,0]},
    {""input"": [100,60,30,90,80], ""output"": [0, 2, 1, 0, 0]},
    {""input"": [30,60,90,80,70], ""output"": [1, 1, 0, 0, 0]},
    {""input"": [70,80,90,60,30], ""output"": [1, 1, 0, 0, 0]},
    {""input"": [30,40,20,10,50], ""output"": [1, 3, 2, 1, 0]},
    {""input"": [100,90,80,70,60], ""output"": [0,0,0,0,0]},
    {""input"": [30,60,90,50,40,70,80], ""output"": [1, 1, 0, 2, 1, 1, 0]},
    ]


for (let test of params) {
    let input_arr = test[""input""];
    let expected_output = test[""output""];
    let result = dailyTemperatures(input_arr);
    if (result === expected_output) {
        console.log(""\u2705 Test Passed."");
    } else {
        console.log(`\u274c Test Failed. Input: ${input_arr}, expected: ${expected_output}, but got ${result}`);
    }
}",,
63b595048ad4593d6b7b01e5,car-fleet,"params = [    
    {""input"": [12, [10,8,0,5,3], [2,4,1,1,3]], ""output"": 3},
    {""input"": [10, [3], [3]], ""output"": 1},
    {""input"": [100, [0,2,4], [4,2,1]], ""output"": 1},
    {""input"": [100, [0,1,2,3], [1,2,3,4]], ""output"": 4},
    {""input"": [100, [0,1,2,3], [4,3,2,1]], ""output"": 1},
    {""input"": [100, [0,1,2,3], [4,4,4,4]], ""output"": 4},
    {""input"": [100, [10,20,30,40,50], [1,1,1,1,1]], ""output"": 5},
    {""input"": [100, [10,20,30,40,50], [2,2,2,2,2]], ""output"": 5},
    {""input"": [100, [50,40,30,20,10], [1,1,1,1,1]], ""output"": 5},
    {""input"": [100, [50,40,30,20,10], [2,2,2,2,2]], ""output"": 5},
    {""input"": [100, [50,40,20,10,5,30,35], [2,2,2,2,2,2,2]], ""output"": 7},
    {""input"": [100, [50,50,50,50,50], [2,2,2,2,2]], ""output"": 1},
    {""input"": [100, [50,50,50,50,50], [1,1,1,1,1]], ""output"": 1},
    {""input"": [100, [0,1,2,3,4], [5,5,5,5,5]], ""output"": 5},
    {""input"": [100, [0,1,2,3,4], [4,4,4,4,4]], ""output"": 5},
    {""input"": [100, [0,1,2,3,4], [3,3,3,3,3]], ""output"": 5},
    {""input"": [100, [0,1,2,3,4], [2,2,2,2,2]], ""output"": 5},
    {""input"": [100, [0,1,2,3,4], [1,1,1,1,1]], ""output"": 5},

]

obj = Solution()
for test in params:
    target, position, speed = test[""input""]
    expected_output = test[""output""]
    result = obj.carFleet(target, position, speed)
    if result == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {target, position, speed}, expected: {expected_output}, but got {result}"")","let params = [    
    {""input"": [12, [10,8,0,5,3], [2,4,1,1,3]], ""output"": 3},
    {""input"": [10, [3], [3]], ""output"": 1},
    {""input"": [100, [0,2,4], [4,2,1]], ""output"": 1},
    {""input"": [100, [0,1,2,3], [1,2,3,4]], ""output"": 4},
    {""input"": [100, [0,1,2,3], [4,3,2,1]], ""output"": 1},
    {""input"": [100, [0,1,2,3], [4,4,4,4]], ""output"": 4},
    {""input"": [100, [10,20,30,40,50], [1,1,1,1,1]], ""output"": 5},
    {""input"": [100, [10,20,30,40,50], [2,2,2,2,2]], ""output"": 5},
    {""input"": [100, [50,40,30,20,10], [1,1,1,1,1]], ""output"": 5},
    {""input"": [100, [50,40,30,20,10], [2,2,2,2,2]], ""output"": 5},
    {""input"": [100, [50,40,20,10,5,30,35], [2,2,2,2,2,2,2]], ""output"": 7},
    {""input"": [100, [50,50,50,50,50], [2,2,2,2,2]], ""output"": 1},
    {""input"": [100, [50,50,50,50,50], [1,1,1,1,1]], ""output"": 1},
    {""input"": [100, [0,1,2,3,4], [5,5,5,5,5]], ""output"": 5},
    {""input"": [100, [0,1,2,3,4], [4,4,4,4,4]], ""output"": 5},
    {""input"": [100, [0,1,2,3,4], [3,3,3,3,3]], ""output"": 5},
    {""input"": [100, [0,1,2,3,4], [2,2,2,2,2]], ""output"": 5},
    {""input"": [100, [0,1,2,3,4], [1,1,1,1,1]], ""output"": 5},

]


for (let test of params) {
    let input_arr = test[""input""];
    let expected_output = test[""output""];
    let result = carFleet(input_arr[0],input_arr[1],input_arr[2]);
    if (result === expected_output) {
        console.log(""\u2705 Test Passed."");
    } else {
        console.log(`\u274c Test Failed. Input: ${input_arr}, expected: ${expected_output}, but got ${result}`);
    }
}",,
63b595058ad4593d6b7b01e6,largest-rectangle-in-histogram,"params = [
{""input"": [2,1,5,6,2,3], ""output"": 10},
{""input"": [2,4], ""output"": 4},
{""input"": [1,1], ""output"": 2},
{""input"": [1,2,3,4,5], ""output"": 9},
{""input"": [5,4,3,2,1], ""output"": 9},
{""input"": [1,2,2,3,1], ""output"": 6},
{""input"": [1,2,3,4,5,6,7,8,9,10], ""output"": 30},
{""input"": [10,9,8,7,6,5,4,3,2,1], ""output"": 30},
{""input"": [1,2,2,2,3,3,3,4,4,4], ""output"": 18},
{""input"": [4,4,4,3,3,3,2,2,2,1], ""output"": 18},
{""input"": [4,4,4,4,4,3,3,3,3,3], ""output"": 30},
{""input"": [4,4,4,4,4,4,4,4,4,4], ""output"": 40},
{""input"": [1,1,1,1,1,1,1,1,1,1], ""output"": 10},
{""input"": [1,1,1,2,2,2,3,3,3,4], ""output"": 14},
{""input"": [10,8,6,4,2], ""output"": 18},
{""input"": [10,8,6,4,2,2,2,2,2,2], ""output"": 20},
{""input"": [10,10,10,10,10,10,10,10,10,10], ""output"": 100},
{""input"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], ""output"": 64},
{""input"": [10,9,8,7,6,5,4,3,2,1,1,1,1,1,1], ""output"": 30},
{""input"": [1,2,3,4,5,5,5,5,5,5,5,5,5,5,5], ""output"": 55}
]

obj = Solution()

for test in params:
    input_arr = test[""input""]
    expected_output = test[""output""]
    result = obj.largestRectangleArea(input_arr)
    if result == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_arr}, expected: {expected_output}, but got {result}"")","let params = [
    {""input"": [2,1,5,6,2,3], ""output"": 10},
    {""input"": [2,4], ""output"": 4},
    {""input"": [1,1], ""output"": 2},
    {""input"": [1,2,3,4,5], ""output"": 9},
    {""input"": [5,4,3,2,1], ""output"": 9},
    {""input"": [1,2,2,3,1], ""output"": 6},
    {""input"": [1,2,3,4,5,6,7,8,9,10], ""output"": 30},
    {""input"": [10,9,8,7,6,5,4,3,2,1], ""output"": 30},
    {""input"": [1,2,2,2,3,3,3,4,4,4], ""output"": 18},
    {""input"": [4,4,4,3,3,3,2,2,2,1], ""output"": 18},
    {""input"": [4,4,4,4,4,3,3,3,3,3], ""output"": 30},
    {""input"": [4,4,4,4,4,4,4,4,4,4], ""output"": 40},
    {""input"": [1,1,1,1,1,1,1,1,1,1], ""output"": 10},
    {""input"": [1,1,1,2,2,2,3,3,3,4], ""output"": 14},
    {""input"": [10,8,6,4,2], ""output"": 18},
    {""input"": [10,8,6,4,2,2,2,2,2,2], ""output"": 20},
    {""input"": [10,10,10,10,10,10,10,10,10,10], ""output"": 100},
    {""input"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], ""output"": 64},
    {""input"": [10,9,8,7,6,5,4,3,2,1,1,1,1,1,1], ""output"": 30},
    {""input"": [1,2,3,4,5,5,5,5,5,5,5,5,5,5,5], ""output"": 55}
    ]

for (let test of params) {
    let input_arr = test[""input""];
    let expected_output = test[""output""];
    let result = largestRectangleArea(input_arr);
    if (result === expected_output) {
        console.log(""\u2705 Test Passed."");
    } else {
        console.log(`\u274c Test Failed. Input: ${input_arr}, expected: ${expected_output}, but got ${result}`);
    }
}
    ",,
63b595068ad4593d6b7b01e7,binary-search,"params = [
{""input"": [[-1,0,3,5,9,12], 9], ""output"": 4},
{""input"": [[-1,0,3,5,9,12], 2], ""output"": -1},
{""input"": [[1,2,3,4,5,6,7,8,9,10], 7], ""output"": 6},
{""input"": [[-10,-5,0,5,10], -5], ""output"": 1},
{""input"": [[-10,-5,0,5,10], -11], ""output"": -1},
{""input"": [[-10,-5,0,5,10], 11], ""output"": -1},
{""input"": [[1,1,1,1,1,1,1,1,1,1,1], 1], ""output"": 5},
{""input"": [[1,1,1,1,1,1,1,1,1,1,1], 2], ""output"": -1},
{""input"": [[1,2,3,4,5,6,7,8,9,10], 10], ""output"": 9},
{""input"": [[1,2,3,4,5,6,7,8,9,10], 0], ""output"": -1},
{""input"": [[-100,-50,0,50,100], -50], ""output"": 1},
{""input"": [[-100,-50,0,50,100], 110], ""output"": -1},
{""input"": [[-100,-50,0,50,100], -110], ""output"": -1},
{""input"": [[1,2,3,4,5,6,7,8,9,10], 5], ""output"": 4},
{""input"": [[1,2,3,4,5,6,7,8,9,10], 6], ""output"": 5},
{""input"": [[1,2,3,4,5,6,7,8,9,10], 4], ""output"": 3},
{""input"": [[1,2,3,4,5,6,7,8,9,10], 1], ""output"": 0},
{""input"": [[1,2,3,4,5,6,7,8,9,10], 10], ""output"": 9},
{""input"": [[1,2,3,4,5,6,7,8,9,10], -1], ""output"": -1},
{""input"": [[1,2,3,4,5,6,7,8,9,10], 0], ""output"": -1},
]


obj = Solution()
for test in params:
    input_arr = test[""input""]
    expected_output = test[""output""]
    result = obj.search(input_arr[0], input_arr[1])
    if result == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_arr}, expected: {expected_output}, but got {result}"")","let params = [
    {""input"": [[-1,0,3,5,9,12], 9], ""output"": 4},
    {""input"": [[-1,0,3,5,9,12], 2], ""output"": -1},
    {""input"": [[1,2,3,4,5,6,7,8,9,10], 7], ""output"": 6},
    {""input"": [[-10,-5,0,5,10], -5], ""output"": 1},
    {""input"": [[-10,-5,0,5,10], -11], ""output"": -1},
    {""input"": [[-10,-5,0,5,10], 11], ""output"": -1},
    {""input"": [[1,1,1,1,1,1,1,1,1,1,1], 1], ""output"": 5},
    {""input"": [[1,1,1,1,1,1,1,1,1,1,1], 2], ""output"": -1},
    {""input"": [[1,2,3,4,5,6,7,8,9,10], 10], ""output"": 9},
    {""input"": [[1,2,3,4,5,6,7,8,9,10], 0], ""output"": -1},
    {""input"": [[-100,-50,0,50,100], -50], ""output"": 1},
    {""input"": [[-100,-50,0,50,100], 110], ""output"": -1},
    {""input"": [[-100,-50,0,50,100], -110], ""output"": -1},
    {""input"": [[1,2,3,4,5,6,7,8,9,10], 5], ""output"": 4},
    {""input"": [[1,2,3,4,5,6,7,8,9,10], 6], ""output"": 5},
    {""input"": [[1,2,3,4,5,6,7,8,9,10], 4], ""output"": 3},
    {""input"": [[1,2,3,4,5,6,7,8,9,10], 1], ""output"": 0},
    {""input"": [[1,2,3,4,5,6,7,8,9,10], 10], ""output"": 9},
    {""input"": [[1,2,3,4,5,6,7,8,9,10], -1], ""output"": -1},
    {""input"": [[1,2,3,4,5,6,7,8,9,10], 0], ""output"": -1},
    ]

for (let i = 0; i < params.length; i++) {
    let input = params[i].input
    let expected_output = params[i].output
    let result = search(input[0], input[1])
    if (result === expected_output) {
        console.log(""\u2705 Test Passed."")
    } else {
        console.log(`\u274c Test Failed. Input: ${input}, expected: ${expected_output}, but got ${result}`)
    }
}
    ",,
63b595078ad4593d6b7b01e8,search-a-2d-matrix,"params = [
{""input"": [[[1,3,5,7],[10,11,16,20],[23,30,34,60]], 3], ""output"": True},
{""input"": [[[1,3,5,7],[10,11,16,20],[23,30,34,60]], 13], ""output"": False},
{""input"": [[[1,2,3],[4,5,6],[7,8,9]], 5], ""output"": True},
{""input"": [[[1,2,3],[4,5,6],[7,8,9]], 10], ""output"": False},
{""input"": [[[1,1,1,1],[1,1,1,1],[1,1,1,1]], 1], ""output"": True},
{""input"": [[[1,1,1,1],[1,1,1,1],[1,1,1,1]], 2], ""output"": False},
{""input"": [[[-10,-5,0,5,10],[-10,-5,0,5,10]], -5], ""output"": True},
{""input"": [[[-10,-5,0,5,10],[-10,-5,0,5,10]], -11], ""output"": False},
{""input"": [[[-10,-5,0,5,10],[-10,-5,0,5,10]], 11], ""output"": False},
{""input"": [[[-10,0,10,20],[-10,0,10,20]], -10], ""output"": True},
{""input"": [[[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]], 15], ""output"": True},
{""input"": [[[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]], 20], ""output"": False},
{""input"": [[[-10,-5,0,5,10],[-10,-5,0,5,10],[-10,-5,0,5,10]], -5], ""output"": True},
{""input"": [[[-10,-5,0,5,10],[-10,-5,0,5,10],[-10,-5,0,5,10]], -11], ""output"": False},
{""input"": [[[-10,-5,0,5,10],[-10,-5,0,5,10],[-10,-5,0,5,10]], 11], ""output"": False},
{""input"": [[[-10,0,10,20],[-10,0,10,20],[-10,0,10,20]], -10], ""output"": True},
{""input"": [[[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1]], 2], ""output"": False},
{""input"": [[[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]], 12], ""output"": True},
{""input"": [[[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]], 0], ""output"": False},
{""input"": [[[-10,-5,0,5,10],[-10,-5,0,5,10],[-10,-5,0,5,10]], -5], ""output"": True},
]

obj = Solution()
for test in params:
    input_arr = test[""input""]
    expected_output = test[""output""]
    result = obj.searchMatrix(input_arr[0], input_arr[1])
    if result == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_arr}, expected: {expected_output}, but got {result}"")
","let params = [
    {""input"": [[[1,3,5,7],[10,11,16,20],[23,30,34,60]], 3], ""output"": true},
    {""input"": [[[1,3,5,7],[10,11,16,20],[23,30,34,60]], 13], ""output"": false},
    {""input"": [[[1,2,3],[4,5,6],[7,8,9]], 5], ""output"": true},
    {""input"": [[[1,2,3],[4,5,6],[7,8,9]], 10], ""output"": false},
    {""input"": [[[1,1,1,1],[1,1,1,1],[1,1,1,1]], 1], ""output"": true},
    {""input"": [[[1,1,1,1],[1,1,1,1],[1,1,1,1]], 2], ""output"": false},
    {""input"": [[[-10,-5,0,5,10],[-10,-5,0,5,10]], -5], ""output"": true},
    {""input"": [[[-10,-5,0,5,10],[-10,-5,0,5,10]], -11], ""output"": false},
    {""input"": [[[-10,-5,0,5,10],[-10,-5,0,5,10]], 11], ""output"": false},
    {""input"": [[[-10,0,10,20],[-10,0,10,20]], -10], ""output"": true},
    {""input"": [[[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]], 15], ""output"": true},
    {""input"": [[[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]], 20], ""output"": false},
    {""input"": [[[-10,-5,0,5,10],[-10,-5,0,5,10],[-10,-5,0,5,10]], -5], ""output"": true},
    {""input"": [[[-10,-5,0,5,10],[-10,-5,0,5,10],[-10,-5,0,5,10]], -11], ""output"": false},
    {""input"": [[[-10,-5,0,5,10],[-10,-5,0,5,10],[-10,-5,0,5,10]], 11], ""output"": false},
    {""input"": [[[-10,0,10,20],[-10,0,10,20],[-10,0,10,20]], -10], ""output"": true},
    {""input"": [[[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1]], 2], ""output"": false},
    {""input"": [[[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]], 12], ""output"": true},
    {""input"": [[[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]], 0], ""output"": false},
    {""input"": [[[-10,-5,0,5,10],[-10,-5,0,5,10],[-10,-5,0,5,10]], -5], ""output"": true},
    ]
    
for (let test of params) {
    let input_arr = test[""input""];
    let expected_output = test[""output""];
    let result = obj.searchMatrix(input_arr[0], input_arr[1]);
    if (result === expected_output) {
        console.log(""\u2705 Test Passed."");
    } else {
        console.log(`\u274c Test Failed. Input: ${input_arr}, expected: ${expected_output}, but got ${result}`);
    }
}    ",,
63b595088ad4593d6b7b01e9,koko-eating-bananas,"params = [
{""input"": [[3,6,7,11], 8], ""output"": 4},
{""input"": [[30,11,23,4,20], 5], ""output"": 30},
{""input"": [[30,11,23,4,20], 6], ""output"": 23},
{""input"": [[1,2,3,4,5], 1], ""output"": 5},
{""input"": [[1,2,3,4,5], 2], ""output"": 5},
{""input"": [[1,1,1,1,1], 5], ""output"": 1},
{""input"": [[1,1,1,1,1], 6], ""output"": 1},
{""input"": [[1,1,1,1,1], 4], ""output"": 1},
{""input"": [[1,1,1,1,1,1,1,1,1,1,1], 11], ""output"": 1},
{""input"": [[1,1,1,1,1,1,1,1,1,1,1], 10], ""output"": 1},
{""input"": [[1,1,1,1,1,1,1,1,1,1], 1], ""output"": 1},
{""input"": [[1,1,1,1,1,1,1,1,1,1], 2], ""output"": 1},
{""input"": [[1,2,3,4,5,6,7,8,9], 10], ""output"": 8},
{""input"": [[10, 20, 30, 40, 50], 5], ""output"": 50},
{""input"": [[1000000], 1], ""output"": 1000000},
{""input"": [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 100], ""output"": 1},
{""input"": [[1, 2, 3, 4, 5, 6, 1, 8, 9, 1], 9], ""output"": 9},
{""input"": [[1, 2, 3, 1, 5, 6, 7, 8, 9, 10], 7], ""output"": 10},
{""input"": [[1, 2, 3, 4, 5, 6, 7, 8, 9, 2], 30], ""output"": 2},
{""input"": [[1, 2, 3, 4, 5, 20, 7, 8, 9, 10], 5], ""output"": 20},
{""input"": [[1, 2, 99, 4, 5, 6, 7, 8, 9, 10], 22], ""output"": 9},
{""input"": [[1, 2, 3, 4, 5, 6, 7, 44, 9, 10], 3], ""output"": 44},
{""input"": [[1], 3], ""output"": 1},
]


obj = Solution()
for test in params:
    input_arr = test[""input""]
    expected_output = test[""output""]
    result = obj.minEatingSpeed(input_arr[0], input_arr[1])
    if result == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_arr}, expected: {expected_output}, but got {result}"")","let params = [
    {""input"": [[3,6,7,11], 8], ""output"": 4},
    {""input"": [[30,11,23,4,20], 5], ""output"": 30},
    {""input"": [[30,11,23,4,20], 6], ""output"": 23},
    {""input"": [[1,2,3,4,5], 1], ""output"": 5},
    {""input"": [[1,2,3,4,5], 2], ""output"": 5},
    {""input"": [[1,1,1,1,1], 5], ""output"": 1},
    {""input"": [[1,1,1,1,1], 6], ""output"": 1},
    {""input"": [[1,1,1,1,1], 4], ""output"": 1},
    {""input"": [[1,1,1,1,1,1,1,1,1,1,1], 11], ""output"": 1},
    {""input"": [[1,1,1,1,1,1,1,1,1,1,1], 10], ""output"": 1},
    {""input"": [[1,1,1,1,1,1,1,1,1,1], 1], ""output"": 1},
    {""input"": [[1,1,1,1,1,1,1,1,1,1], 2], ""output"": 1},
    {""input"": [[1,2,3,4,5,6,7,8,9], 10], ""output"": 8},
    {""input"": [[10, 20, 30, 40, 50], 5], ""output"": 50},
    {""input"": [[1000000], 1], ""output"": 1000000},
    {""input"": [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 100], ""output"": 1},
    {""input"": [[1, 2, 3, 4, 5, 6, 1, 8, 9, 1], 9], ""output"": 9},
    {""input"": [[1, 2, 3, 1, 5, 6, 7, 8, 9, 10], 7], ""output"": 10},
    {""input"": [[1, 2, 3, 4, 5, 6, 7, 8, 9, 2], 30], ""output"": 2},
    {""input"": [[1, 2, 3, 4, 5, 20, 7, 8, 9, 10], 5], ""output"": 20},
    {""input"": [[1, 2, 99, 4, 5, 6, 7, 8, 9, 10], 22], ""output"": 9},
    {""input"": [[1, 2, 3, 4, 5, 6, 7, 44, 9, 10], 3], ""output"": 44},
    {""input"": [[1], 3], ""output"": 1},
    ]

for (let test of params) {
    let input_arr = test[""input""];
    let expected_output = test[""output""];
    let result = minEatingSpeed(input_arr[0], input_arr[1]);
    if (result === expected_output) {
        console.log(""\u2705 Test Passed."");
    } else {
        console.log(`\u274c Test Failed. Input: ${input_arr}, expected: ${expected_output}, but got ${result}`);
    }
}",,
63b595098ad4593d6b7b01ea,find-minimum-in-rotated-sorted-array,"params = [
{""input"": [3,4,5,1,2], ""output"": 1},
{""input"": [4,5,6,7,0,1,2], ""output"": 0},
{""input"": [11,13,15,17], ""output"": 11},
{""input"": [1,2,3,4,5,6,7], ""output"": 1},
{""input"": [7,1,2,3,4,5,6], ""output"": 1},
{""input"": [6,7,1,2,3,4,5], ""output"": 1},
{""input"": [5,6,7,1,2,3,4], ""output"": 1},
{""input"": [4,5,6,7,8,9,10,11,12,13,14,15,16], ""output"": 4},
{""input"": [4], ""output"": 4},
{""input"": [4,5], ""output"": 4},
]

obj = Solution()

for test in params:
    input_arr = test[""input""]
    expected_output = test[""output""]
    result = obj.findMin(input_arr)
    if result == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_arr}, expected: {expected_output}, but got {result}"")","let params = [
    {""input"": [3,4,5,1,2], ""output"": 1},
    {""input"": [4,5,6,7,0,1,2], ""output"": 0},
    {""input"": [11,13,15,17], ""output"": 11},
    {""input"": [1,2,3,4,5,6,7], ""output"": 1},
    {""input"": [7,1,2,3,4,5,6], ""output"": 1},
    {""input"": [6,7,1,2,3,4,5], ""output"": 1},
    {""input"": [5,6,7,1,2,3,4], ""output"": 1},
    {""input"": [4,5,6,7,8,9,10,11,12,13,14,15,16], ""output"": 4},
    {""input"": [4], ""output"": 4},
    {""input"": [4,5], ""output"": 4},
    ]

for (let test of params) {
    let input_arr = test[""input""];
    let expected_output = test[""output""];
    let result = findMin(input_arr);
    if (result === expected_output) {
        console.log(""\u2705 Test Passed."")
    } else {
        console.log(`\u274c Test Failed. Input: ${input_arr}, expected: ${expected_output}, but got ${result}`)
    }
}",,
63b5950a8ad4593d6b7b01eb,search-in-rotated-sorted-array,"params = [
{""input"": [[4,5,6,7,0,1,2], 0], ""output"": 4},
{""input"": [[4,5,6,7,0,1,2], 3], ""output"": -1},
{""input"": [[1], 0], ""output"": -1},
{""input"": [[1,2,3,4,5], 5], ""output"": 4},
{""input"": [[1,2,3,4,5], 1], ""output"": 0},
{""input"": [[5,1,2,3,4], 5], ""output"": 0},
{""input"": [[5,1,2,3,4], 1], ""output"": 1},
{""input"": [[5,1,2,3,4], 2], ""output"": 2},
{""input"": [[5,1,2,3,4], 3], ""output"": 3},
{""input"": [[5,1,2,3,4], 4], ""output"": 4},
{""input"": [[5,1,2,3,4], 6], ""output"": -1},
{""input"": [[4,5,6,7,8,9,10], 11], ""output"": -1},
{""input"": [[4,5,6,7,8,9,10], 3], ""output"": -1},
{""input"": [[1,2,3,4,5,6], 6], ""output"": 5},
{""input"": [[1,2,3,4,5,6], 2], ""output"": 1},
{""input"": [[5,6,7,8,9,1,2], 6], ""output"": 1},
{""input"": [[5,6,7,8,9,1,2], 2], ""output"": 6},
{""input"": [[5,6,7,8,9,1,2], 9], ""output"": 4},
{""input"": [[5,6,7,8,9,1,2], 4], ""output"": -1},
{""input"": [[5,6,7,8,9,1,2], 0], ""output"": -1},
{""input"": [[5,6,7,8,9,1,2], 1], ""output"": 5}
]


obj = Solution()

for test in params:
    input_arr = test[""input""]
    expected_output = test[""output""]
    result = obj.search(*input_arr)
    if result == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_arr}, expected: {expected_output}, but got {result}"")","let params = [
    {""input"": [[4,5,6,7,0,1,2], 0], ""output"": 4},
    {""input"": [[4,5,6,7,0,1,2], 3], ""output"": -1},
    {""input"": [[1], 0], ""output"": -1},
    {""input"": [[1,2,3,4,5], 5], ""output"": 4},
    {""input"": [[1,2,3,4,5], 1], ""output"": 0},
    {""input"": [[5,1,2,3,4], 5], ""output"": 0},
    {""input"": [[5,1,2,3,4], 1], ""output"": 1},
    {""input"": [[5,1,2,3,4], 2], ""output"": 2},
    {""input"": [[5,1,2,3,4], 3], ""output"": 3},
    {""input"": [[5,1,2,3,4], 4], ""output"": 4},
    {""input"": [[5,1,2,3,4], 6], ""output"": -1},
    {""input"": [[4,5,6,7,8,9,10], 11], ""output"": -1},
    {""input"": [[4,5,6,7,8,9,10], 3], ""output"": -1},
    {""input"": [[1,2,3,4,5,6], 6], ""output"": 5},
    {""input"": [[1,2,3,4,5,6], 2], ""output"": 1},
    {""input"": [[5,6,7,8,9,1,2], 6], ""output"": 1},
    {""input"": [[5,6,7,8,9,1,2], 2], ""output"": 6},
    {""input"": [[5,6,7,8,9,1,2], 9], ""output"": 4},
    {""input"": [[5,6,7,8,9,1,2], 4], ""output"": -1},
    {""input"": [[5,6,7,8,9,1,2], 0], ""output"": -1},
    {""input"": [[5,6,7,8,9,1,2], 1], ""output"": 5}
    ]

for (const test of params) {
    let input_arr = test[""input""];
    let expected_output = test[""output""];
    let result = findMin(input_arr[0], input_arr[1]);
    if (result === expected_output) {
        console.log(""\u2705 Test Passed."");
    } else {
        console.log(`\u274c Test Failed. Input: ${input_arr}, expected: ${expected_output}, but got ${result}`);
    }
}",,
63b5950c8ad4593d6b7b01ec,time-based-key-value-store,"params = [
    {
        ""input"": [[""foo"", ""bar"", 1], [""foo"", 1]], 
        ""output"": ""bar""
    },
    {
        ""input"": [[""bar"", ""tron"", 2], [""bar"", 3]], 
        ""output"": ""tron""
    },
    {
        ""input"": [[""toston"", ""new"", 3], [""foo"", 2]], 
        ""output"": ""bar""
    },
    {
        ""input"": [[""foo"", ""toston"", 3], [""foo"", 3]], 
        ""output"": ""toston""
    },
    {
        ""input"": [[""george"", ""hello"", 10], [""george"", 5]], 
        ""output"": """"
    },
    {
        ""input"": [[""foo"", ""fasdf"", 10], [""foo"", 10]], 
        ""output"": ""fasdf""
    },
    {
        ""input"": [[""foo"", ""bar"", 10], [""foo"", -1]], 
        ""output"": """"
    },
    {
        ""input"": [[""great"", ""you"", 11], [""foo"", 1]], 
        ""output"": ""bar""
    },
    {
        ""input"": [[""are"", ""are"", 12], [""bar"", -1]], 
        ""output"": """"
    },
    {
        ""input"": [[""new"", ""great"", 13], [""great"", 12]], 
        ""output"": ""you""
    },
    {
        ""input"": [[""foo"", ""bar"", 14], [""are"", 1]], 
        ""output"": """"
    },
    {
        ""input"": [[""foo"", ""new"", 14], [""None"", 1]], 
        ""output"": """"
    },
    {
        ""input"": [[""nor"", ""here"", 15], [""george"", 9]], 
        ""output"": """"
    },
    {
        ""input"": [[""there"", ""nor"", 16], [""there"", 16]], 
        ""output"": ""nor""
    },
    {
        ""input"": [[""foo"", ""there"", 17], [""new"", 20]], 
        ""output"": ""great""
    }
]

timeMap = TimeMap()
for test in params:
    input_arr = test[""input""]
    expected_output = test[""output""]
    timeMap.set(input_arr[0][0], input_arr[0][1], input_arr[0][2])
    result = timeMap.get(input_arr[1][0], input_arr[1][1])
    if result == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_arr}, expected: {expected_output}, but got {result}"")","let params = [
    {
        ""input"": [[""foo"", ""bar"", 1], [""foo"", 1]], 
        ""output"": ""bar""
    },
    {
        ""input"": [[""bar"", ""tron"", 2], [""bar"", 3]], 
        ""output"": ""tron""
    },
    {
        ""input"": [[""toston"", ""new"", 3], [""foo"", 2]], 
        ""output"": ""bar""
    },
    {
        ""input"": [[""foo"", ""toston"", 3], [""foo"", 3]], 
        ""output"": ""toston""
    },
    {
        ""input"": [[""george"", ""hello"", 10], [""george"", 5]], 
        ""output"": """"
    },
    {
        ""input"": [[""foo"", ""fasdf"", 10], [""foo"", 10]], 
        ""output"": ""fasdf""
    },
    {
        ""input"": [[""foo"", ""bar"", 10], [""foo"", -1]], 
        ""output"": """"
    },
    {
        ""input"": [[""great"", ""you"", 11], [""foo"", 1]], 
        ""output"": ""bar""
    },
    {
        ""input"": [[""are"", ""are"", 12], [""bar"", -1]], 
        ""output"": """"
    },
    {
        ""input"": [[""new"", ""great"", 13], [""great"", 12]], 
        ""output"": ""you""
    },
    {
        ""input"": [[""foo"", ""bar"", 14], [""are"", 1]], 
        ""output"": """"
    },
    {
        ""input"": [[""foo"", ""new"", 14], [""None"", 1]], 
        ""output"": """"
    },
    {
        ""input"": [[""nor"", ""here"", 15], [""george"", 9]], 
        ""output"": """"
    },
    {
        ""input"": [[""there"", ""nor"", 16], [""there"", 16]], 
        ""output"": ""nor""
    },
    {
        ""input"": [[""foo"", ""there"", 17], [""new"", 20]], 
        ""output"": ""great""
    }
]


let timeMap = new TimeMap();

for (let i = 0; i < params.length; i++) {
    let input_arr = params[i][""input""];
    let expected_output = params[i][""output""];
    timeMap.set(input_arr[0][0], input_arr[0][1], input_arr[0][2]);
    let result = timeMap.get(input_arr[1][0], input_arr[1][1]);
    if (result === expected_output) {
        console.log(""\u2705 Test Passed."");
    } else {
        console.log(`\u274c Test Failed. Input: ${input_arr}, expected: ${expected_output}, but got ${result}`);
    }
}",,
63b5950d8ad4593d6b7b01ed,median-of-two-sorted-arrays,"params = [
{
""input"": [[1,3],[2]],
""output"": 2.00000
},
{
""input"": [[1,2],[3,4]],
""output"": 2.50000
},
{
""input"": [[],[2]],
""output"": 2.0
},
{
""input"": [[1,2,3,4],[5,6,7,8]],
""output"": 4.5
},
{
""input"": [[1],[2,3]],
""output"": 2.0
},
{
""input"": [[1,2,3],[4,5,6,7,8]],
""output"": 4.5
},
{
""input"": [[1,2,3,4,5,6,7,8],[9,10,11,12,13]],
""output"": 7.0
},
{
""input"": [[1,2,3,4,5],[6,7,8,9,10,11,12]],
""output"": 6.5
},
{
""input"": [[-4,-2,0,2,4],[-3,-1,1,3,5,6]],
""output"": 1
},
{
""input"": [[],[1,2,3,4,5,6,7,8,9]],
""output"": 5.0
},
{
""input"": [[-10,-5,0,5,10],[-15,-10,-5,0,5]],
""output"": -2.5
}
]

obj = Solution()

for test in params:
    input_arr = test[""input""]
    expected_output = test[""output""]
    result = obj.findMedianSortedArrays(input_arr[0], input_arr[1])
    if result == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_arr}, expected: {expected_output}, but got {result}"")","let params = [
    {
    ""input"": [[1,3],[2]],
    ""output"": 2.00000
    },
    {
    ""input"": [[1,2],[3,4]],
    ""output"": 2.50000
    },
    {
    ""input"": [[],[2]],
    ""output"": 2.0
    },
    {
    ""input"": [[1,2,3,4],[5,6,7,8]],
    ""output"": 4.5
    },
    {
    ""input"": [[1],[2,3]],
    ""output"": 2.0
    },
    {
    ""input"": [[1,2,3],[4,5,6,7,8]],
    ""output"": 4.5
    },
    {
    ""input"": [[1,2,3,4,5,6,7,8],[9,10,11,12,13]],
    ""output"": 7.0
    },
    {
    ""input"": [[1,2,3,4,5],[6,7,8,9,10,11,12]],
    ""output"": 6.5
    },
    {
    ""input"": [[-4,-2,0,2,4],[-3,-1,1,3,5,6]],
    ""output"": 1
    },
    {
    ""input"": [[],[1,2,3,4,5,6,7,8,9]],
    ""output"": 5.0
    },
    {
    ""input"": [[-10,-5,0,5,10],[-15,-10,-5,0,5]],
    ""output"": -2.5
    }
]

for (let i = 0; i < params.length; i++) {
    let input = params[i][""input""];
    let expected_output = params[i][""output""];
    let result = findMedianSortedArrays(input[0], input[1]);
    if (result === expected_output) {
        console.log(""\u2705 Test Passed."")
    } else {
        console.log(`\u274c Test Failed. Input: ${input}, expected: ${expected_output}, but got ${result}`);
    }
}",,
63b5950e8ad4593d6b7b01ee,reverse-linked-list,"params = [    
    {   
        ""input"": [1,2,3,4,5], 
        ""output"": [5,4,3,2,1]
    },
    {
        ""input"": [1,2], 
        ""output"": [2,1]
    },
    {
        ""input"": [], 
        ""output"": []
    },
    {
        ""input"": [1], 
        ""output"": [1]
    },
    {
        ""input"": [1,1,1,1], 
        ""output"": [1,1,1,1]
    },
    {
        ""input"": [-1,0,1], 
        ""output"": [1,0,-1]
    },
    {
        ""input"": [1,2,3,-1,-2,-3], 
        ""output"": [-3,-2,-1,3,2,1]
    },
    {
        ""input"": [1000,2000,3000,4000,5000], 
        ""output"": [5000,4000,3000,2000,1000]
    },
    {
        ""input"": [-1000,-2000,-3000,-4000,-5000], 
        ""output"": [-5000,-4000,-3000,-2000,-1000]
    },
    {
        ""input"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], 
        ""output"": [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]
    },
    {
        ""input"": [5,5,5,5,5,5,5], 
        ""output"": [5,5,5,5,5,5,5]
    },
    {
        ""input"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], 
        ""output"": [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]
    },
]

obj = Solution()

for test in params:
    input_list = test[""input""]
    expected_output = test[""output""]
    head = None
    for val in input_list[::-1]:
        head = ListNode(val, head)
    result = obj.reverseList(head)
    result_list = []
    while result:
        result_list.append(result.val)
        result = result.next
    if result_list == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_list}, expected: {expected_output}, but got {result_list}"")","let params = [ 
    { 
    ""input"": [[1,2,4], [1,3,4]],
    ""output"": [1,1,2,3,4,4]
    },
    {
    ""input"": [[],[]],
    ""output"": []
    },
    {
    ""input"": [[],[0]],
    ""output"": [0]
    },
    {
    ""input"": [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20]],
    ""output"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
    },
    {
    ""input"": [[-1,0,1],[-2,-1,0,1,2]],
    ""output"": [-2, -1, -1, 0, 0, 1, 1, 2]
    },
    {
    ""input"": [[1,2,3,4],[5,6,7,8]],
    ""output"": [1,2,3,4,5,6,7,8]
    },
    {
    ""input"": [[1,1,1,1],[2,2,2,2]],
    ""output"": [1,1,1,1,2,2,2,2]
    },
    {
    ""input"": [[-100,-50,0,50,100],[-100,-50,0,50,100]],
    ""output"": [-100,-100,-50,-50,0,0,50,50,100,100]
    },
    {
    ""input"": [[1,3,5,7,9],[2,4,6,8,10]],
    ""output"": [1,2,3,4,5,6,7,8,9,10]
    },
    {
    ""input"": [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20]],
    ""output"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
    }
]

var mergeTwoLists = function(l1, l2) {
    var mergedHead = { val : -1, next : null },
        crt = mergedHead;
    while(l1 && l2) {
        if(l1.val > l2.val) {
            crt.next = l2;
            l2 = l2.next;
        } else {
            crt.next = l1;
            l1 = l1.next;
        }
        crt = crt.next;
    }
    crt.next = l1 || l2;
    
    return mergedHead.next;
};


for (const test of params) {
    let list1 = test[""input""][0];
    let list2 = test[""input""][1];
    let head1 = null;
    let head2 = null;
    let current1 = head1;
    let current2 = head2;
    for(let i = 0; i < list1.length; i++){
        if(!current1){
            current1 = new ListNode(list1[i]);
            head1 = current1;
        }else{
            current1.next = new ListNode(list1[i]);
            current1 = current1.next;
        }
    }
    for(let i = 0; i < list2.length; i++){
        if(!current2){
            current2 = new ListNode(list2[i]);
            head2 = current2;
        }else{
            current2.next = new ListNode(list2[i]);
            current2 = current2.next;
        }
    }
    let result = mergeTwoLists(head1, head2);
    let resultList = [];
    while (result) {
        resultList.push(result.val);
        result = result.next;
    }
    if (resultList.length === 0 && test[""output""].length === 0) {
        console.log(""\u2705 Test Passed."")
    } else if (resultList.toString() === test[""output""].toString()) {
        console.log(""\u2705 Test Passed."")
    } else {
        console.log(`\u274c Test Failed. Input: ${test[""input""]}, expected: ${test[""output""]}, but got ${resultList}`)
    }
}","class ListNode:
     def __init__(self, val=0, next=None):
         self.val = val
         self.next = next","function ListNode(val, next) {
     this.val = (val===undefined ? 0 : val)
     this.next = (next===undefined ? null : next)
}"
63b5950e8ad4593d6b7b01ef,merge-two-sorted-lists,"params = [ 
{ 
""input"": [[1,2,4], [1,3,4]],
""output"": [1,1,2,3,4,4]
},
{
""input"": [[],[]],
""output"": []
},
{
""input"": [[],[0]],
""output"": [0]
},
{
""input"": [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20]],
""output"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
},
{
""input"": [[-1,0,1],[-2,-1,0,1,2]],
""output"": [-2, -1, -1, 0, 0, 1, 1, 2]
},
{
""input"": [[1,2,3,4],[5,6,7,8]],
""output"": [1,2,3,4,5,6,7,8]
},
{
""input"": [[1,1,1,1],[2,2,2,2]],
""output"": [1,1,1,1,2,2,2,2]
},
{
""input"": [[-100,-50,0,50,100],[-100,-50,0,50,100]],
""output"": [-100,-100,-50,-50,0,0,50,50,100,100]
},
{
""input"": [[1,3,5,7,9],[2,4,6,8,10]],
""output"": [1,2,3,4,5,6,7,8,9,10]
},
{
""input"": [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20]],
""output"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
}
]

obj = Solution()

for test in params:
    input1 = test[""input""][0]
    input2 = test[""input""][1]
    expected_output = test[""output""]
    head1 = None
    head2 = None
    for val in input1[::-1]:
        head1 = ListNode(val, head1)
    for val in input2[::-1]:
        head2 = ListNode(val, head2)
    result = obj.mergeTwoLists(head1, head2)
    result_list = []
    while result:
        result_list.append(result.val)
        result = result.next
    if result_list == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input1}, {input2}, expected: {expected_output}, but got {result_list}"")","let params = [ 
    { 
    ""input"": [[1,2,4], [1,3,4]],
    ""output"": [1,1,2,3,4,4]
    },
    {
    ""input"": [[],[]],
    ""output"": []
    },
    {
    ""input"": [[],[0]],
    ""output"": [0]
    },
    {
    ""input"": [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20]],
    ""output"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
    },
    {
    ""input"": [[-1,0,1],[-2,-1,0,1,2]],
    ""output"": [-2, -1, -1, 0, 0, 1, 1, 2]
    },
    {
    ""input"": [[1,2,3,4],[5,6,7,8]],
    ""output"": [1,2,3,4,5,6,7,8]
    },
    {
    ""input"": [[1,1,1,1],[2,2,2,2]],
    ""output"": [1,1,1,1,2,2,2,2]
    },
    {
    ""input"": [[-100,-50,0,50,100],[-100,-50,0,50,100]],
    ""output"": [-100,-100,-50,-50,0,0,50,50,100,100]
    },
    {
    ""input"": [[1,3,5,7,9],[2,4,6,8,10]],
    ""output"": [1,2,3,4,5,6,7,8,9,10]
    },
    {
    ""input"": [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20]],
    ""output"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
    }
]

for (const test of params) {
    let list1 = test[""input""][0];
    let list2 = test[""input""][1];
    let head1 = null;
    let head2 = null;
    let current1 = head1;
    let current2 = head2;
    for(let i = 0; i < list1.length; i++){
        if(!current1){
            current1 = new ListNode(list1[i]);
            head1 = current1;
        }else{
            current1.next = new ListNode(list1[i]);
            current1 = current1.next;
        }
    }
    for(let i = 0; i < list2.length; i++){
        if(!current2){
            current2 = new ListNode(list2[i]);
            head2 = current2;
        }else{
            current2.next = new ListNode(list2[i]);
            current2 = current2.next;
        }
    }
    let result = mergeTwoLists(head1, head2);
    let resultList = [];
    while (result) {
        resultList.push(result.val);
        result = result.next;
    }

    if (resultList.toString() === test[""output""].toString()) {
        console.log(""\u2705 Test Passed."")
    } else {
        console.log(`\u274C Test Failed. Input: ${test[""input""]}, expected: ${test[""output""]}, but got ${resultList}`)
    }
}","class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next","function ListNode(val, next) {
     this.val = (val===undefined ? 0 : val)
     this.next = (next===undefined ? null : next)
}"
63b5950f8ad4593d6b7b01f0,reorder-list,"params = [
{
""input"": [1,2,3,4],
""output"": [1,4,2,3]
},
{
""input"": [1,2,3,4,5],
""output"": [1,5,2,4,3]
},
{
""input"": [1],
""output"": [1]
},
{
""input"": [1,2,3,4,5,6],
""output"": [1,6,2,5,3,4]
},
{
""input"": [1,2,3,4,5,6,7],
""output"": [1,7,2,6,3,5,4]
},
{
""input"": [1,2,3,4,5,6,7,8],
""output"": [1,8,2,7,3,6,4,5]
},
{
""input"": [1,2,3,4,5,6,7,8,9],
""output"": [1,9,2,8,3,7,4,6,5]
},

{
""input"": [1,4,3,5,6,7,8,9,9,0,7,4,3,2,1],
""output"":  [1, 1, 4, 2, 3, 3, 5, 4, 6, 7, 7, 0, 8, 9, 9]
},
{
""input"": [1,244,3,4444,578, 3, 6, 7, 11, 44, 3, 2],
""output"": [1, 2, 244, 3, 3, 44, 4444, 11, 578, 7, 3, 6]
},
{
""input"": [1000,1000,1000,1000,1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000],
""output"": [1000,1000,1000,1000,1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000],
},
{
""input"": [1,2,3,4,5,6,7,8,9,10,11,12, 13, 14, 15, 16, 17, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,1 ,1, 1, 3,3 ,4, 5, 6, 7],
""output"": [1, 7, 2, 6, 3, 5, 4, 4, 5, 3, 6, 3, 7, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 1, 17, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
},
{
""input"": [1,2],
""output"": [1,2],
},
{
""input"": [1,2,3],
""output"": [1, 3, 2]
},
]

def convert_to_linked_list(input_list):
    dummy = ListNode()
    cur = dummy
    for val in input_list:
        cur.next = ListNode(val)
        cur = cur.next
    return dummy.next

def convert_from_linked_list(head):
    result = []
    while head:
        result.append(head.val)
        head = head.next
    return result

obj = Solution()
for test in params:
    input_list = test[""input""]
    expected_output = test[""output""]
    head = convert_to_linked_list(input_list)
    obj.reorderList(head)
    result_list = convert_from_linked_list(head)
    if result_list == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_list}, expected: {expected_output}, but got {result_list}"")
","let params = [
    {
    ""input"": [1,2,3,4],
    ""output"": [1,4,2,3]
    },
    {
    ""input"": [1,2,3,4,5],
    ""output"": [1,5,2,4,3]
    },
    {
    ""input"": [1],
    ""output"": [1]
    },
    {
    ""input"": [1,2,3,4,5,6],
    ""output"": [1,6,2,5,3,4]
    },
    {
    ""input"": [1,2,3,4,5,6,7],
    ""output"": [1,7,2,6,3,5,4]
    },
    {
    ""input"": [1,2,3,4,5,6,7,8],
    ""output"": [1,8,2,7,3,6,4,5]
    },
    {
    ""input"": [1,2,3,4,5,6,7,8,9],
    ""output"": [1,9,2,8,3,7,4,6,5]
    },
    
    {
    ""input"": [1,4,3,5,6,7,8,9,9,0,7,4,3,2,1],
    ""output"":  [1, 1, 4, 2, 3, 3, 5, 4, 6, 7, 7, 0, 8, 9, 9]
    },
    {
    ""input"": [1,244,3,4444,578, 3, 6, 7, 11, 44, 3, 2],
    ""output"": [1, 2, 244, 3, 3, 44, 4444, 11, 578, 7, 3, 6]
    },
    {
    ""input"": [1000,1000,1000,1000,1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000],
    ""output"": [1000,1000,1000,1000,1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000],
    },
    {
    ""input"": [1,2,3,4,5,6,7,8,9,10,11,12, 13, 14, 15, 16, 17, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,1 ,1, 1, 3,3 ,4, 5, 6, 7],
    ""output"": [1, 7, 2, 6, 3, 5, 4, 4, 5, 3, 6, 3, 7, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 1, 17, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    },
    {
    ""input"": [1,2],
    ""output"": [1,2],
    },
    {
    ""input"": [1,2,3],
    ""output"": [1, 3, 2]
    },
]


function convert_to_linked_list(input_list) {
    let dummy = new ListNode();
    let cur = dummy;
    for (let val of input_list) {
        cur.next = new ListNode(val);
        cur = cur.next;
    }
    return dummy.next;
}

function convert_from_linked_list(head) {
    let result = [];
    while (head) {
        result.push(head.val);
        head = head.next;
    }
    return result;
}

for (let test of params) {
    let input_list = test[""input""];
    let expected_output = test[""output""];
    let head = convert_to_linked_list(input_list);
    reorderList(head);
    let result_list = convert_from_linked_list(head);
    if (result_list.toString() === expected_output.toString()) {
        console.log(""\u2705 Test Passed."");
    } else {
        console.log(`\u274c Test Failed. Input: ${input_list}, expected: ${expected_output}, but got ${result_list}`);
    }
}","class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next","function ListNode(val, next) {
    this.val = (val===undefined ? 0 : val)
    this.next = (next===undefined ? null : next)
}"
63b595108ad4593d6b7b01f1,remove-nth-node-from-end-of-list,"params = [
{
""input"": [1, 2, 3, 4, 5],
""n"": 2,
""output"": [1, 2, 3, 5]
},
{
""input"": [1, 2, 3, 4, 5],
""n"": 5,
""output"": [2, 3, 4, 5]
},
{
""input"": [1, 2, 3, 4, 5],
""n"": 1,
""output"": [1, 2, 3, 4]
},
{
""input"": [1],
""n"": 1,
""output"": []
},
{
""input"": [1, 2],
""n"": 1,
""output"": [1]
},
{
""input"": [1, 2],
""n"": 2,
""output"": [2]
},
{
""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
""n"": 3,
""output"": [1, 2, 3, 4, 5, 6, 7, 9, 10]
},
{
""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
""n"": 8,
""output"": [1, 2, 4, 5, 6, 7, 8, 9, 10]
},
{
""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
""n"": 10,
""output"": [2, 3, 4, 5, 6, 7, 8, 9, 10]
},
{
""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
""n"": 4,
""output"": [1, 2, 3, 4, 5, 6, 8, 9, 10]
}
]


def convert_to_linked_list(input_list):
    dummy = ListNode()
    cur = dummy
    for val in input_list:
        cur.next = ListNode(val)
        cur = cur.next
    return dummy.next

def convert_from_linked_list(head):
    result = []
    while head:
        result.append(head.val)
        head = head.next
    return result

obj = Solution()
for test in params:
    input_list = test[""input""]
    expected_output = test[""output""]
    head = convert_to_linked_list(input_list)
    n = test[""n""]
    head = obj.removeNthFromEnd(head, n)
    result_list = convert_from_linked_list(head)
    if result_list == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_list} n={n}, expected: {expected_output}, but got {result_list}"")","let params = [
    {
    ""input"": [1, 2, 3, 4, 5],
    ""n"": 2,
    ""output"": [1, 2, 3, 5]
    },
    {
    ""input"": [1, 2, 3, 4, 5],
    ""n"": 5,
    ""output"": [2, 3, 4, 5]
    },
    {
    ""input"": [1, 2, 3, 4, 5],
    ""n"": 1,
    ""output"": [1, 2, 3, 4]
    },
    {
    ""input"": [1],
    ""n"": 1,
    ""output"": []
    },
    {
    ""input"": [1, 2],
    ""n"": 1,
    ""output"": [1]
    },
    {
    ""input"": [1, 2],
    ""n"": 2,
    ""output"": [2]
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""n"": 3,
    ""output"": [1, 2, 3, 4, 5, 6, 7, 9, 10]
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""n"": 8,
    ""output"": [1, 2, 4, 5, 6, 7, 8, 9, 10]
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""n"": 10,
    ""output"": [2, 3, 4, 5, 6, 7, 8, 9, 10]
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""n"": 4,
    ""output"": [1, 2, 3, 4, 5, 6, 8, 9, 10]
    }
]


 
function convert_to_linked_list(input_list) {
    let dummy = new ListNode();
    let cur = dummy;
    for (let val of input_list) {
        cur.next = new ListNode(val);
        cur = cur.next;
    }
    return dummy.next;
}

function convert_from_linked_list(head) {
    let result = [];
    while (head) {
        result.push(head.val);
        head = head.next;
    }
    return result;
}

for (let test of params) {
    let input_list = test[""input""]
    let expected_output = test[""output""]
    let n = test[""n""]
    let head = convert_to_linked_list(input_list)
    let result = removeNthFromEnd(head, n)
    let result_list = convert_from_linked_list(result)
    if (JSON.stringify(result_list) === JSON.stringify(expected_output)) {
        console.log(""\u2705 Test Passed."")
    } else {
        console.log(`\u274c Test Failed. Input: ${input_list} n=${n}, expected: ${expected_output}, but got ${result_list}`)
    }
}
","class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next","function ListNode(val, next) {
    this.val = (val===undefined ? 0 : val)
    this.next = (next===undefined ? null : next)
}"
63b595118ad4593d6b7b01f2,copy-list-with-random-pointer,"params = [
{
    ""input"": [[7,None],[13,0],[11,4],[10,2],[1,0]],
    ""output"": [[7,None],[13,0],[11,4],[10,2],[1,0]],
},
{
    ""input"": [[1,1],[2,1]],
    ""output"": [[1,1],[2,1]],
},
{
    ""input"": [[3,None],[3,0],[3,None]],
    ""output"": [[3,None],[3,0],[3,None]],
},
{
    ""input"": [[1,1],[2,2],[3,3],[4,4],[5,4]],
    ""output"": [[1,1],[2,2],[3,3],[4,4],[5,4]]
},
{
    ""input"": [[1,1],[2,0],[3,None]],
    ""output"": [[1,1],[2,0],[3,None]],
},
{
    ""input"": [[1,1],[2,2],[3,3],[4,0]],
    ""output"": [[1,1],[2,2],[3,3],[4,0]],
},
{
    ""input"": [[1,None],[2,1],[3,2],[4,3]],
    ""output"": [[1,None],[2,1],[3,2],[4,3]],
},
{
    ""input"": [[1,0],[2,1],[3,2]],
    ""output"": [[1,0],[2,1],[3,2]],
},
{
    ""input"": [[1,2],[2,1],[2,0]],
    ""output"":[[1,2],[2,1],[2,0]],
},
{
    ""input"": [[1,2],[2,1],[3,0]],
    ""output"": [[1,2],[2,1],[3,0]],
}
]


def convert_to_linked_list(input_list):
    nodes = []
    for val, random_index in input_list:
        node = Node(val)
        nodes.append(node)
    for i, (val, random_index) in enumerate(input_list):
        if i < len(input_list) - 1:
            nodes[i].next = nodes[i+1]
        if random_index is not None:
            nodes[i].random = nodes[random_index]
    return nodes[0]


def convert_from_linked_list(head):
    result = []
    head_copy = head
    while head:
        index = -1
        if head.random:
            temp = head_copy
            i = 0
            while temp:
                if temp == head.random:
                    index = i
                temp = temp.next
                i += 1
        result.append([head.val, index])
        head = head.next

    def convert(lst):
        for i in range(len(lst)):
            for j in range(len(lst[i])):
                if lst[i][j] == -1:
                    lst[i][j] = None
        return lst
    return convert(result)



obj = Solution()
for test in params:
    input_list = test[""input""]
    expected_output = test[""output""]
    head = convert_to_linked_list(input_list)
    obj.copyRandomList(head)
    result_list = convert_from_linked_list(head)
    if result_list == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_list}, expected: {expected_output}, but got {result_list}"")
    
","let params = [
    {
        ""input"": [[7,null],[13,0],[11,4],[10,2],[1,0]],
        ""output"": [[7,null],[13,0],[11,4],[10,2],[1,0]],
    },
    {
        ""input"": [[1,1],[2,1]],
        ""output"": [[1,1],[2,1]],
    },
    {
        ""input"": [[3,null],[3,0],[3,null]],
        ""output"": [[3,null],[3,0],[3,null]],
    },
    {
        ""input"": [[1,1],[2,2],[3,3],[4,4],[5,4]],
        ""output"": [[1,1],[2,2],[3,3],[4,4],[5,4]]
    },
    {
        ""input"": [[1,1],[2,0],[3,null]],
        ""output"": [[1,1],[2,0],[3,null]],
    },
    {
        ""input"": [[1,1],[2,2],[3,3],[4,0]],
        ""output"": [[1,1],[2,2],[3,3],[4,0]],
    },
    {
        ""input"": [[1,null],[2,1],[3,2],[4,3]],
        ""output"": [[1,null],[2,1],[3,2],[4,3]],
    },
    {
        ""input"": [[1,0],[2,1],[3,2]],
        ""output"": [[1,0],[2,1],[3,2]],
    },
    {
        ""input"": [[1,2],[2,1],[2,0]],
        ""output"": [[1,2],[2,1],[2,0]],
    },
    {
        ""input"": [[1,2],[2,1],[3,0]],
        ""output"": [[1,2],[2,1],[3,0]],
    }
]

function convert_to_linked_list(input_list) {
    let nodes = []
    for (let [val, random_index] of input_list) {
        let node = new Node(val)
        nodes.push(node)
    }
    for (let [i, [val, random_index]] of input_list.entries()) {
        if (i < input_list.length - 1) {
            nodes[i].next = nodes[i+1]
        }
        if (random_index !== null) {
            nodes[i].random = nodes[random_index]
        }
    }
    return nodes[0]
}

function convert_from_linked_list(head) {
    let result = []
    let head_copy = head
    while (head) {
        let index = -1
        if (head.random) {
            let temp = head_copy
            let i = 0
            while (temp) {
                if (temp === head.random) {
                    index = i
                }
                temp = temp.next
                i += 1
            }
        }
        result.push([head.val, index])
        head = head.next
    }

    function convert(lst) {
        for (let i = 0; i < lst.length; i++) {
            for (let j = 0; j < lst[i].length; j++) {
                if (lst[i][j] === -1) {
                    lst[i][j] = null
                }
            }
        }
        return lst
    }
    return convert(result)
}

for (let i = 0; i < params.length; i++) {
    let input_list = params[i][""input""];
    let expected_output = params[i][""output""];
    let head = convert_to_linked_list(input_list);
    copyRandomList(head);
    let result_list = convert_from_linked_list(head);
    if (result_list.toString() === expected_output.toString()) {
        console.log(""\u2705 Test Passed."");
    } else {
        console.log(""\u274c Test Failed. Input: "" + input_list + "", expected: "" + expected_output + "", but got "" + result_list);
    }
}","class Node:
    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):
        self.val = int(x)
        self.next = next
        self.random = random","function Node(val, next, random) {
    this.val = val;
    this.next = next;
    this.random = random;
};"
63b595128ad4593d6b7b01f3,add-two-numbers,"params = [    
    {   
        ""input"": ([2,4,3], [5,6,4]),
        ""output"": [7,0,8]
    },
    {
        ""input"": ([0], [0]),
        ""output"": [0]
    },
    {
        ""input"": ([9,9,9,9,9,9,9], [9,9,9,9]),
        ""output"": [8,9,9,9,0,0,0,1]
    },
    {
        ""input"": ([9,9,9,9,9,9,9], [1]),
        ""output"": [0,0,0,0,0,0,0,1]
    },
    {
        ""input"": ([1], [9,9,9,9,9,9,9]),
        ""output"": [0,0,0,0,0,0,0,1]
    },
    {
        ""input"": ([5], [5]),
        ""output"": [0,1]
    },
    {
        ""input"": ([1,8], [0]),
        ""output"": [1,8]
    },
    {
        ""input"": ([], [1,2,3]),
        ""output"": [1,2,3]
    },
    {
        ""input"": ([1,2,3], []),
        ""output"": [1,2,3]
    },
    {
        ""input"": ([1,9,9], [1]),
        ""output"": [2, 9, 9]
    }
]

def convert_to_linked_list(input_list):
    dummy = ListNode()
    curr = dummy
    for val in input_list:
        curr.next = ListNode(val)
        curr = curr.next
    return dummy.next

def convert_from_linked_list(head):
    res = []
    while head:
        res.append(head.val)
        head = head.next
    return res

obj = Solution()

for test in params:
    input1 = convert_to_linked_list(test[""input""][0])
    input2 = convert_to_linked_list(test[""input""][1])
    expected_output = test[""output""]
    result = obj.addTwoNumbers(input1, input2)
    result_list = convert_from_linked_list(result)
    if result_list == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {test['input'][0]}, {test['input'][1]}, expected: {expected_output}, but got {result_list}"")","let params = [
    {
    ""input"": [[2,4,3], [5,6,4]],
    ""output"": [7,0,8]
    },
    {
    ""input"": [[0], [0]],
    ""output"": [0]
    },
    {
    ""input"": [[9,9,9,9,9,9,9], [9,9,9,9]],
    ""output"": [8,9,9,9,0,0,0,1]
    },
    {
    ""input"": [[9,9,9,9,9,9,9], [1]],
    ""output"": [0,0,0,0,0,0,0,1]
    },
    {
    ""input"": [[1], [9,9,9,9,9,9,9]],
    ""output"": [0,0,0,0,0,0,0,1]
    },
    {
    ""input"": [[5], [5]],
    ""output"": [0,1]
    },
    {
    ""input"": [[1,8], [0]],
    ""output"": [1,8]
    },
    {
    ""input"": [[], [1,2,3]],
    ""output"": [1,2,3]
    },
    {
    ""input"": [[1,2,3], []],
    ""output"": [1,2,3]
    },
    {
    ""input"": [[1,9,9], [1]],
    ""output"": [2, 9, 9]
    }
]

function convert_to_linked_list(input_list) {
    let dummy = new ListNode();
    let curr = dummy;
    for (let val of input_list) {
        curr.next = new ListNode(val);
        curr = curr.next;
    }
    return dummy.next;
}

function convert_from_linked_list(head) {
    let res = [];
    while (head) {
        res.push(head.val);
        head = head.next;
    }
    return res;
}

for (let test of params) {
    let input1 = convert_to_linked_list(test[""input""][0]);
    let input2 = convert_to_linked_list(test[""input""][1]);
    let expected_output = test[""output""];
    let result = addTwoNumbers(input1, input2);
    let result_list = convert_from_linked_list(result);
    if (result_list.toString() === expected_output.toString()) {
        console.log(""\u2705 Test Passed."");
    } else {
        console.log(`\u274c Test Failed. Input: ${test['input'][0]}, ${test['input'][1]}, expected: ${expected_output}, but got ${result_list}`);
    }
}","class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next"," function ListNode(val, next) {
    this.val = (val===undefined ? 0 : val)
    this.next = (next===undefined ? null : next)
}"
63b595148ad4593d6b7b01f4,linked-list-cycle,"params = [
    {
        ""input"": [3, 2, 0, -4],
        ""pos"": 1,
        ""output"": True
    },
    {
        ""input"": [1, 2],
        ""pos"": 0,
        ""output"": True
    },
    {
        ""input"": [1],
        ""pos"": -1,
        ""output"": False
    },
    {
        ""input"": [],
        ""pos"": -1,
        ""output"": False
    },
    {
        ""input"": [1, 2, 3, 4, 5],
        ""pos"": 2,
        ""output"": True
    },
    {
        ""input"": [1, 2, 3, 4, 5],
        ""pos"": -1,
        ""output"": False
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
        ""pos"": 7,
        ""output"": True
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
        ""pos"": -1,
        ""output"": False
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        ""pos"": 9,
        ""output"": True
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 50, 100],
        ""pos"": 4,
        ""output"": True
    }
]


def convert_to_linked_list(input_list, pos):
    dummy = ListNode(-1)
    curr = dummy
    node_list = []
    for val in input_list:
        node = ListNode(val)
        curr.next = node
        node_list.append(node)
        curr = curr.next
    if pos != -1:
        curr.next = node_list[pos]
    return dummy.next

obj = Solution()
for test in params:
    input_list = test[""input""]
    pos = test[""pos""]
    expected_output = test[""output""]
    head = convert_to_linked_list(input_list, pos)
    result = obj.hasCycle(head)
    if result == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {input_list}, expected: {expected_output}, but got {result}"")","let params = [
    {
        ""input"": [3, 2, 0, -4],
        ""pos"": 1,
        ""output"": true
    },
    {
        ""input"": [1, 2],
        ""pos"": 0,
        ""output"": true
    },
    {
        ""input"": [1],
        ""pos"": -1,
        ""output"": false
    },
    {
        ""input"": [],
        ""pos"": -1,
        ""output"": false
    },
    {
        ""input"": [1, 2, 3, 4, 5],
        ""pos"": 2,
        ""output"": true
    },
    {
        ""input"": [1, 2, 3, 4, 5],
        ""pos"": -1,
        ""output"": false
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
        ""pos"": 7,
        ""output"": true
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
        ""pos"": -1,
        ""output"": false
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        ""pos"": 9,
        ""output"": true
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 50, 100],
        ""pos"": 4,
        ""output"": true
    }
]

function convert_to_linked_list(input_list, pos) {
    let dummy = new ListNode(-1);
    let curr = dummy;
    let node_list = [];
    for (let val of input_list) {
        let node = new ListNode(val);
        curr.next = node;
        node_list.push(node);
        curr = curr.next;
    }
    if (pos !== -1) {
        curr.next = node_list[pos];
    }
    return dummy.next;
}

for (let test of params) {
    let input_list = test.input;
    let pos = test.pos;
    let expected_output = test.output;
    let head = convert_to_linked_list(input_list, pos);
    let result = hasCycle(head);
    if (result === expected_output) {
        console.log(""\u2705 Test Passed."");
    } else {
        console.log(`\u274c Test Failed. Input: ${input_list}, expected: ${expected_output}, but got ${result}`);
    }
}

","class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None","function ListNode(val) {
    this.val = val;
    this.next = null;
}"
63b595148ad4593d6b7b01f5,find-the-duplicate-number,"params = [    
    {        
        ""input"": [1, 3, 4, 2, 2],
        ""output"": 2
    },
    {
        ""input"": [3, 1, 3, 4, 2],
        ""output"": 3
    },
    {
        ""input"": [1, 2, 3, 4, 5, 5],
        ""output"": 5
    },
    {
        ""input"": [5, 5, 4, 3, 2, 1],
        ""output"": 5
    },
    {
        ""input"": [1, 2, 2, 3, 4, 5],
        ""output"": 2
    },
    {
        ""input"": [1, 2, 3, 4, 5, 1],
        ""output"": 1
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 9],
        ""output"": 9
    },
    {
        ""input"": [1, 1, 2, 3, 4, 5, 6, 7, 8, 9],
        ""output"": 1
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 8],
        ""output"": 8
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 7, 8, 9],
        ""output"": 7
    }
]


obj = Solution()
for test in params:
    nums = test[""input""]
    expected_output = test[""output""]
    result = obj.findDuplicate(nums)
    if result == expected_output:
        print(""\u2705 Test Passed."")
    else:
        print(f""\u274c Test Failed. Input: {nums}, expected: {expected_output}, but got {result}"")","let params = [    
    {        
        ""input"": [1, 3, 4, 2, 2],
        ""output"": 2
    },
    {
        ""input"": [3, 1, 3, 4, 2],
        ""output"": 3
    },
    {
        ""input"": [1, 2, 3, 4, 5, 5],
        ""output"": 5
    },
    {
        ""input"": [5, 5, 4, 3, 2, 1],
        ""output"": 5
    },
    {
        ""input"": [1, 2, 2, 3, 4, 5],
        ""output"": 2
    },
    {
        ""input"": [1, 2, 3, 4, 5, 1],
        ""output"": 1
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 9],
        ""output"": 9
    },
    {
        ""input"": [1, 1, 2, 3, 4, 5, 6, 7, 8, 9],
        ""output"": 1
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 8],
        ""output"": 8
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 7, 8, 9],
        ""output"": 7
    }
]


for (let i = 0; i < params.length; i++) {
    const input = params[i].input;
    const expected_output = params[i].output;
    const result = findDuplicate(input);
    if (result === expected_output) {
        console.log(""\u2705 Test Passed."")
    } else {
        console.log(`\u274c Test Failed. Input: ${input}, expected: ${expected_output}, but got ${result}`)
    }
}",,
63b595158ad4593d6b7b01f6,lru-cache,"params = [        
    {                
        ""input"": [2],
        ""operations"": [[""put"", 1, 1], [""put"", 2, 2], [""get"", 1], [""put"", 3, 3], [""get"", 2], [""put"", 4, 4], [""get"", 1], [""get"", 3], [""get"", 4]],
        ""output"": [None, None, 1, None, -1, None, -1, 3, 4]
    },
    {
        ""input"": [1],
        ""operations"": [[""put"", 1, 1], [""get"", 1], [""put"", 2, 2], [""get"", 2], [""put"", 3, 3], [""get"", 3], [""put"", 4, 4], [""get"", 4]],
        ""output"": [None, 1, None, 2, None,3, None,4]
    },
    {
        ""input"": [2],
        ""operations"": [[""put"", 1, 1], [""put"", 2, 2], [""get"", 2], [""get"", 1], [""put"", 2, 4], [""get"", 2], [""get"", 1]],
        ""output"": [None, None, 2, 1, None, 4, 1]
    },
    {
        ""input"": [3],
        ""operations"": [[""put"", 1, 1], [""put"", 2, 2], [""put"", 3, 3], [""get"", 2], [""get"", 3], [""put"", 4, 4], [""get"", 1], [""get"", 4]],
        ""output"": [None,None,None,2,3,None,-1,4]
    },
    {        
        ""input"": [2],
        ""operations"": [[""put"", 1, 1], [""put"", 2, 2], [""get"", 3], [""put"", 3, 3], [""get"", 2], [""put"", 4, 4], [""get"", 1], [""get"", 3], [""get"", 4]],
        ""output"": [None,None,-1,None,2,None,-1,-1,4]
    },
    {
        ""input"": [1],
        ""operations"": [[""put"", 1, 1], [""get"", 1], [""put"", 1, 2], [""get"", 1], [""put"", 2, 2], [""get"", 2]],
        ""output"": [None,1,None,2,None,2]
    },
    {
        ""input"": [2],
        ""operations"": [[""put"", 1, 1], [""put"", 2, 2], [""get"", 2], [""get"", 1], [""put"", 2, 4], [""put"", 3, 3], [""get"", 2], [""get"", 3]],
        ""output"": [None,None,2,1,None,None,4,3]
    },
    {
        ""input"": [3],
        ""operations"": [[""put"", 1, 1], [""put"", 2, 2], [""put"", 3, 3], [""get"", 4], [""put"", 4, 4], [""get"", 1], [""get"", 3], [""get"", 4]],
        ""output"": [None,None,None,-1,None,-1,3,4]
    },
    {
        ""input"": [2],
        ""operations"": [[""put"", 1, 1], [""get"", 1], [""put"", 2, 2], [""get"", 2], [""put"", 3, 3], [""get"", 3]],
        ""output"": [None,1,None,2,None,3]
    },
    {
        ""input"": [2],
        ""operations"": [[""put"", 2, 1], [""get"", 1], [""put"", 2, 0], [""get"", 2], [""put"", 3, -1], [""get"", 3]],
        ""output"": [None,-1,None,0,None,-1]
    },
]


for i in range(len(params)):
    cache = LRUCache(params[i]['input'][0])
    operations = params[i]['operations']
    expected_output = params[i]['output']
    output = []

    for j in range(len(operations)):
        op = operations[j][0]
        key = operations[j][1]
        if op == ""put"":
            value = operations[j][2]
            cache.put(key, value)
            output.append(None)
        elif op == ""get"":
            val = cache.get(key)
            output.append(val)
    if output == expected_output:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274c Test failed. Input: capacity={cache} operations={operations} Expected output: {expected_output}, but got {output}"")","let params = [    
    {        
        ""input"": [2],
        ""operations"": [[""put"", 1, 1], [""put"", 2, 2], [""get"", 1], [""put"", 3, 3], [""get"", 2], [""put"", 4, 4], [""get"", 1], [""get"", 3], [""get"", 4]],
        ""output"": [null, null, 1, null, -1, null, -1, 3, 4]
    },
    {
        ""input"": [1],
        ""operations"": [[""put"", 1, 1], [""get"", 1], [""put"", 2, 2], [""get"", 2], [""put"", 3, 3], [""get"", 3], [""put"", 4, 4], [""get"", 4]],
        ""output"": [null, 1, null, 2, null,3, null,4]
    },
    {
        ""input"": [2],
        ""operations"": [[""put"", 1, 1], [""put"", 2, 2], [""get"", 2], [""get"", 1], [""put"", 2, 4], [""get"", 2], [""get"", 1]],
        ""output"": [null, null, 2, 1, null, 4, 1]
    },
    {
        ""input"": [3],
        ""operations"": [[""put"", 1, 1], [""put"", 2, 2], [""put"", 3, 3], [""get"", 2], [""get"", 3], [""put"", 4, 4], [""get"", 1], [""get"", 4]],
        ""output"": [null,null,null,2,3,,-1,4]
    },
    {        
        ""input"": [2],
        ""operations"": [[""put"", 1, 1], [""put"", 2, 2], [""get"", 3], [""put"", 3, 3], [""get"", 2], [""put"", 4, 4], [""get"", 1], [""get"", 3], [""get"", 4]],
        ""output"": [null,null,-1,,2,null,-1,-1,4]
    },
    {
        ""input"": [1],
        ""operations"": [[""put"", 1, 1], [""get"", 1], [""put"", 1, 2], [""get"", 1], [""put"", 2, 2], [""get"", 2]],
        ""output"": [null,1,null,2,null,2]
    },
    {
        ""input"": [2],
        ""operations"": [[""put"", 1, 1], [""put"", 2, 2], [""get"", 2], [""get"", 1], [""put"", 2, 4], [""put"", 3, 3], [""get"", 2], [""get"", 3]],
        ""output"": [null,null,2,1,null,null,4,3]
    },
    {
        ""input"": [3],
        ""operations"": [[""put"", 1, 1], [""put"", 2, 2], [""put"", 3, 3], [""get"", 4], [""put"", 4, 4], [""get"", 1], [""get"", 3], [""get"", 4]],
        ""output"": [null,null,null,-1,null,-1,3,4]
    },
    {
        ""input"": [2],
        ""operations"": [[""put"", 1, 1], [""get"", 1], [""put"", 2, 2], [""get"", 2], [""put"", 3, 3], [""get"", 3]],
        ""output"": [null,1,null,2,null,3]
    },
    {
        ""input"": [2],
        ""operations"": [[""put"", 2, 1], [""get"", 1], [""put"", 2, 0], [""get"", 2], [""put"", 3, -1], [""get"", 3]],
        ""output"": [null,-1,null,0,null,-1]
    },
]

for (let i = 0; i < params.length; i++) {
    let cache = new LRUCache(params[i].input[0]);
    let operations = params[i].operations;
    let expectedOutput = params[i].output;
    let output = [];

    for (let j = 0; j < operations.length; j++) {
        let op = operations[j][0];
        let key = operations[j][1];
        if (op === ""put"") {
            let value = operations[j][2];
            cache.put(key, value);
            output.push(null);
        } else if (op === ""get"") {
            let val = cache.get(key);
            output.push(val);
        }
    }
    if (output.join("","") === expectedOutput.join("","")) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(
            `\u274c Test failed. Input: capacity=${cache} operations=${operations} Expected output: [${expectedOutput}], but got [${output}]`
        );
    }
}",,
63b595168ad4593d6b7b01f7,merge-k-sorted-lists,"params = [
    {
        ""input"": [[1,4,5],[1,3,4],[2,6]],
        ""output"": [1,1,2,3,4,4,5,6]
    },
    {
        ""input"": [],
        ""output"": []
    },
    {
        ""input"": [[]],
        ""output"": []
    },
    {
        ""input"": [[1,2,3], [4,5,6], [7,8,9]],
        ""output"": [1,2,3,4,5,6,7,8,9]
    },
    {
        ""input"": [[-4,-2,0],[-3,-2,-1],[5,6,7]],
        ""output"": [-4,-3,-2,-2,-1,0,5,6,7]
    },
    {
        ""input"": [[1],[2],[3]],
        ""output"": [1,2,3]
    },
    {
        ""input"": [[1000, 3000, 3001, 3004],[2, 4, 6, 7, 100, 200],[3, 4, 5, 6, 666]],
        ""output"": [2, 3, 4, 4, 5, 6, 6, 7, 100, 200, 666, 1000, 3000, 3001, 3004]
    },
    {
        ""input"": [[1],[2],[3]],
        ""output"": [1,2,3]
    },
    {
        ""input"": [[1,3,5,7],[2,4,6,8]],
        ""output"": [1, 2, 3, 4, 5, 6, 7, 8]
    },
     {
        ""input"": [[1,3,5,7],[-100, -99, -98], [80], [], [100, 105, 1000]],
        ""output"": [-100, -99, -98, 1, 3, 5, 7, 80, 100, 105, 1000]
    },
]

def convert_to_linked_list(arr):
    dummy = ListNode()
    curr = dummy
    for val in arr:
        curr.next = ListNode(val)
        curr = curr.next
    return dummy.next

def convert_from_linked_list(linked_list):
    arr = []
    curr = linked_list
    while curr:
        arr.append(curr.val)
        curr = curr.next
    return arr

obj = Solution()

for i in range(len(params)):
    input_lists = [convert_to_linked_list(lists) for lists in params[i][""input""]]
    expected_output = params[i][""output""]
    output = convert_from_linked_list(obj.mergeKLists(input_lists))
    if output == expected_output:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input={params[i]['input']} Expected output: {expected_output}, but got {output}"")","let params = [
    {
        ""input"": [[1,4,5],[1,3,4],[2,6]],
        ""output"": [1,1,2,3,4,4,5,6]
    },
    {
        ""input"": [],
        ""output"": []
    },
    {
        ""input"": [[]],
        ""output"": []
    },
    {
        ""input"": [[1,2,3], [4,5,6], [7,8,9]],
        ""output"": [1,2,3,4,5,6,7,8,9]
    },
    {
        ""input"": [[-4,-2,0],[-3,-2,-1],[5,6,7]],
        ""output"": [-4,-3,-2,-2,-1,0,5,6,7]
    },
    {
        ""input"": [[1],[2],[3]],
        ""output"": [1,2,3]
    },
    {
        ""input"": [[1000, 3000, 3001, 3004],[2, 4, 6, 7, 100, 200],[3, 4, 5, 6, 666]],
        ""output"": [2, 3, 4, 4, 5, 6, 6, 7, 100, 200, 666, 1000, 3000, 3001, 3004]
    },
    {
        ""input"": [[1],[2],[3]],
        ""output"": [1,2,3]
    },
    {
        ""input"": [[1,3,5,7],[2,4,6,8]],
        ""output"": [1, 2, 3, 4, 5, 6, 7, 8]
    },
     {
        ""input"": [[1,3,5,7],[-100, -99, -98], [80], [], [100, 105, 1000]],
        ""output"": [-100, -99, -98, 1, 3, 5, 7, 80, 100, 105, 1000]
    },
]

function convert_to_linked_list(arr) {
    let dummy = new ListNode();
    let curr = dummy;
    for (let val of arr) {
        curr.next = new ListNode(val);
        curr = curr.next;
    }
    return dummy.next;
}

function convert_from_linked_list(linked_list) {
    let arr = [];
    let curr = linked_list;
    while (curr) {
        arr.push(curr.val);
        curr = curr.next;
    }
    return arr;
}

for (let i = 0; i < params.length; i++) {
    let input_lists = params[i][""input""].map(lists => convert_to_linked_list(lists));
    let expected_output = params[i][""output""];
    let output = convert_from_linked_list(mergeKLists(input_lists));
    if (output.toString() === expected_output.toString()) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. Input: ${params[i][""input""]} Expected output: [${expected_output}], but got [${output}]`);
    }
}","class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next","function ListNode(val, next) {
    this.val = (val===undefined ? 0 : val)
    this.next = (next===undefined ? null : next)
}"
63b595178ad4593d6b7b01f8,reverse-nodes-in-k-group,"params = [
    {
    ""input"": [1, 2, 3, 4, 5],
    ""k"": 2,
    ""output"": [2, 1, 4, 3, 5]
    },
    {
    ""input"": [1, 2, 3, 4, 5],
    ""k"": 3,
    ""output"": [3, 2, 1, 4, 5]
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6],
    ""k"": 2,
    ""output"": [2, 1, 4, 3, 6, 5]
    },
    {
    ""input"": [1, 2, 3],
    ""k"": 1,
    ""output"": [1, 2, 3]
    },
    {
    ""input"": [1, 2, 3, 4],
    ""k"": 2,
    ""output"": [2, 1, 4, 3]
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8],
    ""k"": 3,
    ""output"": [3, 2, 1, 6, 5, 4, 7, 8]
    },
    {
    ""input"": [1],
    ""k"": 1,
    ""output"": [1]
    },
    {
    ""input"": [30, 40, 50, -1],
    ""k"": 3,
    ""output"": [50, 40, 30, -1]
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""k"": 5,
    ""output"": [5, 4, 3, 2, 1, 10, 9, 8, 7, 6]
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""k"": 9,
    ""output"": [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]
    }
]

def convert_to_linked_list(arr):
    dummy = ListNode(0)
    curr = dummy
    for val in arr:
        curr.next = ListNode(val)
        curr = curr.next
    return dummy.next

def convert_from_linked_list(linked_list):
    arr = []
    curr = linked_list
    while curr:
        arr.append(curr.val)
        curr = curr.next
    return arr


obj = Solution()

for i in range(len(params)):
    input_head = convert_to_linked_list(params[i][""input""])
    input_k = params[i][""k""]
    expected_output = params[i][""output""]
    output = convert_from_linked_list(obj.reverseKGroup(input_head, input_k))
    if output == expected_output:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input: linked list={params[i]['input']} k={input_k} Expected output: {expected_output}, but got {output}"")","let params = [
    {
    ""input"": [1, 2, 3, 4, 5],
    ""k"": 2,
    ""output"": [2, 1, 4, 3, 5]
    },
    {
    ""input"": [1, 2, 3, 4, 5],
    ""k"": 3,
    ""output"": [3, 2, 1, 4, 5]
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6],
    ""k"": 2,
    ""output"": [2, 1, 4, 3, 6, 5]
    },
    {
    ""input"": [1, 2, 3],
    ""k"": 1,
    ""output"": [1, 2, 3]
    },
    {
    ""input"": [1, 2, 3, 4],
    ""k"": 2,
    ""output"": [2, 1, 4, 3]
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8],
    ""k"": 3,
    ""output"": [3, 2, 1, 6, 5, 4, 7, 8]
    },
    {
    ""input"": [1],
    ""k"": 1,
    ""output"": [1]
    },
    {
    ""input"": [30, 40, 50, -1],
    ""k"": 3,
    ""output"": [50, 40, 30, -1]
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""k"": 5,
    ""output"": [5, 4, 3, 2, 1, 10, 9, 8, 7, 6]
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ""k"": 9,
    ""output"": [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]
    }
]

function convert_to_linked_list(arr) {
    let dummy = new ListNode(0);
    let curr = dummy;
    for (let val of arr) {
        curr.next = new ListNode(val);
        curr = curr.next;
    }
    return dummy.next;
}

function convert_from_linked_list(linked_list) {
    let arr = [];
    let curr = linked_list;
    while (curr) {
        arr.push(curr.val);
        curr = curr.next;
    }
    return arr;
}


for (let i = 0; i < params.length; i++) {
    let input_head = convert_to_linked_list(params[i][""input""]);
    let input_k = params[i][""k""];
    let expected_output = params[i][""output""];
    let output = convert_from_linked_list(reverseKGroup(input_head, input_k));
    if (output.toString() === expected_output.toString()) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. Input: linked list=${params[i][""input""]} k=${input_k} Expected output: ${expected_output}, but got ${output}`);
    }
}","class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next","function ListNode(val, next) {
    this.val = (val===undefined ? 0 : val)
    this.next = (next===undefined ? null : next)
}"
63b595188ad4593d6b7b01f9,invert-binary-tree,"params = [   
    {       
        ""input"": [4, 2, 7, 1, 3, 6, 9],
        ""output"": [4, 7, 2, 9, 6, 3, 1]
    },
    {
        ""input"": [2, 1, 3],
        ""output"": [2, 3, 1]
    },
    {
        ""input"": [],
        ""output"": []
    },
    {
        ""input"": [1],
        ""output"": [1]
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
        ""output"": [1, 3, 2, 7, 6, 5, 4, None, None, None, None, None, None, 9, 8, None, None, None, None]
    },
    {
        ""input"": [1, None, 2],
        ""output"": [1, 2, None]
    },
    {
        ""input"": [1, 2, None],
        ""output"": [1, None, 2]
    },
    {
        ""input"": [1, None, 2, None, 3],
        ""output"": [1, 2, None, 3, None, None, None]
    },
    {
        ""input"": [1, 2, None, 3, None, 4],
        ""output"": [1, None, 2, None, 3, None, 4, None, None]
    },
    {
        ""input"": [1, None, 2, 3, None, None, 4],
        ""output"": [1, 2, None, None, 3, 4, None, None, None]
    }
]

def create_tree(lst):
    if not lst:
        return None
    root = TreeNode(lst[0])
    queue = [root]
    i = 1
    while queue and i < len(lst):
        node = queue.pop(0)
        if i < len(lst) and lst[i] is not None:
            node.left = TreeNode(lst[i])
            queue.append(node.left)
        i += 1
        if i < len(lst) and lst[i] is not None:
            node.right = TreeNode(lst[i])
            queue.append(node.right)
        i += 1
    return root

def tree_to_list(root):
    if not root:
        return []
    result = []
    queue = [root]
    while queue:
        node = queue.pop(0)
        if node:
            result.append(node.val)
            queue.append(node.left)
            queue.append(node.right)
        else:
            result.append(None)
    return result

obj = Solution()

for param in params:
    input_root = create_tree(param[""input""])
    expected_output = create_tree(param[""output""])
    output = obj.invertTree(input_root)
    if tree_to_list(output) == tree_to_list(expected_output):
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input={param['input']} Expected output: {tree_to_list(expected_output)}, but got {tree_to_list(output)}"")","var params = [       
    {               
        ""input"": [4, 2, 7, 1, 3, 6, 9],
        ""output"": [4, 7, 2, 9, 6, 3, 1]
    },
    {
        ""input"": [2, 1, 3],
        ""output"": [2, 3, 1]
    },
    {
        ""input"": [],
        ""output"": []
    },
    {
        ""input"": [1],
        ""output"": [1]
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
        ""output"": [1, 3, 2, 7, 6, 5, 4, null, null, null, null, null, null, 9, 8, null, null, null, null]
    },
    {
        ""input"": [1, null, 2],
        ""output"": [1, 2, null]
    },
    {
        ""input"": [1, 2, null],
        ""output"": [1, null, 2]
    },
    {
        ""input"": [1, null, 2, null, 3],
        ""output"": [1, 2, null, 3, null, null, null]
    },
    {
        ""input"": [1, 2, null, 3, null, 4],
        ""output"": [1, null, 2, null, 3, null, 4, null, null]
    },
    {
        ""input"": [1, null, 2, 3, null, null, 4],
        ""output"": [1, 2, null, null, 3, 4, null, null, null]
    }
]

function create_tree(lst) {
    if (!lst) {
        return null;
    }
    let root = new TreeNode(lst[0]);
    let queue = [root];
    let i = 1;
    while (queue.length > 0 && i < lst.length) {
        let node = queue.shift();
        if (i < lst.length && lst[i] !== null) {
            node.left = new TreeNode(lst[i]);
            queue.push(node.left);
        }
        i++;
        if (i < lst.length && lst[i] !== null) {
            node.right = new TreeNode(lst[i]);
            queue.push(node.right);
        }
        i++;
    }
    return root;
}

function tree_to_list(root) {
    if (!root) {
        return [];
    }
    let result = [];
    let queue = [root];
    while (queue.length > 0) {
        let node = queue.shift();
        if (node) {
            result.push(node.val);
            queue.push(node.left);
            queue.push(node.right);
        } else {
            result.push(null);
        }
    }
    return result;
}

for (let param of params) {
    let input_root = create_tree(param[""input""]);
    let expected_output = create_tree(param[""output""]);
    let output = invertTree(input_root);
    if (tree_to_list(output).toString() === tree_to_list(expected_output).toString()) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. Input=${param[""input""]} Expected output: ${tree_to_list(expected_output)}, but got ${tree_to_list(output)}`);
    }
}","class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right","function TreeNode(val, left, right) {
    this.val = (val===undefined ? 0 : val)
    this.left = (left===undefined ? null : left)
    this.right = (right===undefined ? null : right)
}"
63b595198ad4593d6b7b01fa,maximum-depth-of-binary-tree,"params = [
    {
    ""input"": [3, 9, 20, None, None, 15, 7],
    ""output"": 3
    },
    {
    ""input"": [1, None, 2],
    ""output"": 2
    },
    {
    ""input"": [],
    ""output"": 0
    },
    {
    ""input"": [1],
    ""output"": 1
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
    ""output"": 4
    },
    {
    ""input"": [1, None, 2],
    ""output"": 2
    },
    {
    ""input"": [1, 2, None],
    ""output"": 2
    },
    {
    ""input"": [1, None, 2, None, 3],
    ""output"": 3
    },
    {
    ""input"": [1, 2, None, 3, None, 4],
    ""output"": 4
    },
    {
    ""input"": [1, None, 2, 3, None, None, 4],
    ""output"": 4
    }
]

def create_tree(lst):
    if not lst:
        return None
    root = TreeNode(lst[0])
    queue = [root]
    i = 1
    while queue and i < len(lst):
        node = queue.pop(0)
        if i < len(lst) and lst[i] is not None:
            node.left = TreeNode(lst[i])
            queue.append(node.left)
        i += 1
        if i < len(lst) and lst[i] is not None:
            node.right = TreeNode(lst[i])
            queue.append(node.right)
        i += 1
    return root

obj = Solution()

for param in params:
    input_list = param[""input""]
    expected_output = param[""output""]
    root = create_tree(input_list)
    output = obj.maxDepth(root)
    if output == expected_output:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input List: {input_list} Expected output: {expected_output}, but got {output}"")","const params = [    
    {    
    ""input"": [3, 9, 20, null, null, 15, 7],
    ""output"": 3
    },
    {
    ""input"": [1, null, 2],
    ""output"": 2
    },
    {
    ""input"": [],
    ""output"": 0
    },
    {
    ""input"": [1],
    ""output"": 1
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
    ""output"": 4
    },
    {
    ""input"": [1, null, 2],
    ""output"": 2
    },
    {
    ""input"": [1, 2, null],
    ""output"": 2
    },
    {
    ""input"": [1, null, 2, null, 3],
    ""output"": 3
    },
    {
    ""input"": [1, 2, null, 3, null, 4],
    ""output"": 4
    },
    {
    ""input"": [1, null, 2, 3, null, null, 4],
    ""output"": 4
    }
]

function create_tree(lst) {
    if (!lst || lst.length === 0) {
        return null;
    }
    let root = new TreeNode(lst[0]);
    let queue = [root];
    let i = 1;
    while (queue.length > 0 && i < lst.length) {
        let node = queue.shift();
        if (i < lst.length && lst[i] !== null) {
            node.left = new TreeNode(lst[i]);
            queue.push(node.left);
        }
        i += 1;
        if (i < lst.length && lst[i] !== null) {
            node.right = new TreeNode(lst[i]);
            queue.push(node.right);
        }
        i += 1;
    }
    return root;
}


for (let param of params) {
    let input_list = param[""input""];
    let expected_output = param[""output""];
    let root = create_tree(input_list);
    let output = maxDepth(root);
    if (output === expected_output) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. Input List: ${input_list} Expected output: ${expected_output}, but got ${output}`);
    }
}","class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right","function TreeNode(val, left, right) {
    this.val = (val===undefined ? 0 : val)
    this.left = (left===undefined ? null : left)
    this.right = (right===undefined ? null : right)
}"
63b595388ad4593d6b7b01fb,climbing-stairs,"params = [
    {
        'n': 1,
        'expected': 1
    },
    {
        'n': 2,
        'expected': 2
    },
    {
        'n': 3,
        'expected': 3
    },
    {
        'n': 4,
        'expected': 5
    },
    {
        'n': 5,
        'expected': 8
    },
    {
        'n': 10,
        'expected': 89
    },
    {
        'n': 20,
        'expected': 10946
    },
    {
        'n': 30,
        'expected': 1346269
    },
    {
        'n': 40,
        'expected': 165580141
    },
    {
        'n': 45,
        'expected': 1836311903
    }
]

obj = Solution()
for i in range(len(params)):
    n = params[i]['n']
    expected = params[i]['expected']
    gotOutput = obj.climbStairs(n)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: n = {n}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","let params = [
        {
            'n': 1,
            'expected': 1
        },
        {
            'n': 2,
            'expected': 2
        },
        {
            'n': 3,
            'expected': 3
        },
        {
            'n': 4,
            'expected': 5
        },
        {
            'n': 5,
            'expected': 8
        },
        {
            'n': 10,
            'expected': 89
        },
        {
            'n': 20,
            'expected': 10946
        },
        {
            'n': 30,
            'expected': 1346269
        },
        {
            'n': 40,
            'expected': 165580141
        },
        {
            'n': 45,
            'expected': 1836311903
        }
]

for (let i = 0; i < params.length; i++) {
        const n = params[i]['n'];
        const expected = params[i]['expected'];
        const gotOutput = climbStairs(n);
        if (expected !== gotOutput) {
                console.log(`\u274C Test ${i} failed: n = ${n}, expected = ${expected}, but got ${gotOutput}`);
        } else {
                console.log(`\u2705 Test ${i} succeeded`);
        }
}",,
63b595398ad4593d6b7b01fc,min-cost-climbing-stairs,"params = [
    {
        'cost': [10, 15, 20],
        'expected': 15
    },
    {
        'cost': [1, 100, 1, 1, 1, 100, 1, 1, 100, 1],
        'expected': 6
    },
    {
        'cost': [0, 0, 0, 0],
        'expected': 0
    },
    {
        'cost': [1, 1],
        'expected': 1
    },
    {
        'cost': [5, 10],
        'expected': 5
    },
    {
        'cost': [999, 999, 999],
        'expected': 999
    },
    {
        'cost': [1, 2, 3, 4, 5],
        'expected': 6
    },
    {
        'cost': [0, 1, 2, 2, 1, 0],
        'expected': 3
    },
    {
        'cost': [5, 5, 10, 5, 5],
        'expected': 10
    },
    {
        'cost': [100, 50, 10, 5, 1],
        'expected': 55
    },
    {
        'cost': [3, 3, 4, 2, 2, 3, 3],
        'expected': 8
    },
    {
        'cost': [0, 1, 1, 0, 1, 1],
        'expected': 2
    }
]
    
obj = Solution()
for i in range(len(params)):
    cost = params[i]['cost']
    expected = params[i]['expected']
    gotOutput = obj.minCostClimbingStairs(cost)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: cost = {cost}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","const params = [
  {
      'cost': [10, 15, 20],
      'expected': 15
  },
  {
      'cost': [1, 100, 1, 1, 1, 100, 1, 1, 100, 1],
      'expected': 6
  },
  {
      'cost': [0, 0, 0, 0],
      'expected': 0
  },
  {
      'cost': [1, 1],
      'expected': 1
  },
  {
      'cost': [5, 10],
      'expected': 5
  },
  {
      'cost': [999, 999, 999],
      'expected': 999
  },
  {
      'cost': [1, 2, 3, 4, 5],
      'expected': 6
  },
  {
      'cost': [0, 1, 2, 2, 1, 0],
      'expected': 3
  },
  {
      'cost': [5, 5, 10, 5, 5],
      'expected': 10
  },
  {
      'cost': [100, 50, 10, 5, 1],
      'expected': 55
  },
  {
      'cost': [3, 3, 4, 2, 2, 3, 3],
      'expected': 8
  },
  {
      'cost': [0, 1, 1, 0, 1, 1],
      'expected': 2
  }
]


for (let i = 0; i < params.length; i++) {
  const cost = params[i].cost;
  const expected = params[i].expected;
  const gotOutput = minCostClimbingStairs(cost);
  if (expected !== gotOutput) {
      console.log(`\u274C Test ${i} failed: cost = ${cost}, expected = ${expected}, but got ${gotOutput}`);
  } else {
      console.log(`\u2705 Test ${i} succeeded`);
  }
}",,
63b5953a8ad4593d6b7b01fd,house-robber,"params = [
  {
      ""nums"": [1, 2, 3, 1],
      ""expected"": 4
  },
  {
      ""nums"": [2, 7, 9, 3, 1],
      ""expected"": 12
  },
  {
      ""nums"": [0, 0, 0, 0, 0],
      ""expected"": 0
  },
  {
      ""nums"": [1],
      ""expected"": 1
  },
  {
      ""nums"": [1, 2],
      ""expected"": 2
  },
  {
      ""nums"": [400, 400, 400],
      ""expected"": 800
  },
  {
      ""nums"": [5, 2, 5, 2, 5],
      ""expected"": 15
  },
  {
      ""nums"": [2, 4, 6, 8, 10],
      ""expected"": 18
  },
  {
      ""nums"": [1, 3, 5, 7, 9],
      ""expected"": 15
  },
  {
      ""nums"": [2, 3, 2, 3, 2],
      ""expected"": 6
  },
  {
      ""nums"": [9, 1, 2, 3, 8],
      ""expected"": 19
  },
  {
      ""nums"": [2, 2, 2, 2, 2, 2, 2],
      ""expected"": 8
  }
]

obj = Solution()
for i in range(len(params)):
    nums = params[i]['nums']
    expected = params[i]['expected']
    gotOutput = obj.rob(nums)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: nums = {nums}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","const params = [
  {
      nums: [1, 2, 3, 1],
      expected: 4
  },
  {
      nums: [2, 7, 9, 3, 1],
      expected: 12
  },
  {
      nums: [0, 0, 0, 0, 0],
      expected: 0
  },
  {
      nums: [1],
      expected: 1
  },
  {
      nums: [1, 2],
      expected: 2
  },
  {
      nums: [400, 400, 400],
      expected: 800
  },
  {
      nums: [5, 2, 5, 2, 5],
      expected: 15
  },
  {
      nums: [2, 4, 6, 8, 10],
      expected: 18
  },
  {
      nums: [1, 3, 5, 7, 9],
      expected: 15
  },
  {
      nums: [2, 3, 2, 3, 2],
      expected: 6
  },
  {
      nums: [9, 1, 2, 3, 8],
      expected: 19
  },
  {
      nums: [2, 2, 2, 2, 2, 2, 2],
      expected: 8
  }
];


for (let i = 0; i < params.length; i++) {
  const nums = params[i].nums;
  const expected = params[i].expected;
  const gotOutput = rob(nums);
  if (expected !== gotOutput) {
      console.log(`\u274C Test ${i} failed: nums = ${nums}, expected = ${expected}, but got ${gotOutput}`);
  } else {
      console.log(`\u2705 Test ${i} succeeded`);
  }
}",,
63b5953b8ad4593d6b7b01fe,house-robber-ii,"params = [
    {
        'nums': [2, 3, 2],
        'expected': 3
    },
    {
        'nums': [1, 2, 3, 1],
        'expected': 4
    },
    {
        'nums': [1, 2, 3],
        'expected': 3
    },
    {
        'nums': [1, 1, 1, 1],
        'expected': 2
    },
    {
        'nums': [2, 2, 2, 2],
        'expected': 4
    },
    {
        'nums': [1, 3, 1, 3],
        'expected': 6
    },
    {
        'nums': [5, 1, 1, 5],
        'expected': 6
    },
    {
        'nums': [1, 1, 1, 1, 1],
        'expected': 2
    },
    {
        'nums': [2, 3, 2, 3, 2],
        'expected': 6
    },
    {
        'nums': [4, 1, 2, 7, 5, 3, 1],
        'expected': 14
    },
    {
        'nums': [1, 2, 1, 1, 1000, 1, 1, 2, 1],
        'expected': 1004
    },
    {
        'nums': [1000, 1, 1, 1, 1000],
        'expected': 1001
    }
]

obj = Solution()
for i in range(len(params)):
    nums = params[i]['nums']
    expected = params[i]['expected']
    gotOutput = obj.rob(nums)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: nums = {nums}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","const params = [
  {
      'nums': [2, 3, 2],
      'expected': 3
  },
  {
      'nums': [1, 2, 3, 1],
      'expected': 4
  },
  {
      'nums': [1, 2, 3],
      'expected': 3
  },
  {
      'nums': [1, 1, 1, 1],
      'expected': 2
  },
  {
      'nums': [2, 2, 2, 2],
      'expected': 4
  },
  {
      'nums': [1, 3, 1, 3],
      'expected': 6
  },
  {
      'nums': [5, 1, 1, 5],
      'expected': 6
  },
  {
      'nums': [1, 1, 1, 1, 1],
      'expected': 2
  },
  {
      'nums': [2, 3, 2, 3, 2],
      'expected': 6
  },
  {
      'nums': [4, 1, 2, 7, 5, 3, 1],
      'expected': 14
  },
  {
      'nums': [1, 2, 1, 1, 1000, 1, 1, 2, 1],
      'expected': 1004
  },
  {
      'nums': [1000, 1, 1, 1, 1000],
      'expected': 1001
  }
]

for (let i = 0; i < params.length; i++) {
  const nums = params[i].nums;
  const expected = params[i].expected;
  const gotOutput = rob(nums);
  if (expected !== gotOutput) {
      console.log(`\u274C Test ${i} failed: nums = ${nums}, expected = ${expected}, but got ${gotOutput}`);
  } else {
      console.log(`\u2705 Test ${i} succeeded`);
  }
}",,
63b5953c8ad4593d6b7b01ff,longest-palindromic-substring,"params = [
    {
        's': ""babad"",
        'expected': ""bab""  
    },
    {
        's': ""cbbd"",
        'expected': ""bb""
    },
    {
        's': ""a"",
        'expected': ""a""
    },
    {
        's': ""ac"",
        'expected': ""a"" 
    },
    {
        's': ""bb"",
        'expected': ""bb""
    },
    {
        's': ""abcda"",
        'expected': ""a""  
    },
    {
        's': ""aaaa"",
        'expected': ""aaaa""
    },
    {
        's': ""abcdefg"",
        'expected': ""a""  
    },
    {
        's': ""abccba"",
        'expected': ""abccba""
    },
    {
        's': ""babadada"",
        'expected': ""adada""
    },
    {
        's': ""racecar"",
        'expected': ""racecar""
    },
    {
        's': ""123454321"",
        'expected': ""123454321""
    }
]


obj = Solution()
for i in range(len(params)):
    s = params[i]['s']
    expected = params[i]['expected']
    gotOutput = obj.longestPalindrome(s)
    if expected != gotOutput and (i != 0 or gotOutput != ""aba"") and (i != 3 or gotOutput != ""c"") and (i != 5 or gotOutput not in ""abcda"") and (i != 7 or gotOutput not in ""abcdefg""):
        print(f""\u274C Test {i} failed: s = {s}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","const params = [
  {
      's': ""babad"",
      'expected': ""bab""  
  },
  {
      's': ""cbbd"",
      'expected': ""bb""
  },
  {
      's': ""a"",
      'expected': ""a""
  },
  {
      's': ""ac"",
      'expected': ""a"" 
  },
  {
      's': ""bb"",
      'expected': ""bb""
  },
  {
      's': ""abcda"",
      'expected': ""a""  
  },
  {
      's': ""aaaa"",
      'expected': ""aaaa""
  },
  {
      's': ""abcdefg"",
      'expected': ""a""  
  },
  {
      's': ""abccba"",
      'expected': ""abccba""
  },
  {
      's': ""babadada"",
      'expected': ""adada""
  },
  {
      's': ""racecar"",
      'expected': ""racecar""
  },
  {
      's': ""123454321"",
      'expected': ""123454321""
  }
]


for (let i = 0; i < params.length; i++) {
  const s = params[i].s;
  const expected = params[i].expected;
  const gotOutput = longestPalindrome(s);
  if (expected !== gotOutput && (i !== 0 || gotOutput !== ""aba"") && (i !== 3 || gotOutput !== ""c"") && (i !== 5 || ""abcda"".indexOf(gotOutput) === -1) && (i !== 7 || ""abcdefg"".indexOf(gotOutput) === -1)) {
      console.log(`\u274C Test ${i} failed: s = ${s}, expected = ${expected}, but got ${gotOutput}`);
  } else {
      console.log(`\u2705 Test ${i} succeeded`);
  }
}",,
63b5953c8ad4593d6b7b0200,palindromic-substrings,"params = [
    {
        's': ""abc"",
        'expected': 3
    },
    {
        's': ""aaa"",
        'expected': 6
    },
    {
        's': ""a"",
        'expected': 1
    },
    {
        's': ""aa"",
        'expected': 3
    },
    {
        's': ""ab"",
        'expected': 2
    },
    {
        's': ""racecar"",
        'expected': 10
    },
    {
        's': ""121"",
        'expected': 4
    },
    {
        's': ""abccba"",
        'expected': 9
    },
    {
        's': ""abcdef"",
        'expected': 6
    },
    {
        's': ""abaab"",
        'expected': 8
    },
    {
        's': ""aaabaa"",
        'expected': 12
    },
    {
        's': ""aaaaaa"",
        'expected': 21
    }
]

obj = Solution()
for i in range(len(params)):
    s = params[i]['s']
    expected = params[i]['expected']
    gotOutput = obj.countSubstrings(s)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: s = {s}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","const params = [
  {
      's': ""abc"",
      'expected': 3
  },
  {
      's': ""aaa"",
      'expected': 6
  },
  {
      's': ""a"",
      'expected': 1
  },
  {
      's': ""aa"",
      'expected': 3
  },
  {
      's': ""ab"",
      'expected': 2
  },
  {
      's': ""racecar"",
      'expected': 10
  },
  {
      's': ""121"",
      'expected': 4
  },
  {
      's': ""abccba"",
      'expected': 9
  },
  {
      's': ""abcdef"",
      'expected': 6
  },
  {
      's': ""abaab"",
      'expected': 8
  },
  {
      's': ""aaabaa"",
      'expected': 12
  },
  {
      's': ""aaaaaa"",
      'expected': 21
  }
]

for (let i = 0; i < params.length; i++) {
  const s = params[i].s;
  const expected = params[i].expected;
  const gotOutput = countSubstrings(s);
  if (expected !== gotOutput) {
      console.log(`\u274C Test ${i} failed: s = ${s}, expected = ${expected}, but got ${gotOutput}`);
  } else {
      console.log(`\u2705 Test ${i} succeeded`);
  }
}",,
63b5953d8ad4593d6b7b0201,decode-ways,"params = [
    {""s"": ""12"", ""expected"": 2},
    {""s"": ""226"", ""expected"": 3},
    {""s"": ""06"", ""expected"": 0},
    {""s"": ""1"", ""expected"": 1},
    {""s"": ""27"", ""expected"": 1},
    {""s"": ""11106"", ""expected"": 2},
    {""s"": ""10011"", ""expected"": 0},
    {""s"": ""101"", ""expected"": 1},
    {""s"": ""110"", ""expected"": 1},
    {""s"": ""12345"", ""expected"": 3},
    {""s"": ""12121"", ""expected"": 8},
    {""s"": ""2610"", ""expected"": 2},
    {""s"": ""1111"", ""expected"": 5},
    {""s"": ""999"", ""expected"": 1},
    {""s"": ""230"", ""expected"": 0}
]

obj = Solution()
for i in range(len(params)):
    s = params[i]['s']
    expected = params[i]['expected']
    gotOutput = obj.numDecodings(s)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: s = {s}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","const params = [
  {""s"": ""12"", ""expected"": 2},
  {""s"": ""226"", ""expected"": 3},
  {""s"": ""06"", ""expected"": 0},
  {""s"": ""1"", ""expected"": 1},
  {""s"": ""27"", ""expected"": 1},
  {""s"": ""11106"", ""expected"": 2},
  {""s"": ""10011"", ""expected"": 0},
  {""s"": ""101"", ""expected"": 1},
  {""s"": ""110"", ""expected"": 1},
  {""s"": ""12345"", ""expected"": 3},
  {""s"": ""12121"", ""expected"": 8},
  {""s"": ""2610"", ""expected"": 2},
  {""s"": ""1111"", ""expected"": 5},
  {""s"": ""999"", ""expected"": 1},
  {""s"": ""230"", ""expected"": 0}
]

for (let i = 0; i < params.length; i++) {
  const s = params[i].s;
  const expected = params[i].expected;
  const gotOutput = numDecodings(s);
  if (expected !== gotOutput) {
      console.log(`\u274C Test ${i} failed: s = ${s}, expected = ${expected}, but got ${gotOutput}`);
  } else {
      console.log(`\u2705 Test ${i} succeeded`);
  }
}",,
63b5953e8ad4593d6b7b0202,coin-change,"params = [
    {""coins"": [1, 2, 5], ""amount"": 11, ""expected"": 3},
    {""coins"": [2], ""amount"": 3, ""expected"": -1},
    {""coins"": [1], ""amount"": 0, ""expected"": 0},
    {""coins"": [1, 4, 5], ""amount"": 8, ""expected"": 2},
    {""coins"": [3, 5, 7], ""amount"": 26, ""expected"": 4},
    {""coins"": [186, 419, 83, 408], ""amount"": 6249, ""expected"": 20},
    {""coins"": [1, 4, 5], ""amount"": 7, ""expected"": 3},
    {""coins"": [83, 186, 408, 419], ""amount"": 6249, ""expected"": 20},
    {""coins"": [5, 9, 15], ""amount"": 28, ""expected"": 4},
    {""coins"": [2, 5, 10, 20, 50], ""amount"": 83, ""expected"": 7},
    {""coins"": [3, 5], ""amount"": 9, ""expected"": 3},
    {""coins"": [1, 2, 3], ""amount"": 6, ""expected"": 2},
    {""coins"": [1, 2, 5], ""amount"": 100, ""expected"": 20},
    {""coins"": [2, 3, 5], ""amount"": 7, ""expected"": 2},
    {""coins"": [5, 7, 9], ""amount"": 29, ""expected"": 5}
]

obj = Solution()
for i in range(len(params)):
    coins = params[i]['coins']
    amount = params[i]['amount']
    expected = params[i]['expected']
    gotOutput = obj.coinChange(coins, amount)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: coins = {coins}, amount = {amount}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","const params = [
  {""coins"": [1, 2, 5], ""amount"": 11, ""expected"": 3},
  {""coins"": [2], ""amount"": 3, ""expected"": -1},
  {""coins"": [1], ""amount"": 0, ""expected"": 0},
  {""coins"": [1, 4, 5], ""amount"": 8, ""expected"": 2},
  {""coins"": [3, 5, 7], ""amount"": 26, ""expected"": 4},
  {""coins"": [186, 419, 83, 408], ""amount"": 6249, ""expected"": 20},
  {""coins"": [1, 4, 5], ""amount"": 7, ""expected"": 3},
  {""coins"": [83, 186, 408, 419], ""amount"": 6249, ""expected"": 20},
  {""coins"": [5, 9, 15], ""amount"": 28, ""expected"": 4},
  {""coins"": [2, 5, 10, 20, 50], ""amount"": 83, ""expected"": 7},
  {""coins"": [3, 5], ""amount"": 9, ""expected"": 3},
  {""coins"": [1, 2, 3], ""amount"": 6, ""expected"": 2},
  {""coins"": [1, 2, 5], ""amount"": 100, ""expected"": 20},
  {""coins"": [2, 3, 5], ""amount"": 7, ""expected"": 2},
  {""coins"": [5, 7, 9], ""amount"": 29, ""expected"": 5}
]

for (let i = 0; i < params.length; i++) {
  const coins = params[i].coins;
  const amount = params[i].amount;
  const expected = params[i].expected;
  const gotOutput = coinChange(coins, amount);
  if (expected !== gotOutput) {
      console.log(`\u274C Test ${i} failed: coins = ${coins}, amount = ${amount}, expected = ${expected}, but got ${gotOutput}`);
  } else {
      console.log(`\u2705 Test ${i} succeeded`);
  }
}",,
63b5953f8ad4593d6b7b0203,maximum-product-subarray,"params = [
    {""nums"": [2, 3, -2, 4], ""expected"": 6},
    {""nums"": [-2, 0, -1], ""expected"": 0},
    {""nums"": [0, 1, 2, 3, 4], ""expected"": 24},
    {""nums"": [-2, -3, 4, -1, -2, 1, 5, -3], ""expected"": 360},
    {""nums"": [0, 0, 0], ""expected"": 0},
    {""nums"": [1, 0, 2, 3, 4], ""expected"": 24},
    {""nums"": [5, 2, -1, 3, 0, 1], ""expected"": 10},
    {""nums"": [-1, -2, -3, -4, -5], ""expected"": 120},
    {""nums"": [2, -5, -2, -4, 3], ""expected"": 24},
    {""nums"": [1, 1, 1, 1, 1], ""expected"": 1},
    {""nums"": [-1, -1, 1, 1, 1], ""expected"": 1},
    {""nums"": [3, -1, 4], ""expected"": 4},
    {""nums"": [10, -10, 1, 1, 1], ""expected"": 10},
    {""nums"": [-2, 2, 3, -1, 4], ""expected"": 48},
    {""nums"": [1, -2, 0, 2, 3, -3], ""expected"": 6},
]

obj = Solution()
for i in range(len(params)):
    nums = params[i]['nums']
    expected = params[i]['expected']
    gotOutput = obj.maxProduct(nums)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: nums = {nums}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","const params = [
  {""nums"": [2, 3, -2, 4], ""expected"": 6},
  {""nums"": [-2, 0, -1], ""expected"": 0},
  {""nums"": [0, 1, 2, 3, 4], ""expected"": 24},
  {""nums"": [-2, -3, 4, -1, -2, 1, 5, -3], ""expected"": 360},
  {""nums"": [0, 0, 0], ""expected"": 0},
  {""nums"": [1, 0, 2, 3, 4], ""expected"": 24},
  {""nums"": [5, 2, -1, 3, 0, 1], ""expected"": 10},
  {""nums"": [-1, -2, -3, -4, -5], ""expected"": 120},
  {""nums"": [2, -5, -2, -4, 3], ""expected"": 24},
  {""nums"": [1, 1, 1, 1, 1], ""expected"": 1},
  {""nums"": [-1, -1, 1, 1, 1], ""expected"": 1},
  {""nums"": [3, -1, 4], ""expected"": 4},
  {""nums"": [10, -10, 1, 1, 1], ""expected"": 10},
  {""nums"": [-2, 2, 3, -1, 4], ""expected"": 48},
  {""nums"": [1, -2, 0, 2, 3, -3], ""expected"": 6},
]

for (let i = 0; i < params.length; i++) {
  let nums = params[i]['nums'];
  let expected = params[i]['expected'];
  let gotOutput = maxProduct(nums);
  if (expected !== gotOutput) {
      console.log(`\u274C Test ${i} failed: nums = ${nums}, expected = ${expected}, but got ${gotOutput}`);
  } else {
      console.log(`\u2705 Test ${i} succeeded`);
  }
}",,
63b595408ad4593d6b7b0204,word-break,"params = [
    {
        's': 'leetcode',
        'wordDict': ['leet', 'code'],
        'expected': True
    },
    {
        's': 'applepenapple',
        'wordDict': ['apple', 'pen'],
        'expected': True
    },
    {
        's': 'catsandog',
        'wordDict': ['cats', 'dog', 'sand', 'and', 'cat'],
        'expected': False
    },
    {
        's': 'helloworld',
        'wordDict': ['hello', 'world'],
        'expected': True
    },
    {
        's': 'foobar',
        'wordDict': ['foo', 'bar'],
        'expected': True
    },
    {
        's': 'foobazbar',
        'wordDict': ['foo', 'bar'],
        'expected': False
    },
    {
        's': 'openai',
        'wordDict': ['open', 'ai'],
        'expected': True
    },
    {
        's': 'openai',
        'wordDict': ['pen', 'ai'],
        'expected': False
    },
    {
        's': 'pineapple',
        'wordDict': ['apple', 'pine'],
        'expected': True
    },
    {
        's': 'pineapplepen',
        'wordDict': ['apple', 'pine', 'pen'],
        'expected': True
    },
    {
        's': 'pineapplepenapple',
        'wordDict': ['apple', 'pine', 'pen'],
        'expected': True
    },
    {
        's': 'pineapplepencil',
        'wordDict': ['apple', 'pine', 'pen'],
        'expected': False
    },
    {
        's': 'super',
        'wordDict': ['su', 'per'],
        'expected': True
    },
    {
        's': 'superman',
        'wordDict': ['su', 'per', 'man'],
        'expected': True
    },
    {
        's': 'superwoman',
        'wordDict': ['su', 'per', 'man'],
        'expected': False
    }
]

obj = Solution()
for i in range(len(params)):
    s = params[i]['s']
    wordDict = params[i]['wordDict']
    expected = params[i]['expected']
    gotOutput = obj.wordBreak(s, wordDict)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: s = {s}, wordDict = {wordDict}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","const params = [
  {
      's': 'leetcode',
      'wordDict': ['leet', 'code'],
      'expected': true
  },
  {
      's': 'applepenapple',
      'wordDict': ['apple', 'pen'],
      'expected': true
  },
  {
      's': 'catsandog',
      'wordDict': ['cats', 'dog', 'sand', 'and', 'cat'],
      'expected': false
  },
  {
      's': 'helloworld',
      'wordDict': ['hello', 'world'],
      'expected': true
  },
  {
      's': 'foobar',
      'wordDict': ['foo', 'bar'],
      'expected': true
  },
  {
      's': 'foobazbar',
      'wordDict': ['foo', 'bar'],
      'expected': false
  },
  {
      's': 'openai',
      'wordDict': ['open', 'ai'],
      'expected': true
  },
  {
      's': 'openai',
      'wordDict': ['pen', 'ai'],
      'expected': false
  },
  {
      's': 'pineapple',
      'wordDict': ['apple', 'pine'],
      'expected': true
  },
  {
      's': 'pineapplepen',
      'wordDict': ['apple', 'pine', 'pen'],
      'expected': true
  },
  {
      's': 'pineapplepenapple',
      'wordDict': ['apple', 'pine', 'pen'],
      'expected': true
  },
  {
      's': 'pineapplepencil',
      'wordDict': ['apple', 'pine', 'pen'],
      'expected': false
  },
  {
      's': 'super',
      'wordDict': ['su', 'per'],
      'expected': true
  },
  {
      's': 'superman',
      'wordDict': ['su', 'per', 'man'],
      'expected': true
  },
  {
      's': 'superwoman',
      'wordDict': ['su', 'per', 'man'],
      'expected': false
  }
]

for (let i = 0; i < params.length; i++) {
  let s = params[i]['s'];
  let wordDict = params[i]['wordDict'];
  let expected = params[i]['expected'];
  let gotOutput = wordBreak(s, wordDict);
  if (expected !== gotOutput) {
      console.log(`\u274C Test ${i} failed: s = ${s}, wordDict = ${wordDict}, expected = ${expected}, but got ${gotOutput}`);
  } else {
      console.log(`\u2705 Test ${i} succeeded`);
  }
}",,
63b595418ad4593d6b7b0205,longest-increasing-subsequence,"params = [
    {
        'nums': [10,9,2,5,3,7,101,18],
        'expected': 4
    },
    {
        'nums': [0,1,0,3,2,3],
        'expected': 4
    },
    {
        'nums': [7,7,7,7,7,7,7],
        'expected': 1
    },
    {
        'nums': [1,2,3,4,5,6,7,8,9,10],
        'expected': 10
    },
    {
        'nums': [10,9,8,7,6,5,4,3,2,1],
        'expected': 1
    },
    {
        'nums': [-5,0,5,10,15,20],
        'expected': 6
    },
    {
        'nums': [0,-1,2,-3,4,-5,6,-7,8],
        'expected': 5
    },
    {
        'nums': [1,2,1,2,1,2,1,2,1,2],
        'expected': 2
    },
    {
        'nums': [10,22,9,33,21,50,41,60,80],
        'expected': 6
    },
    {
        'nums': [3,4,5,1,2],
        'expected': 3
    },
    {
        'nums': [10,9,2,5,3,4],
        'expected': 3
    },
    {
        'nums': [1,3,6,7,9,4,10,5,6],
        'expected': 6
    },
    {
        'nums': [0,8,4,12,2,10,6,14,1,9,5,13,3,11,7,15],
        'expected': 6
    },
    {
        'nums': [1,3,2,3,1,4],
        'expected': 4
    },
    {
        'nums': [2,2,2,2,2],
        'expected': 1
    }
]
    
obj = Solution()
for i in range(len(params)):
    nums = params[i]['nums']
    expected = params[i]['expected']
    gotOutput = obj.lengthOfLIS(nums)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: nums = {nums}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","const params = [
  {
      'nums': [10,9,2,5,3,7,101,18],
      'expected': 4
  },
  {
      'nums': [0,1,0,3,2,3],
      'expected': 4
  },
  {
      'nums': [7,7,7,7,7,7,7],
      'expected': 1
  },
  {
      'nums': [1,2,3,4,5,6,7,8,9,10],
      'expected': 10
  },
  {
      'nums': [10,9,8,7,6,5,4,3,2,1],
      'expected': 1
  },
  {
      'nums': [-5,0,5,10,15,20],
      'expected': 6
  },
  {
      'nums': [0,-1,2,-3,4,-5,6,-7,8],
      'expected': 5
  },
  {
      'nums': [1,2,1,2,1,2,1,2,1,2],
      'expected': 2
  },
  {
      'nums': [10,22,9,33,21,50,41,60,80],
      'expected': 6
  },
  {
      'nums': [3,4,5,1,2],
      'expected': 3
  },
  {
      'nums': [10,9,2,5,3,4],
      'expected': 3
  },
  {
      'nums': [1,3,6,7,9,4,10,5,6],
      'expected': 6
  },
  {
      'nums': [0,8,4,12,2,10,6,14,1,9,5,13,3,11,7,15],
      'expected': 6
  },
  {
      'nums': [1,3,2,3,1,4],
      'expected': 4
  },
  {
      'nums': [2,2,2,2,2],
      'expected': 1
  }
]

for (let i = 0; i < params.length; i++) {
  let nums = params[i]['nums'];
  let expected = params[i]['expected'];
  let gotOutput = lengthOfLIS(nums);
  if (expected !== gotOutput) {
      console.log(`\u274C Test ${i} failed: nums = ${nums}, expected = ${expected}, but got ${gotOutput}`);
  } else {
      console.log(`\u2705 Test ${i} succeeded`);
  }
}",,
63b595418ad4593d6b7b0206,partition-equal-subset-sum,"params = [
    {
        'nums': [1,5,11,5],
        'expected': True
    },
    {
        'nums': [1,2,3,5],
        'expected': False
    },
    {
        'nums': [1,1,1,1],
        'expected': True
    },
    {
        'nums': [1,1,1,2],
        'expected': False
    },
    {
        'nums': [1,1,1,2,2],
        'expected': False
    },
    {
        'nums': [100,200,300,400],
        'expected': True
    },
    {
        'nums': [100,100,100,100],
        'expected': True
    },
    {
        'nums': [1,1,1,1,1,1,1,1,1,1],
        'expected': True
    },
    {
        'nums': [1,1,1,1,1,1,1,1,1,10],
        'expected': False
    },
    {
        'nums': [1,1,1,1,1,1,1,1,1,18],
        'expected': False
    },
    {
        'nums': [3,1,4,2,2,1,5,5],
        'expected': False
    },
    {
        'nums': [2,2,2,2,2,2,2,2,2,2],
        'expected': True
    },
    {
        'nums': [3,3,3,4,5],
        'expected': True
    },
    {
        'nums': [2,3,5,10,20,40],
        'expected': True
    },
    {
        'nums': [1,2,4,8,16,32],
        'expected': False
    }
]
    
obj = Solution()
for i in range(len(params)):
    nums = params[i]['nums']
    expected = params[i]['expected']
    gotOutput = obj.canPartition(nums)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: nums = {nums}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","const params = [
  {
      'nums': [1,5,11,5],
      'expected': true
  },
  {
      'nums': [1,2,3,5],
      'expected': false
  },
  {
      'nums': [1,1,1,1],
      'expected': true
  },
  {
      'nums': [1,1,1,2],
      'expected': false
  },
  {
      'nums': [1,1,1,2,2],
      'expected': false
  },
  {
      'nums': [100,200,300,400],
      'expected': true
  },
  {
      'nums': [100,100,100,100],
      'expected': true
  },
  {
      'nums': [1,1,1,1,1,1,1,1,1,1],
      'expected': true
  },
  {
      'nums': [1,1,1,1,1,1,1,1,1,10],
      'expected': false
  },
  {
      'nums': [1,1,1,1,1,1,1,1,1,18],
      'expected': false
  },
  {
      'nums': [3,1,4,2,2,1,5,5],
      'expected': false
  },
  {
      'nums': [2,2,2,2,2,2,2,2,2,2],
      'expected': true
  },
  {
      'nums': [3,3,3,4,5],
      'expected': true
  },
  {
      'nums': [2,3,5,10,20,40],
      'expected': true
  },
  {
      'nums': [1,2,4,8,16,32],
      'expected': false
  }
]

for (let i = 0; i < params.length; i++) {
  let nums = params[i]['nums'];
  let expected = params[i]['expected'];
  let gotOutput = canPartition(nums);
  if (expected !== gotOutput) {
      console.log(`\u274C Test ${i} failed: nums = ${nums}, expected = ${expected}, but got ${gotOutput}`);
  } else {
      console.log(`\u2705 Test ${i} succeeded`);
  }
}",,
63b595428ad4593d6b7b0207,unique-paths,"params = [
    {
        'm': 3,
        'n': 7,
        'expected': 28
    },
    {
        'm': 3,
        'n': 2,
        'expected': 3
    },
    {
        'm': 7,
        'n': 3,
        'expected': 28
    },
    {
        'm': 2,
        'n': 2,
        'expected': 2
    },
    {
        'm': 1,
        'n': 1,
        'expected': 1
    },
    {
        'm': 5,
        'n': 5,
        'expected': 70
    },
    {
        'm': 10,
        'n': 10,
        'expected': 48620
    },
    {
        'm': 20,
        'n': 20,
        'expected': 35345263800
    },
    {
        'm': 1,
        'n': 10,
        'expected': 1
    },
    {
        'm': 10,
        'n': 1,
        'expected': 1
    },
    {
        'm': 5,
        'n': 1,
        'expected': 1
    },
    {
        'm': 1,
        'n': 5,
        'expected': 1
    },
    {
        'm': 6,
        'n': 3,
        'expected': 21
    },
    {
        'm': 3,
        'n': 6,
        'expected': 21
    },
    {
        'm': 23,
        'n': 12,
        'expected': 193536720
    }
]
    
obj = Solution()
for i in range(len(params)):
    m = params[i]['m']
    n = params[i]['n']
    expected = params[i]['expected']
    gotOutput = obj.uniquePaths(m, n)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: m = {m}, n = {n}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","const params = [
  {
      'm': 3,
      'n': 7,
      'expected': 28
  },
  {
      'm': 3,
      'n': 2,
      'expected': 3
  },
  {
      'm': 7,
      'n': 3,
      'expected': 28
  },
  {
      'm': 2,
      'n': 2,
      'expected': 2
  },
  {
      'm': 1,
      'n': 1,
      'expected': 1
  },
  {
      'm': 5,
      'n': 5,
      'expected': 70
  },
  {
      'm': 10,
      'n': 10,
      'expected': 48620
  },
  {
      'm': 20,
      'n': 20,
      'expected': 35345263800
  },
  {
      'm': 1,
      'n': 10,
      'expected': 1
  },
  {
      'm': 10,
      'n': 1,
      'expected': 1
  },
  {
      'm': 5,
      'n': 1,
      'expected': 1
  },
  {
      'm': 1,
      'n': 5,
      'expected': 1
  },
  {
      'm': 6,
      'n': 3,
      'expected': 21
  },
  {
      'm': 3,
      'n': 6,
      'expected': 21
  },
  {
      'm': 23,
      'n': 12,
      'expected': 193536720
  }
]

for (let i = 0; i < params.length; i++) {
  let m = params[i]['m'];
  let n = params[i]['n'];
  let expected = params[i]['expected'];
  let gotOutput = uniquePaths(m, n);
  if (expected !== gotOutput) {
      console.log(`\u274C Test ${i} failed: m = ${m}, n = ${n}, expected = ${expected}, but got ${gotOutput}`);
  } else {
      console.log(`\u2705 Test ${i} succeeded`);
  }
}",,
63b595438ad4593d6b7b0208,longest-common-subsequence,"params = [
    {
        'text1': 'abcde',
        'text2': 'ace',
        'expected': 3
    },
    {
        'text1': 'abc',
        'text2': 'abc',
        'expected': 3
    },
    {
        'text1': 'abc',
        'text2': 'def',
        'expected': 0
    },
    {
        'text1': 'bluesky',
        'text2': 'blueday',
        'expected': 5
    },
    {
        'text1': 'abcdefg',
        'text2': 'hijklmnop',
        'expected': 0
    },
    {
        'text1': 'maverick',
        'text2': 'viper',
        'expected': 3
    },
    {
        'text1': 'racecar',
        'text2': 'radar',
        'expected': 4
    },
    {
        'text1': 'earthquake',
        'text2': 'heart',
        'expected': 4
    },
    {
        'text1': 'python',
        'text2': 'typhoon',
        'expected': 4
    },
    {
        'text1': 'sunday',
        'text2': 'monday',
        'expected': 4
    },
    {
        'text1': 'rainbow',
        'text2': 'raincoat',
        'expected': 5
    },
    {
        'text1': 'hamburger',
        'text2': 'hamlet',
        'expected': 4
    },
    {
        'text1': 'antidisestablishmentarianism',
        'text2': 'disestablish',
        'expected': 12
    },
    {
        'text1': 'supercalifragilisticexpialidocious',
        'text2': 'practicalexercise',
        'expected': 11
    },
    {
        'text1': 'mississippi',
        'text2': 'sippingtea',
        'expected': 5
    }
]
    
obj = Solution()
for i in range(len(params)):
    text1 = params[i]['text1']
    text2 = params[i]['text2']
    expected = params[i]['expected']
    gotOutput = obj.longestCommonSubsequence(text1, text2)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: text1 = {text1}, text2 = {text2}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","const params = [
  {
      'text1': 'abcde',
      'text2': 'ace',
      'expected': 3
  },
  {
      'text1': 'abc',
      'text2': 'abc',
      'expected': 3
  },
  {
      'text1': 'abc',
      'text2': 'def',
      'expected': 0
  },
  {
      'text1': 'bluesky',
      'text2': 'blueday',
      'expected': 5
  },
  {
      'text1': 'abcdefg',
      'text2': 'hijklmnop',
      'expected': 0
  },
  {
      'text1': 'maverick',
      'text2': 'viper',
      'expected': 3
  },
  {
      'text1': 'racecar',
      'text2': 'radar',
      'expected': 4
  },
  {
      'text1': 'earthquake',
      'text2': 'heart',
      'expected': 4
  },
  {
      'text1': 'python',
      'text2': 'typhoon',
      'expected': 4
  },
  {
      'text1': 'sunday',
      'text2': 'monday',
      'expected': 4
  },
  {
      'text1': 'rainbow',
      'text2': 'raincoat',
      'expected': 5
  },
  {
      'text1': 'hamburger',
      'text2': 'hamlet',
      'expected': 4
  },
  {
      'text1': 'antidisestablishmentarianism',
      'text2': 'disestablish',
      'expected': 12
  },
  {
      'text1': 'supercalifragilisticexpialidocious',
      'text2': 'practicalexercise',
      'expected': 11
  },
  {
      'text1': 'mississippi',
      'text2': 'sippingtea',
      'expected': 5
  }
]

for (let i = 0; i < params.length; i++) {
  let text1 = params[i]['text1'];
  let text2 = params[i]['text2'];
  let expected = params[i]['expected'];
  let gotOutput = longestCommonSubsequence(text1, text2);
  if (expected !== gotOutput) {
      console.log(`\u274C Test ${i} failed: text1 = ${text1}, text2 = ${text2}, expected = ${expected}, but got ${gotOutput}`);
  } else {
      console.log(`\u2705 Test ${i} succeeded`);
  }
}",,
63b595448ad4593d6b7b0209,best-time-to-buy-and-sell-stock-with-cooldown,"params = [
    {
        'prices': [1,2,3,0,2],
        'expected': 3
    },
    {
        'prices': [1],
        'expected': 0
    },
    {
        'prices': [1,2,3,4,5],
        'expected': 4
    },
    {
        'prices': [7,6,4,3,1],
        'expected': 0
    },
    {
        'prices': [1,2],
        'expected': 1
    },
    {
        'prices': [2,1],
        'expected': 0
    },
    {
        'prices': [1,2,3,0,2,5],
        'expected': 6
    },
    {
        'prices': [1,2,3,0,2,5,0,3],
        'expected': 6
    },
    {
        'prices': [2,1,4],
        'expected': 3
    },
    {
        'prices': [1,0,3,0,2],
        'expected': 3
    },
    {
        'prices': [3,3,5,0,0,3,1,4],
        'expected': 6
    },
    {
        'prices': [1,2,4,2,5,7,2,4,9,0],
        'expected': 11
    },
    {
        'prices': [6,1,3,2,4,7],
        'expected': 6
    },
    {
        'prices': [1,2,3,0,2,7,13,20,0,3],
        'expected': 21
    },
    {
        'prices': [9,7,5,3,1,0],
        'expected': 0
    }
]

obj = Solution()
for i in range(len(params)):
    prices = params[i]['prices']
    expected = params[i]['expected']
    gotOutput = obj.maxProfit(prices)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: prices = {prices}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","const params = [
  {
      'prices': [1,2,3,0,2],
      'expected': 3
  },
  {
      'prices': [1],
      'expected': 0
  },
  {
      'prices': [1,2,3,4,5],
      'expected': 4
  },
  {
      'prices': [7,6,4,3,1],
      'expected': 0
  },
  {
      'prices': [1,2],
      'expected': 1
  },
  {
      'prices': [2,1],
      'expected': 0
  },
  {
      'prices': [1,2,3,0,2,5],
      'expected': 6
  },
  {
      'prices': [1,2,3,0,2,5,0,3],
      'expected': 6
  },
  {
      'prices': [2,1,4],
      'expected': 3
  },
  {
      'prices': [1,0,3,0,2],
      'expected': 3
  },
  {
      'prices': [3,3,5,0,0,3,1,4],
      'expected': 6
  },
  {
      'prices': [1,2,4,2,5,7,2,4,9,0],
      'expected': 11
  },
  {
      'prices': [6,1,3,2,4,7],
      'expected': 6
  },
  {
      'prices': [1,2,3,0,2,7,13,20,0,3],
      'expected': 21
  },
  {
      'prices': [9,7,5,3,1,0],
      'expected': 0
  }
]

for (let i = 0; i < params.length; i++){
  let prices = params[i]['prices'];
  let expected = params[i]['expected'];
  let gotOutput = maxProfit(prices);
  if(expected !== gotOutput){
      console.log(`\u274C Test ${i} failed: prices = ${prices}, expected = ${expected}, but got ${gotOutput}`);
  }else{
      console.log(`\u2705 Test ${i} succeeded`);
  }
}",,
63b595458ad4593d6b7b020a,coin-change-ii,"params = [
    {
        'amount': 5,
        'coins': [1, 2, 5],
        'expected': 4
    },
    {
        'amount': 3,
        'coins': [2],
        'expected': 0
    },
    {
        'amount': 10,
        'coins': [10],
        'expected': 1
    },
    {
        'amount': 0,
        'coins': [1],
        'expected': 1
    },
    {
        'amount': 100,
        'coins': [1, 2, 5],
        'expected': 541
    },
    {
        'amount': 5000,
        'coins': [3,7,405,436],
        'expected': 7153
    },
    {
        'amount': 5000,
        'coins': [3,7,405,436,8,20,13],
        'expected': 4627958073
    },
    {
        'amount': 150,
        'coins': [100,50,200],
        'expected': 2
    },
    {
        'amount': 3000,
        'coins': [5,10,20,50,100,200,500],
        'expected': 22481738
    },
    {
        'amount': 50,
        'coins': [1, 2, 5],
        'expected': 146
    },
    {
        'amount': 100,
        'coins': [1, 99],
        'expected': 2
    },
    {
        'amount': 100,
        'coins': [99],
        'expected': 0
    },
    {
        'amount': 100,
        'coins': [100],
        'expected': 1
    },
    {
        'amount': 5000,
        'coins': [1],
        'expected': 1
    },
    {
        'amount': 5000,
        'coins': [5000],
        'expected': 1
    }
]

obj = Solution()
for i in range(len(params)):
    amount = params[i]['amount']
    coins = params[i]['coins']
    expected = params[i]['expected']
    gotOutput = obj.change(amount, coins)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: amount = {amount}, coins = {coins}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","const params = [
  {
      'amount': 5,
      'coins': [1, 2, 5],
      'expected': 4
  },
  {
      'amount': 3,
      'coins': [2],
      'expected': 0
  },
  {
      'amount': 10,
      'coins': [10],
      'expected': 1
  },
  {
      'amount': 0,
      'coins': [1],
      'expected': 1
  },
  {
      'amount': 100,
      'coins': [1, 2, 5],
      'expected': 541
  },
  {
      'amount': 5000,
      'coins': [3,7,405,436],
      'expected': 7153
  },
  {
      'amount': 5000,
      'coins': [3,7,405,436,8,20,13],
      'expected': 4627958073
  },
  {
      'amount': 150,
      'coins': [100,50,200],
      'expected': 2
  },
  {
      'amount': 3000,
      'coins': [5,10,20,50,100,200,500],
      'expected': 22481738
  },
  {
      'amount': 50,
      'coins': [1, 2, 5],
      'expected': 146
  },
  {
      'amount': 100,
      'coins': [1, 99],
      'expected': 2
  },
  {
      'amount': 100,
      'coins': [99],
      'expected': 0
  },
  {
      'amount': 100,
      'coins': [100],
      'expected': 1
  },
  {
      'amount': 5000,
      'coins': [1],
      'expected': 1
  },
  {
      'amount': 5000,
      'coins': [5000],
      'expected': 1
  }
]

for (let i = 0; i < params.length; i++) {
  let amount = params[i]['amount'];
  let coins = params[i]['coins'];
  let expected = params[i]['expected'];
  let gotOutput = change(amount, coins);
  if (expected !== gotOutput) {
      console.log(`\u274C Test ${i} failed: amount = ${amount}, coins = ${coins}, expected = ${expected}, but got ${gotOutput}`);
  } else {
      console.log(`\u2705 Test ${i} succeeded`);
  }
}",,
63b595468ad4593d6b7b020b,target-sum,"params = [
    {
        'nums': [1,1,1,1,1],
        'target': 3,
        'expected': 5
    },
    {
        'nums': [1],
        'target': 1,
        'expected': 1
    },
    {
        'nums': [1, 1, 1],
        'target': 1,
        'expected': 3
    },
    {
        'nums': [2, 3, 5, 10, 7],
        'target': 7,
        'expected': 3
    },
    {
        'nums': [2, 3, 5, 6],
        'target': 1,
        'expected': 0
    },
    {
        'nums': [1, 2, 3],
        'target': 0,
        'expected': 2
    },
    {
        'nums': [1000, 1000, 1000, 1000, 1000],
        'target': 1000,
        'expected': 10
    },
    {
        'nums': [1, 2, 1],
        'target': 0,
        'expected': 2
    },
    {
        'nums': [0, 0, 0, 0, 0],
        'target': 0,
        'expected': 32
    },
    {
        'nums': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        'target': 5,
        'expected': 0
    },
    {
        'nums': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        'target': 0,
        'expected': 252
    },
    {
        'nums': [2, 3, 4, 5],
        'target': 1,
        'expected': 0
    },
    {
        'nums': [2, 2, 2, 2, 2, 2],
        'target': 2,
        'expected': 0
    },
    {
        'nums': [1, 0],
        'target': 1,
        'expected': 2
    },
    {
        'nums': [1, 2, 3, 4, 5],
        'target': 3,
        'expected': 3
    }
]

obj = Solution()
for i in range(len(params)):
    nums = params[i]['nums']
    target = params[i]['target']
    expected = params[i]['expected']
    gotOutput = obj.findTargetSumWays(nums, target)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: nums = {nums}, target = {target}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","const params = [
  {
      'nums': [1,1,1,1,1],
      'target': 3,
      'expected': 5
  },
  {
      'nums': [1],
      'target': 1,
      'expected': 1
  },
  {
      'nums': [1, 1, 1],
      'target': 1,
      'expected': 3
  },
  {
      'nums': [2, 3, 5, 10, 7],
      'target': 7,
      'expected': 3
  },
  {
      'nums': [2, 3, 5, 6],
      'target': 1,
      'expected': 0
  },
  {
      'nums': [1, 2, 3],
      'target': 0,
      'expected': 2
  },
  {
      'nums': [1000, 1000, 1000, 1000, 1000],
      'target': 1000,
      'expected': 10
  },
  {
      'nums': [1, 2, 1],
      'target': 0,
      'expected': 2
  },
  {
      'nums': [0, 0, 0, 0, 0],
      'target': 0,
      'expected': 32
  },
  {
      'nums': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
      'target': 5,
      'expected': 0
  },
  {
      'nums': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
      'target': 0,
      'expected': 252
  },
  {
      'nums': [2, 3, 4, 5],
      'target': 1,
      'expected': 0
  },
  {
      'nums': [2, 2, 2, 2, 2, 2],
      'target': 2,
      'expected': 0
  },
  {
      'nums': [1, 0],
      'target': 1,
      'expected': 2
  },
  {
      'nums': [1, 2, 3, 4, 5],
      'target': 3,
      'expected': 3
  }
]

for(let i = 0; i < params.length; i++) {
  let nums = params[i]['nums'];
  let target = params[i]['target'];
  let expected = params[i]['expected'];
  let gotOutput = findTargetSumWays(nums, target);
  if(expected !== gotOutput) {
      console.log(`\u274C Test ${i} failed: nums = ${nums}, target = ${target}, expected = ${expected}, but got ${gotOutput}`);
  } else {
      console.log(`\u2705 Test ${i} succeeded`);
  }
}",,
63b595478ad4593d6b7b020c,interleaving-string,"params = [
    {
        's1': ""aabcc"",
        's2': ""dbbca"",
        's3': ""aadbbcbcac"",
        'expected': True
    },
    {
        's1': ""aabcc"",
        's2': ""dbbca"",
        's3': ""aadbbbaccc"",
        'expected': False
    },
    {
        's1': """",
        's2': """",
        's3': """",
        'expected': True
    },
    {
        's1': ""abc"",
        's2': ""def"",
        's3': ""abcdef"",
        'expected': True
    },
    {
        's1': ""abc"",
        's2': ""def"",
        's3': ""abcde"",
        'expected': False
    },
    {
        's1': ""a"",
        's2': ""b"",
        's3': ""ab"",
        'expected': True
    },
    {
        's1': ""ab"",
        's2': ""cd"",
        's3': ""abcd"",
        'expected': True
    },
    {
        's1': ""abc"",
        's2': ""def"",
        's3': ""abdecf"",
        'expected': True
    },
    {
        's1': ""xyz"",
        's2': ""abc"",
        's3': ""xyabcz"",
        'expected': True
    },
    {
        's1': ""aaa"",
        's2': ""bbb"",
        's3': ""aaabbb"",
        'expected': True
    },
    {
        's1': ""abc"",
        's2': """",
        's3': ""abc"",
        'expected': True
    },
    {
        's1': """",
        's2': ""abc"",
        's3': ""abc"",
        'expected': True
    },
    {
        's1': ""abc"",
        's2': ""abc"",
        's3': ""aabbcc"",
        'expected': True
    },
    {
        's1': ""abc"",
        's2': ""def"",
        's3': ""abcdef"",
        'expected': True
    },
    {
        's1': ""abc"",
        's2': ""abc"",
        's3': ""abccba"",
        'expected': False
    }
]

obj = Solution()
for i in range(len(params)):
    s1 = params[i]['s1']
    s2 = params[i]['s2']
    s3 = params[i]['s3']
    expected = params[i]['expected']
    gotOutput = obj.isInterleave(s1, s2, s3)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: s1 = {s1}, s2 = {s2}, s3 = {s3}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","const params = [
  {
      's1': ""aabcc"",
      's2': ""dbbca"",
      's3': ""aadbbcbcac"",
      'expected': true
  },
  {
      's1': ""aabcc"",
      's2': ""dbbca"",
      's3': ""aadbbbaccc"",
      'expected': false
  },
  {
      's1': """",
      's2': """",
      's3': """",
      'expected': true
  },
  {
      's1': ""abc"",
      's2': ""def"",
      's3': ""abcdef"",
      'expected': true
  },
  {
      's1': ""abc"",
      's2': ""def"",
      's3': ""abcde"",
      'expected': false
  },
  {
      's1': ""a"",
      's2': ""b"",
      's3': ""ab"",
      'expected': true
  },
  {
      's1': ""ab"",
      's2': ""cd"",
      's3': ""abcd"",
      'expected': true
  },
  {
      's1': ""abc"",
      's2': ""def"",
      's3': ""abdecf"",
      'expected': true
  },
  {
      's1': ""xyz"",
      's2': ""abc"",
      's3': ""xyabcz"",
      'expected': true
  },
  {
      's1': ""aaa"",
      's2': ""bbb"",
      's3': ""aaabbb"",
      'expected': true
  },
  {
      's1': ""abc"",
      's2': """",
      's3': ""abc"",
      'expected': true
  },
  {
      's1': """",
      's2': ""abc"",
      's3': ""abc"",
      'expected': true
  },
  {
      's1': ""abc"",
      's2': ""abc"",
      's3': ""aabbcc"",
      'expected': true
  },
  {
      's1': ""abc"",
      's2': ""def"",
      's3': ""abcdef"",
      'expected': true
  },
  {
      's1': ""abc"",
      's2': ""abc"",
      's3': ""abccba"",
      'expected': false
  }
]

for (let i = 0; i < params.length; i++) {
  let s1 = params[i]['s1'];
  let s2 = params[i]['s2'];
  let s3 = params[i]['s3'];
  let expected = params[i]['expected'];
  let gotOutput = isInterleave(s1, s2, s3);
  if (expected != gotOutput) {
      console.log(`\u274C Test ${i} failed: s1 = ${s1}, s2 = ${s2}, s3 = ${s3}, expected = ${expected}, but got ${gotOutput}`);
  } else {
      console.log(`\u2705 Test ${i} succeeded`);
  }
}",,
63b595488ad4593d6b7b020d,longest-increasing-path-in-a-matrix,"params = [
    {
        'matrix': [[9,9,4],[6,6,8],[2,1,1]],
        'expected': 4
    },
    {
        'matrix': [[3,4,5],[3,2,6],[2,2,1]],
        'expected': 4
    },
    {
        'matrix': [[1]],
        'expected': 1
    },
    {
        'matrix': [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]],
        'expected': 7
    },
    {
        'matrix': [[16,15,14,13],[12,11,10,9],[8,7,6,5],[4,3,2,1]],
        'expected': 7
    },
    {
        'matrix': [[1,2,3],[6,5,4],[7,8,9]],
        'expected': 9
    },
    {
        'matrix': [[1,1,1],[1,1,1],[1,1,1]],
        'expected': 1
    },
    {
        'matrix': [[10]],
        'expected': 1
    },
    {
        'matrix': [[1,3],[7,5]],
        'expected': 4
    },
    {
        'matrix': [[1,2],[3,4]],
        'expected': 3
    },
    {
        'matrix': [[1,0],[0,1]],
        'expected': 2
    },
    {
        'matrix': [[1,2,3,4,5]],
        'expected': 5
    },
    {
        'matrix': [[1],[2],[3],[4],[5]],
        'expected': 5
    },
    {
        'matrix': [[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7]],
        'expected': 7
    },
    {
        'matrix': [[1,2,3],[8,9,4],[7,6,5]],
        'expected': 9
    }
]

obj = Solution()
for i in range(len(params)):
    matrix = params[i]['matrix']
    expected = params[i]['expected']
    gotOutput = obj.longestIncreasingPath(matrix)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: matrix = {matrix}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","const params = [
  {
      'matrix': [[9,9,4],[6,6,8],[2,1,1]],
      'expected': 4
  },
  {
      'matrix': [[3,4,5],[3,2,6],[2,2,1]],
      'expected': 4
  },
  {
      'matrix': [[1]],
      'expected': 1
  },
  {
      'matrix': [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]],
      'expected': 7
  },
  {
      'matrix': [[16,15,14,13],[12,11,10,9],[8,7,6,5],[4,3,2,1]],
      'expected': 7
  },
  {
      'matrix': [[1,2,3],[6,5,4],[7,8,9]],
      'expected': 9
  },
  {
      'matrix': [[1,1,1],[1,1,1],[1,1,1]],
      'expected': 1
  },
  {
      'matrix': [[10]],
      'expected': 1
  },
  {
      'matrix': [[1,3],[7,5]],
      'expected': 4
  },
  {
      'matrix': [[1,2],[3,4]],
      'expected': 3
  },
  {
      'matrix': [[1,0],[0,1]],
      'expected': 2
  },
  {
      'matrix': [[1,2,3,4,5]],
      'expected': 5
  },
  {
      'matrix': [[1],[2],[3],[4],[5]],
      'expected': 5
  },
  {
      'matrix': [[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7]],
      'expected': 7
  },
  {
      'matrix': [[1,2,3],[8,9,4],[7,6,5]],
      'expected': 9
  }
]

for (let i = 0; i < params.length; i++) {
  let matrix = params[i]['matrix'];
  let expected = params[i]['expected'];
  let gotOutput = longestIncreasingPath(matrix);
  if (expected !== gotOutput) {
      console.log(`\u274C Test ${i} failed: matrix = ${JSON.stringify(matrix)}, expected = ${expected}, but got ${gotOutput}`);
  } else {
      console.log(`\u2705 Test ${i} succeeded`);
  }
}",,
63b595498ad4593d6b7b020e,distinct-subsequences,"params = [
    {
        's': 'rabbbit',
        't': 'rabbit',
        'expected': 3
    },
    {
        's': 'babgbag',
        't': 'bag',
        'expected': 5
    },
    {
        's': 'aaaaa',
        't': 'a',
        'expected': 5
    },
    {
        's': 'abcd',
        't': 'abcd',
        'expected': 1
    },
    {
        's': 'abcd',
        't': 'abc',
        'expected': 1
    },
    {
        's': 'abcdabcd',
        't': 'abcd',
        'expected': 5
    },
    {
        's': 'abababab',
        't': 'abab',
        'expected': 15
    },
    {
        's': 'abababab',
        't': 'aaaa',
        'expected': 1
    },
    {
        's': 'abababab',
        't': 'bbbb',
        'expected': 1
    },
    {
        's': 'abcabcabc',
        't': 'abc',
        'expected': 10
    },
    {
        's': 'abcabcabc',
        't': 'aaa',
        'expected': 1
    },
    {
        's': 'abcabcabc',
        't': 'bbb',
        'expected': 1
    },
    {
        's': 'abcabcabc',
        't': 'ccc',
        'expected': 1
    },
    {
        's': 'abcabcabc',
        't': 'cba',
        'expected': 1
    },
    {
        's': 'abcabcabc',
        't': 'bac',
        'expected': 4
    }
]

obj = Solution()
for i in range(len(params)):
    s = params[i]['s']
    t = params[i]['t']
    expected = params[i]['expected']
    gotOutput = obj.numDistinct(s, t)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: s = {s}, t = {t}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","const params = [
  {
      's': 'rabbbit',
      't': 'rabbit',
      'expected': 3
  },
  {
      's': 'babgbag',
      't': 'bag',
      'expected': 5
  },
  {
      's': 'aaaaa',
      't': 'a',
      'expected': 5
  },
  {
      's': 'abcd',
      't': 'abcd',
      'expected': 1
  },
  {
      's': 'abcd',
      't': 'abc',
      'expected': 1
  },
  {
      's': 'abcdabcd',
      't': 'abcd',
      'expected': 5
  },
  {
      's': 'abababab',
      't': 'abab',
      'expected': 15
  },
  {
      's': 'abababab',
      't': 'aaaa',
      'expected': 1
  },
  {
      's': 'abababab',
      't': 'bbbb',
      'expected': 1
  },
  {
      's': 'abcabcabc',
      't': 'abc',
      'expected': 10
  },
  {
      's': 'abcabcabc',
      't': 'aaa',
      'expected': 1
  },
  {
      's': 'abcabcabc',
      't': 'bbb',
      'expected': 1
  },
  {
      's': 'abcabcabc',
      't': 'ccc',
      'expected': 1
  },
  {
      's': 'abcabcabc',
      't': 'cba',
      'expected': 1
  },
  {
      's': 'abcabcabc',
      't': 'bac',
      'expected': 4
  }
]

for (let i = 0; i < params.length; i++) {
  let s = params[i].s;
  let t = params[i].t;
  let expected = params[i].expected;
  let gotOutput = numDistinct(s, t);
  if(expected !== gotOutput) {
      console.log(`\u274C Test ${i} failed: s = ${s}, t = ${t}, expected = ${expected}, but got ${gotOutput}`);
  } else {
      console.log(`\u2705 Test ${i} succeeded`);
  }
}",,
63b5954a8ad4593d6b7b020f,edit-distance,"params = [
    {
        'word1': 'horse',
        'word2': 'ros',
        'expected': 3
    },
    {
        'word1': 'intention',
        'word2': 'execution',
        'expected': 5
    },
    {
        'word1': '',
        'word2': 'test',
        'expected': 4
    },
    {
        'word1': 'test',
        'word2': '',
        'expected': 4
    },
    {
        'word1': 'test',
        'word2': 'test',
        'expected': 0
    },
    {
        'word1': 'edit',
        'word2': 'distance',
        'expected': 6
    },
    {
        'word1': 'kitten',
        'word2': 'sitting',
        'expected': 3
    },
    {
        'word1': 'sunday',
        'word2': 'saturday',
        'expected': 3
    },
    {
        'word1': 'abcdef',
        'word2': 'azced',
        'expected': 3
    },
    {
        'word1': 'machine',
        'word2': 'mac',
        'expected': 4
    },
    {
        'word1': 'industry',
        'word2': 'interest',
        'expected': 6
    },
    {
        'word1': 'paper',
        'word2': 'writer',
        'expected': 4
    },
    {
        'word1': 'dwayne',
        'word2': 'duane',
        'expected': 2
    },
    {
        'word1': 'marina',
        'word2': 'marine',
        'expected': 1
    },
    {
        'word1': 'spelling',
        'word2': 'selling',
        'expected': 1
    }
]

obj = Solution()
for i in range(len(params)):
    word1 = params[i]['word1']
    word2 = params[i]['word2']
    expected = params[i]['expected']
    gotOutput = obj.minDistance(word1, word2)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: word1 = {word1}, word2 = {word2}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","const params = [
  {
      'word1': 'horse',
      'word2': 'ros',
      'expected': 3
  },
  {
      'word1': 'intention',
      'word2': 'execution',
      'expected': 5
  },
  {
      'word1': '',
      'word2': 'test',
      'expected': 4
  },
  {
      'word1': 'test',
      'word2': '',
      'expected': 4
  },
  {
      'word1': 'test',
      'word2': 'test',
      'expected': 0
  },
  {
      'word1': 'edit',
      'word2': 'distance',
      'expected': 6
  },
  {
      'word1': 'kitten',
      'word2': 'sitting',
      'expected': 3
  },
  {
      'word1': 'sunday',
      'word2': 'saturday',
      'expected': 3
  },
  {
      'word1': 'abcdef',
      'word2': 'azced',
      'expected': 3
  },
  {
      'word1': 'machine',
      'word2': 'mac',
      'expected': 4
  },
  {
      'word1': 'industry',
      'word2': 'interest',
      'expected': 6
  },
  {
      'word1': 'paper',
      'word2': 'writer',
      'expected': 4
  },
  {
      'word1': 'dwayne',
      'word2': 'duane',
      'expected': 2
  },
  {
      'word1': 'marina',
      'word2': 'marine',
      'expected': 1
  },
  {
      'word1': 'spelling',
      'word2': 'selling',
      'expected': 1
  }
]

for (let i = 0; i < params.length; i++) {
  let word1 = params[i]['word1'];
  let word2 = params[i]['word2'];
  let expected = params[i]['expected'];
  let gotOutput = minDistance(word1, word2);
  if (expected !== gotOutput) {
      console.log(`\u274C Test ${i} failed: word1 = ${word1}, word2 = ${word2}, expected = ${expected}, but got ${gotOutput}`);
  } else {
      console.log(`\u2705 Test ${i} succeeded`);
  }
}",,
63b5954b8ad4593d6b7b0210,burst-balloons,"params = [
    {
        'nums': [3,1,5,8],
        'expected': 167
    },
    {
        'nums': [1,5],
        'expected': 10
    },
    {
        'nums': [2,3,4],
        'expected': 36
    },
    {
        'nums': [4,3,2,1],
        'expected': 40
    },
    {
        'nums': [1,2,3,4,5],
        'expected': 110
    },
    {
        'nums': [9,76,64,21],
        'expected': 116718
    },
    {
        'nums': [1,1,1],
        'expected': 3
    },
    {
        'nums': [5,5,5,5,5],
        'expected': 405
    },
    {
        'nums': [3,1,5,8,1,1],
        'expected': 183
    },
    {
        'nums': [1,1,1,1,1,1,1,1,1,1],
        'expected': 10
    },
    {
        'nums': [1,1,1,1,1,1,1,1,1,2],
        'expected': 20
    },
    {
        'nums': [1,1,1,1,1,1,1,1,2,1],
        'expected': 20
    },
    {
        'nums': [2,2,2,2,2,2,2,2,2,2],
        'expected': 70
    },
    {
        'nums': [1,15,1],
        'expected': 45
    },
    {
        'nums': [35,16,83,87],
        'expected': 302347
    }
]
    
obj = Solution()
for i in range(len(params)):
    nums = params[i]['nums']
    expected = params[i]['expected']
    gotOutput = obj.maxCoins(nums)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: nums = {nums}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","const params = [
  {
      'nums': [3,1,5,8],
      'expected': 167
  },
  {
      'nums': [1,5],
      'expected': 10
  },
  {
      'nums': [2,3,4],
      'expected': 36
  },
  {
      'nums': [4,3,2,1],
      'expected': 40
  },
  {
      'nums': [1,2,3,4,5],
      'expected': 110
  },
  {
      'nums': [9,76,64,21],
      'expected': 116718
  },
  {
      'nums': [1,1,1],
      'expected': 3
  },
  {
      'nums': [5,5,5,5,5],
      'expected': 405
  },
  {
      'nums': [3,1,5,8,1,1],
      'expected': 183
  },
  {
      'nums': [1,1,1,1,1,1,1,1,1,1],
      'expected': 10
  },
  {
      'nums': [1,1,1,1,1,1,1,1,1,2],
      'expected': 20
  },
  {
      'nums': [1,1,1,1,1,1,1,1,2,1],
      'expected': 20
  },
  {
      'nums': [2,2,2,2,2,2,2,2,2,2],
      'expected': 70
  },
  {
      'nums': [1,15,1],
      'expected': 45
  },
  {
      'nums': [35,16,83,87],
      'expected': 302347
  }
]

for(let i = 0; i < params.length; i++){
  let nums = params[i]['nums'];
  let expected = params[i]['expected'];
  let gotOutput = maxCoins(nums);
  if(expected !== gotOutput){
      console.log(`\u274C Test ${i} failed: nums = ${nums}, expected = ${expected}, but got ${gotOutput}`);
  } else {
      console.log(`\u2705 Test ${i} succeeded`);
  }
}",,
63b5954b8ad4593d6b7b0211,regular-expression-matching,"params = [
    {
        's': ""aa"",
        'p': ""a"",
        'expected': False
    },
    {
        's': ""aa"",
        'p': ""a*"",
        'expected': True
    },
    {
        's': ""ab"",
        'p': "".*"",
        'expected': True
    },
    {
        's': ""aab"",
        'p': ""c*a*b"",
        'expected': True
    },
    {
        's': ""mississippi"",
        'p': ""mis*is*p*."",
        'expected': False
    },
    {
        's': """",
        'p': """",
        'expected': True
    },
    {
        's': ""a"",
        'p': ""a"",
        'expected': True
    },
    {
        's': ""abc"",
        'p': ""a.c"",
        'expected': True
    },
    {
        's': ""abcd"",
        'p': ""a.*d"",
        'expected': True
    },
    {
        's': ""aaa"",
        'p': ""a*a"",
        'expected': True
    },
    {
        's': ""abc"",
        'p': ""a.*c"",
        'expected': True
    },
    {
        's': ""aa"",
        'p': "".."",
        'expected': True
    },
    {
        's': ""aa"",
        'p': "".*"",
        'expected': True
    },
    {
        's': ""ab"",
        'p': "".*"",
        'expected': True
    },
    {
        's': ""aaa"",
        'p': ""a*a"",
        'expected': True
    }
]
    
obj = Solution()
for i in range(len(params)):
    s = params[i]['s']
    p = params[i]['p']
    expected = params[i]['expected']
    gotOutput = obj.isMatch(s, p)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: s = {s}, p = {p}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","const params = [
    {
        's': ""aa"",
        'p': ""a"",
        'expected': false
    },
    {
        's': ""aa"",
        'p': ""a*"",
        'expected': true
    },
    {
        's': ""ab"",
        'p': "".*"",
        'expected': true
    },
    {
        's': ""aab"",
        'p': ""c*a*b"",
        'expected': true
    },
    {
        's': ""mississippi"",
        'p': ""mis*is*p*."",
        'expected': false
    },
    {
        's': """",
        'p': """",
        'expected': true
    },
    {
        's': ""a"",
        'p': ""a"",
        'expected': true
    },
    {
        's': ""abc"",
        'p': ""a.c"",
        'expected': true
    },
    {
        's': ""abcd"",
        'p': ""a.*d"",
        'expected': true
    },
    {
        's': ""aaa"",
        'p': ""a*a"",
        'expected': true
    },
    {
        's': ""abc"",
        'p': ""a.*c"",
        'expected': true
    },
    {
        's': ""aa"",
        'p': "".."",
        'expected': true
    },
    {
        's': ""aa"",
        'p': "".*"",
        'expected': true
    },
    {
        's': ""ab"",
        'p': "".*"",
        'expected': true
    },
    {
        's': ""aaa"",
        'p': ""a*a"",
        'expected': true
    }
]

for(let i = 0; i < params.length; i++) {
    let s = params[i]['s'];
    let p = params[i]['p'];
    let expected = params[i]['expected'];
    let gotOutput = isMatch(s, p);
    if(expected !== gotOutput) {
        console.log(`\u274C Test ${i} failed: s = ${s}, p = ${p}, expected = ${expected}, but got ${gotOutput}`);
    } else {
        console.log(`\u2705 Test ${i} succeeded`);
    }
}",,
63b5954d8ad4593d6b7b0212,maximum-subarray,"params = [
    {
        'nums': [-2,1,-3,4,-1,2,1,-5,4],
        'expected': 6
    },
    {
        'nums': [1],
        'expected': 1
    },
    {
        'nums': [5,4,-1,7,8],
        'expected': 23
    },
    {
        'nums': [-1,-2,-3,-4,-5],
        'expected': -1
    },
    {
        'nums': [0,0,0,0,0],
        'expected': 0
    },
    {
        'nums': [2,-3,4,-1,2,1,5,-3],
        'expected': 11
    },
    {
        'nums': [-2, -3, 4, -1, -2, 1, 5, -3],
        'expected': 7
    },
    {
        'nums': [1,2,3,4,5],
        'expected': 15
    },
    {
        'nums': [-1,0,-2],
        'expected': 0
    },
    {
        'nums': [3, -2, 5, -1],
        'expected': 6
    },
    {
        'nums': [3, -1, -1, -1, -1, -1, 2],
        'expected': 3
    },
    {
        'nums': [10, -3, -2, 7, -10, 15, -5],
        'expected': 17
    },
    {
        'nums': [-2, 1, -3, 5, 0, 3, 2, -5, 4],
        'expected': 10
    },
    {
        'nums': [-2, -5, 6, -2, -3, 1, 5, -6],
        'expected': 7
    },
    {
        'nums': [1, -2, 3, 10, -4, 7, 2, -5],
        'expected': 18
    }
]

obj = Solution()
for i in range(len(params)):
    nums = params[i]['nums']
    expected = params[i]['expected']
    gotOutput = obj.maxSubArray(nums)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: nums = {nums}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","const params = [
    {
        'nums': [-2,1,-3,4,-1,2,1,-5,4],
        'expected': 6
    },
    {
        'nums': [1],
        'expected': 1
    },
    {
        'nums': [5,4,-1,7,8],
        'expected': 23
    },
    {
        'nums': [-1,-2,-3,-4,-5],
        'expected': -1
    },
    {
        'nums': [0,0,0,0,0],
        'expected': 0
    },
    {
        'nums': [2,-3,4,-1,2,1,5,-3],
        'expected': 11
    },
    {
        'nums': [-2, -3, 4, -1, -2, 1, 5, -3],
        'expected': 7
    },
    {
        'nums': [1,2,3,4,5],
        'expected': 15
    },
    {
        'nums': [-1,0,-2],
        'expected': 0
    },
    {
        'nums': [3, -2, 5, -1],
        'expected': 6
    },
    {
        'nums': [3, -1, -1, -1, -1, -1, 2],
        'expected': 3
    },
    {
        'nums': [10, -3, -2, 7, -10, 15, -5],
        'expected': 17
    },
    {
        'nums': [-2, 1, -3, 5, 0, 3, 2, -5, 4],
        'expected': 10
    },
    {
        'nums': [-2, -5, 6, -2, -3, 1, 5, -6],
        'expected': 7
    },
    {
        'nums': [1, -2, 3, 10, -4, 7, 2, -5],
        'expected': 18
    }
]

for (let i = 0; i < params.length; i++) {
    let nums = params[i].nums;
    let expected = params[i].expected;
    let gotOutput = maxSubArray(nums);
    if(expected !== gotOutput) {
        console.log(`\u274C Test ${i} failed: nums = ${nums}, expected = ${expected}, but got ${gotOutput}`);
    } else {
        console.log(`\u2705 Test ${i} succeeded`);
    }
}",,
63b5954e8ad4593d6b7b0213,jump-game,,,,
63b5954f8ad4593d6b7b0214,jump-game-ii,,,,
63b595508ad4593d6b7b0215,gas-station,,,,
63b595518ad4593d6b7b0216,hand-of-straights,,,,
63b595518ad4593d6b7b0217,merge-triplets-to-form-target-triplet,,,,
63b595538ad4593d6b7b0218,partition-labels,,,,
63b598438ad4593d6b7b0219,diameter-of-binary-tree,"params = [
    {
    ""input"": [1,2,3,4,5],
    ""output"": 3
    },
    {
    ""input"": [1,2],
    ""output"": 1
    },
    {
    ""input"": [1],
    ""output"": 0
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
    ""output"": 5
    },
    {
    ""input"": [1, None, 2],
    ""output"": 1
    },
    {
    ""input"": [1, 2, None],
    ""output"": 1
    },
    {
    ""input"": [1, None, 2, None, 3],
    ""output"": 2
    },
    {
    ""input"": [1, 2, None, 3, None, 4],
    ""output"": 3
    },
    {
    ""input"": [1, None, 2, 3, None, None, 4],
    ""output"": 3
    },
    {
    ""input"": [1, 2, 3, None, None, None, 4, None, None, None, None, None, None, 5],
    ""output"": 3
    }
]

def create_tree(lst):
    if not lst:
        return None
    root = TreeNode(lst[0])
    queue = [root]
    i = 1
    while queue and i < len(lst):
        node = queue.pop(0)
        if i < len(lst) and lst[i] is not None:
            node.left = TreeNode(lst[i])
            queue.append(node.left)
        i += 1
        if i < len(lst) and lst[i] is not None:
            node.right = TreeNode(lst[i])
            queue.append(node.right)
        i += 1
    return root

obj = Solution()

for param in params:
    input_list = param[""input""]
    expected_output = param[""output""]
    root = create_tree(input_list)
    output = obj.diameterOfBinaryTree(root)
    if output == expected_output:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input List: {input_list} Expected output: {expected_output}, but got {output}"")","let params = [    
    {    
    ""input"": [1,2,3,4,5],
    ""output"": 3
    },
    {
    ""input"": [1,2],
    ""output"": 1
    },
    {
    ""input"": [1],
    ""output"": 0
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
    ""output"": 5
    },
    {
    ""input"": [1, null, 2],
    ""output"": 1
    },
    {
    ""input"": [1, 2, null],
    ""output"": 1
    },
    {
    ""input"": [1, null, 2, null, 3],
    ""output"": 2
    },
    {
    ""input"": [1, 2, null, 3, null, 4],
    ""output"": 3
    },
    {
    ""input"": [1, null, 2, 3, null, null, 4],
    ""output"": 3
    },
    {
    ""input"": [1, 2, 3, null, null, null, 4, null, null, null, null, null, null, 5],
    ""output"": 3
    }
]

function create_tree(lst) {
    if (!lst || lst.length === 0) {
        return null;
    }
    let root = new TreeNode(lst[0]);
    let queue = [root];
    let i = 1;
    while (queue.length > 0 && i < lst.length) {
        let node = queue.shift();
        if (i < lst.length && lst[i] !== null) {
            node.left = new TreeNode(lst[i]);
            queue.push(node.left);
        }
        i += 1;
        if (i < lst.length && lst[i] !== null) {
            node.right = new TreeNode(lst[i]);
            queue.push(node.right);
        }
        i += 1;
    }
    return root;
}

for (let i = 0; i < params.length; i++) {
    let param = params[i];
    let input_list = param[""input""];
    let expected_output = param[""output""];
    let root = create_tree(input_list);
    let output = diameterOfBinaryTree(root);
    if (output === expected_output) {
        console.log(""\u2705 Test passed."")
    } else {
        console.log(`\u274C Test failed. Input List: ${input_list} Expected output: ${expected_output}, but got ${output}`);
    }
}","class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right","function TreeNode(val, left, right) {
    this.val = (val===undefined ? 0 : val)
    this.left = (left===undefined ? null : left)
    this.right = (right===undefined ? null : right)
}"
63b598448ad4593d6b7b021a,balanced-binary-tree,"params = [
    {
    ""input"": [3,9,20,None,None,15,7],
    ""output"": True
    },
    {
    ""input"": [1,2,2,3,3,None,None,4,4],
    ""output"": False
    },
    {
    ""input"": [],
    ""output"": True
    },
    {
    ""input"": [1],
    ""output"": True
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
    ""output"": True
    },
    {
    ""input"": [1, None, 2],
    ""output"": True
    },
    {
    ""input"": [1, 2, None],
    ""output"": True
    },
    {
    ""input"": [1, None, 2, None, 3],
    ""output"": False
    },
    {
    ""input"": [1, 2, None, 3, None, 4],
    ""output"": False
    },
    {
    ""input"": [1, None, 2, 3, None, None, 4],
    ""output"": False
    }
]


def create_tree(lst):
    if not lst:
        return None
    root = TreeNode(lst[0])
    queue = [root]
    i = 1
    while queue and i < len(lst):
        node = queue.pop(0)
        if i < len(lst) and lst[i] is not None:
            node.left = TreeNode(lst[i])
            queue.append(node.left)
        i += 1
        if i < len(lst) and lst[i] is not None:
            node.right = TreeNode(lst[i])
            queue.append(node.right)
        i += 1
    return root

obj = Solution()

for param in params:
    input_list = param[""input""]
    expected_output = param[""output""]
    root = create_tree(input_list)
    output = obj.isBalanced(root)
    if output == expected_output:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input List: {input_list} Expected output: {expected_output}, but got {output}"")","const params = [
    {
    ""input"": [3,9,20,null,null,15,7],
    ""output"": true
    },
    {
    ""input"": [1,2,2,3,3,null,null,4,4],
    ""output"": false
    },
    {
    ""input"": [],
    ""output"": true
    },
    {
    ""input"": [1],
    ""output"": true
    },
    {
    ""input"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
    ""output"": true
    },
    {
    ""input"": [1, null, 2],
    ""output"": true
    },
    {
    ""input"": [1, 2, null],
    ""output"": true
    },
    {
    ""input"": [1, null, 2, null, 3],
    ""output"": false
    },
    {
    ""input"": [1, 2, null, 3, null, 4],
    ""output"": false
    },
    {
    ""input"": [1, null, 2, 3, null, null, 4],
    ""output"": false
    }
]


function create_tree(lst) {
    if (!lst || lst.length === 0) {
        return null;
    }
    let root = new TreeNode(lst[0]);
    let queue = [root];
    let i = 1;
    while (queue.length > 0 && i < lst.length) {
        let node = queue.shift();
        if (i < lst.length && lst[i] !== null) {
            node.left = new TreeNode(lst[i]);
            queue.push(node.left);
        }
        i += 1;
        if (i < lst.length && lst[i] !== null) {
            node.right = new TreeNode(lst[i]);
            queue.push(node.right);
        }
        i += 1;
    }
    return root;
}

for (let i = 0; i < params.length; i++) {
    let param = params[i];
    let input_list = param[""input""];
    let expected_output = param[""output""];
    let root = create_tree(input_list);
    let output = isBalanced(root);
    if (output === expected_output) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. Input List: ${input_list}  Expected output: ${expected_output}, but got ${output}`);
    }
}","class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right","function TreeNode(val, left, right) {
    this.val = (val===undefined ? 0 : val)
    this.left = (left===undefined ? null : left)
    this.right = (right===undefined ? null : right)
}"
63b598458ad4593d6b7b021b,same-tree,"params = [
    {
    ""input"": [[1,2,3], [1,2,3]],
    ""output"": True
    },
    {
    ""input"": [[1,2], [1,None,2]],
    ""output"": False
    },
    {
    ""input"": [[1,2,1], [1,1,2]],
    ""output"": False
    },
    {
    ""input"": [[], []],
    ""output"": True
    },
    {
    ""input"": [[1], [1]],
    ""output"": True
    },
    {
    ""input"": [[1,2,3], [1,2,3,4]],
    ""output"": False
    },
    {
    ""input"": [[1,2,3], [1,2]],
    ""output"": False
    },
    {
    ""input"": [[1,2,3,4,5], [1,2,3]],
    ""output"": False
    },
    {
    ""input"": [[1,2,3,4,5], [1,2,3,4,5]],
    ""output"": True
    },
    {
    ""input"": [[1,2,3,4,5], [5,4,3,2,1]],
    ""output"": False
    }
]

def create_tree(lst):
    if not lst:
        return None
    root = TreeNode(lst[0])
    queue = [root]
    i = 1
    while queue and i < len(lst):
        node = queue.pop(0)
        if i < len(lst) and lst[i] is not None:
            node.left = TreeNode(lst[i])
            queue.append(node.left)
        i += 1
        if i < len(lst) and lst[i] is not None:
            node.right = TreeNode(lst[i])
            queue.append(node.right)
        i += 1
    return root

obj = Solution()

for param in params:
    p = create_tree(param[""input""][0])
    q = create_tree(param[""input""][1])
    expected_output = param[""output""]
    output = obj.isSameTree(p, q)
    if output == expected_output:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. p: {param['input'][0]} q: {param['input'][1]} Expected output: {expected_output}, but got {output}"")","let params = [
    {
    ""input"": [[1,2,3], [1,2,3]],
    ""output"": true
    },
    {
    ""input"": [[1,2], [1,null,2]],
    ""output"": false
    },
    {
    ""input"": [[1,2,1], [1,1,2]],
    ""output"": false
    },
    {
    ""input"": [[], []],
    ""output"": true
    },
    {
    ""input"": [[1], [1]],
    ""output"": true
    },
    {
    ""input"": [[1,2,3], [1,2,3,4]],
    ""output"": false
    },
    {
    ""input"": [[1,2,3], [1,2]],
    ""output"": false
    },
    {
    ""input"": [[1,2,3,4,5], [1,2,3]],
    ""output"": false
    },
    {
    ""input"": [[1,2,3,4,5], [1,2,3,4,5]],
    ""output"": true
    },
    {
    ""input"": [[1,2,3,4,5], [5,4,3,2,1]],
    ""output"": false
    }
]

function create_tree(lst) {
    if (!lst || lst.length === 0) {
        return null;
    }
    let root = new TreeNode(lst[0]);
    let queue = [root];
    let i = 1;
    while (queue.length > 0 && i < lst.length) {
        let node = queue.shift();
        if (i < lst.length && lst[i] !== null) {
            node.left = new TreeNode(lst[i]);
            queue.push(node.left);
        }
        i += 1;
        if (i < lst.length && lst[i] !== null) {
            node.right = new TreeNode(lst[i]);
            queue.push(node.right);
        }
        i += 1;
    }
    return root;
}

for (let param of params) {
    let p = create_tree(param[""input""][0]);
    let q = create_tree(param[""input""][1]);
    let expected_output = param[""output""];
    let output = isSameTree(p, q);
    if (output === expected_output) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. p: ${param[""input""][0]} q: ${param[""input""][1]} Expected output: ${expected_output}, but got ${output}`);
    }
}","class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None","function TreeNode(val, left, right) {
    this.val = (val===undefined ? 0 : val)
    this.left = (left===undefined ? null : left)
    this.right = (right===undefined ? null : right)
}"
63b598458ad4593d6b7b021c,subtree-of-another-tree,"params = [
    {
    ""input"": ([3,4,5,1,2], [4,1,2]),
    ""output"": True
    },
    {
    ""input"": ([3,4,5,1,2,None,None,None,None,0], [4,1,2]),
    ""output"": False
    },
    {
    ""input"": ([1,2,3,4,5], [1,2,3]),
    ""output"": False
    },
    {
    ""input"": ([1,2,3,4,5], [5,4,3]),
    ""output"": False
    },
    {
    ""input"": ([1], [2]),
    ""output"": False
    },
    {
    ""input"": ([1,2,3,4,5], [4,5]),
    ""output"": False
    },
    {
    ""input"": ([1,2,3,4,5], [4,5,6]),
    ""output"": False
    },
    {
    ""input"": ([1,2,3,4,5,6,7], [1,2,3]),
    ""output"": False
    },
    {
    ""input"": ([1,2,3,4,5,6,7], [5,6,7]),
    ""output"": False
    },
    {
    ""input"": ([1,2,3,4,5,6,7], [8]),
    ""output"": False
    }
]

def create_tree(lst):
    if not lst:
        return None
    root = TreeNode(lst[0])
    queue = [root]
    i = 1
    while queue and i < len(lst):
        node = queue.pop(0)
        if i < len(lst) and lst[i] is not None:
            node.left = TreeNode(lst[i])
            queue.append(node.left)
        i += 1
        if i < len(lst) and lst[i] is not None:
            node.right = TreeNode(lst[i])
            queue.append(node.right)
        i += 1
    return root

obj = Solution()
for param in params:
    s = create_tree(param[""input""][0])
    t = create_tree(param[""input""][1])
    expected_output = param[""output""]
    output = obj.isSubtree(s, t)
    if output == expected_output:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. subRoot: {param['input'][1]} root: {param['input'][0]} Expected output: {expected_output}, but got {output}"")","const params = [
    {
    ""input"": [[3,4,5,1,2], [4,1,2]],
    ""output"": true
    },
    {
    ""input"": [[3,4,5,1,2,null,null,null,null,0], [4,1,2]],
    ""output"": false
    },
    {
    ""input"": [[1,2,3,4,5], [1,2,3]],
    ""output"": false
    },
    {
    ""input"": [[1,2,3,4,5], [5,4,3]],
    ""output"": false
    },
    {
    ""input"": [[1], [2]],
    ""output"": false
    },
    {
    ""input"": [[1,2,3,4,5], [4,5]],
    ""output"": false
    },
    {
    ""input"": [[1,2,3,4,5], [4,5,6]],
    ""output"": false
    },
    {
    ""input"": [[1,2,3,4,5,6,7], [1,2,3]],
    ""output"": false
    },
    {
    ""input"": [[1,2,3,4,5,6,7], [5,6,7]],
    ""output"": false
    },
    {
    ""input"": [[1,2,3,4,5,6,7], [8]],
    ""output"": false
    }
]

function create_tree(lst) {
    if (!lst || lst.length === 0) {
        return null;
    }
    let root = new TreeNode(lst[0]);
    let queue = [root];
    let i = 1;
    while (queue.length > 0 && i < lst.length) {
        let node = queue.shift();
        if (i < lst.length && lst[i] !== null) {
            node.left = new TreeNode(lst[i]);
            queue.push(node.left);
        }
        i += 1;
        if (i < lst.length && lst[i] !== null) {
            node.right = new TreeNode(lst[i]);
            queue.push(node.right);
        }
        i += 1;
    }
    return root;
}

for (let param of params) {
    let s = create_tree(param[""input""][0]);
    let t = create_tree(param[""input""][1]);
    let expected_output = param[""output""];
    let output = isSubtree(s, t);
    if (output === expected_output) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. subRoot: ${param['input'][1]} root: ${param['input'][0]} Expected output: ${expected_output}, but got ${output}`);
    }
}","class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right","function TreeNode(val, left, right) {
    this.val = (val===undefined ? 0 : val)
    this.left = (left===undefined ? null : left)
    this.right = (right===undefined ? null : right)
}"
63b598468ad4593d6b7b021d,lowest-common-ancestor-of-a-binary-search-tree,"params = [
    {
    ""input"": ([6,2,8,0,4,7,9,None,None,3,5], 2, 8),
    ""output"": 6
    },
    {
    ""input"": ([6,2,8,0,4,7,9,None,None,3,5], 2, 4),
    ""output"": 2
    },
    {
    ""input"": ([2,1], 2, 1),
    ""output"": 2
    },
    {
    ""input"": ([6,2,8,0,4,7,9,None,None,3,5], 3, 5),
    ""output"": 4
    },
    {
    ""input"": ([6,2,8,0,4,7,9,None,None,3,5], 6, 8),
    ""output"": 6
    },
    {
    ""input"": ([6,2,8,0,4,7,9,None,None,3,5], 0, 4),
    ""output"": 2
    },
    {
    ""input"": ([6,2,8,0,4,7,9,None,None,3,5], 4, 9),
    ""output"": 6
    },
    {
    ""input"": ([6,2,8,0,4,7,9,None,None,3,5], 0, 9),
    ""output"": 6
    },
    {
    ""input"": ([15,10,20,8,12,16,25], 8, 12),
    ""output"": 10
    },
    {
    ""input"": ([10,5,15,3,7,13,18,1,4,6], 4, 6),
    ""output"": 5
    },
    {
    ""input"": ([25,20,30,18,22,28,35], 18, 35),
    ""output"": 25
    },
    {
    ""input"": ([5,3,7,1,4,6,9], 1, 9),
    ""output"": 5
    },
    {
    ""input"": ([50,40,60,30,45,55,70], 30, 70),
    ""output"": 50
    },
    {
    ""input"": ([100,50,150,25,75,125,175], 25, 175),
    ""output"": 100
    },
    {
    ""input"": ([200,150,250,125,175,225,275], 125, 275),
    ""output"": 200
    },
    {
    ""input"": ([300,250,350,200,325,375,400], 325, 400),
    ""output"": 350
    },
    {
    ""input"": ([500,450,550,400,525,575,600], 400, 600),
    ""output"": 500
    },
    {
    ""input"": ([1000,900,1100,800,950,1050,1200], 800, 1200),
    ""output"": 1000
    }
]

def create_tree(lst):
    if not lst:
        return None
    root = TreeNode(lst[0])
    queue = [root]
    i = 1
    while queue and i < len(lst):
        node = queue.pop(0)
        if i < len(lst) and lst[i] is not None:
            node.left = TreeNode(lst[i])
            queue.append(node.left)
        i += 1
        if i < len(lst) and lst[i] is not None:
            node.right = TreeNode(lst[i])
            queue.append(node.right)
        i += 1
    return root


obj = Solution()

for param in params:
    root = create_tree(param[""input""][0])
    p = TreeNode(param[""input""][1])
    q = TreeNode(param[""input""][2])
    expected_output = param[""output""]
    output = obj.lowestCommonAncestor(root, p, q)
    if output.val == expected_output:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. p: {param['input'][1]} q: {param['input'][2]} Expected output: {expected_output}, but got {output.val}"")","let params = [
    {
    ""input"": [[6,2,8,0,4,7,9,null,null,3,5], 2, 8],
    ""output"": 6
    },
    {
    ""input"": [[6,2,8,0,4,7,9,null,null,3,5], 2, 4],
    ""output"": 2
    },
    {
    ""input"": [[2,1], 2, 1],
    ""output"": 2
    },
    {
    ""input"": [[6,2,8,0,4,7,9,null,null,3,5], 3, 5],
    ""output"": 4
    },
    {
    ""input"": [[6,2,8,0,4,7,9,null,null,3,5], 6, 8],
    ""output"": 6
    },
    {
    ""input"": [[6,2,8,0,4,7,9,null,null,3,5], 0, 4],
    ""output"": 2
    },
    {
    ""input"": [[6,2,8,0,4,7,9,null,null,3,5], 4, 9],
    ""output"": 6
    },
    {
    ""input"": [[6,2,8,0,4,7,9,null,null,3,5], 0, 9],
    ""output"": 6
    },
    {
    ""input"": [[15,10,20,8,12,16,25], 8, 12],
    ""output"": 10
    },
    {
    ""input"": [[10,5,15,3,7,13,18,1,4,6], 4, 6],
    ""output"": 5
    },
    {
    ""input"": [[25,20,30,18,22,28,35], 18, 35],
    ""output"": 25
    },
    {
    ""input"": [[5,3,7,1,4,6,9], 1, 9],
    ""output"": 5
    },
    {
    ""input"": [[50,40,60,30,45,55,70], 30, 70],
    ""output"": 50
    },
    {
    ""input"": [[100,50,150,25,75,125,175], 25, 175],
    ""output"": 100
    },
    {
    ""input"": [[200,150,250,125,175,225,275], 125, 275],
    ""output"": 200
    },
    {
    ""input"": [[300,250,350,200,325,375,400], 325, 400],
    ""output"": 350
    },
    {
    ""input"": [[500,450,550,400,525,575,600], 400, 600],
    ""output"": 500
    },
    {
    ""input"": [[1000,900,1100,800,950,1050,1200], 800, 1200],
    ""output"": 1000
    }
]


function create_tree(lst) {
    if (!lst || lst.length === 0) {
        return null;
    }
    let root = new TreeNode(lst[0]);
    let queue = [root];
    let i = 1;
    while (queue.length > 0 && i < lst.length) {
        let node = queue.shift();
        if (i < lst.length && lst[i] !== null) {
            node.left = new TreeNode(lst[i]);
            queue.push(node.left);
        }
        i += 1;
        if (i < lst.length && lst[i] !== null) {
            node.right = new TreeNode(lst[i]);
            queue.push(node.right);
        }
        i += 1;
    }
    return root;
}


for (let i = 0; i < params.length; i++) {
    let root = create_tree(params[i][""input""][0]);
    let p = new TreeNode(params[i][""input""][1]);
    let q = new TreeNode(params[i][""input""][2]);
    let expected_output = params[i][""output""];
    let output = lowestCommonAncestor(root, p, q);
    if (output.val === expected_output) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. p: ${params[i]['input'][1]} q: ${params[i]['input'][2]} Expected output: ${expected_output}, but got ${output.val}`);
    }
}","class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None","function TreeNode(val) {
    this.val = val;
    this.left = this.right = null;
}"
63b598478ad4593d6b7b021e,binary-tree-level-order-traversal,"params = [
    {
    ""input"": [3,9,20,None,None,15,7],
    ""output"": [[3],[9,20],[15,7]]
    },
    {
    ""input"": [1],
    ""output"": [[1]]
    },
    {
    ""input"": [],
    ""output"": []
    },
    {
    ""input"": [1,2,3,4,5,6,7],
    ""output"": [[1],[2,3],[4,5,6,7]]
    },
    {
    ""input"": [1,2,3,4,5],
    ""output"": [[1],[2,3],[4,5]]
    },
    {
    ""input"": [1,2,3,4],
    ""output"": [[1],[2,3],[4]]
    },
    {
    ""input"": [1,2,3],
    ""output"": [[1],[2,3]]
    },
    {
    ""input"": [1,2],
    ""output"": [[1],[2]]
    },
    {
    ""input"": [1,2,3,4,5,6,7,8,9,10],
    ""output"": [[1],[2,3],[4,5,6,7],[8,9,10]]
    },
    {
    ""input"": [1,None,2,3,4,5],
    ""output"": [[1], [2], [3, 4], [5]]
    },
    {
    ""input"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],
    ""output"": [[1], [2, 3], [4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15], [16]]
    },
    {
    ""input"": [1,2,3,4,5,None,None,None,6],
    ""output"": [[1], [2, 3], [4, 5], [6]]
    },
    {
    ""input"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,None,None,None,None,None],
    ""output"": [[1],[2,3],[4,5,6,7],[8,9,10,11,12,13,14,15]]
    },
    {
    ""input"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],
    ""output"": [[1], [2, 3], [4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21, 22, 23]]
    },
    {
    ""input"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],
    ""output"": [[1], [2, 3], [4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25]]
    }
]

def create_tree(lst):
    if not lst:
        return None
    root = TreeNode(lst[0])
    queue = [root]
    i = 1
    while queue and i < len(lst):
        node = queue.pop(0)
        if i < len(lst) and lst[i] is not None:
            node.left = TreeNode(lst[i])
            queue.append(node.left)
        i += 1
        if i < len(lst) and lst[i] is not None:
            node.right = TreeNode(lst[i])
            queue.append(node.right)
        i += 1
    return root

obj = Solution()

for param in params:
    root = create_tree(param[""input""])
    expected_output = param[""output""]
    output = obj.levelOrder(root)
    if output == expected_output:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input: {param['input']} Expected output: {expected_output}, but got {output}"")","let params = [
    {
    ""input"": [3,9,20,null,null,15,7],
    ""output"": [[3],[9,20],[15,7]]
    },
    {
    ""input"": [1],
    ""output"": [[1]]
    },
    {
    ""input"": [],
    ""output"": []
    },
    {
    ""input"": [1,2,3,4,5,6,7],
    ""output"": [[1],[2,3],[4,5,6,7]]
    },
    {
    ""input"": [1,2,3,4,5],
    ""output"": [[1],[2,3],[4,5]]
    },
    {
    ""input"": [1,2,3,4],
    ""output"": [[1],[2,3],[4]]
    },
    {
    ""input"": [1,2,3],
    ""output"": [[1],[2,3]]
    },
    {
    ""input"": [1,2],
    ""output"": [[1],[2]]
    },
    {
    ""input"": [1,2,3,4,5,6,7,8,9,10],
    ""output"": [[1],[2,3],[4,5,6,7],[8,9,10]]
    },
    {
    ""input"": [1,null,2,3,4,5],
    ""output"": [[1], [2], [3, 4], [5]]
    },
    {
    ""input"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],
    ""output"": [[1], [2, 3], [4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15], [16]]
    },
    {
    ""input"": [1,2,3,4,5,null,null,null,6],
    ""output"": [[1], [2, 3], [4, 5], [6]]
    },
    {
    ""input"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,null,null,null],
    ""output"": [[1],[2,3],[4,5,6,7],[8,9,10,11,12,13,14,15]]
    },
    {
    ""input"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],
    ""output"": [[1], [2, 3], [4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21, 22, 23]]
    },
    {
    ""input"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],
    ""output"": [[1], [2, 3], [4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25]]
    }
]

function create_tree(lst) {
    if (!lst || lst.length === 0) {
        return null;
    }
    let root = new TreeNode(lst[0]);
    let queue = [root];
    let i = 1;
    while (queue.length > 0 && i < lst.length) {
        let node = queue.shift();
        if (i < lst.length && lst[i] !== null) {
            node.left = new TreeNode(lst[i]);
            queue.push(node.left);
        }
        i += 1;
        if (i < lst.length && lst[i] !== null) {
            node.right = new TreeNode(lst[i]);
            queue.push(node.right);
        }
        i += 1;
    }
    return root;
}

for (let i = 0; i < params.length; i++) {
    let root = create_tree(params[i][""input""]);
    let expected_output = params[i][""output""];
    let output = levelOrder(root);
    if (output.toString() === expected_output.toString()) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. Input: [${params[i][""input""]}] Expected output: [${expected_output}], but got [${output}]`);
    }
}","class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None","function TreeNode(val, left, right) {
    this.val = (val===undefined ? 0 : val)
    this.left = (left===undefined ? null : left)
    this.right = (right===undefined ? null : right)
}"
63b598488ad4593d6b7b021f,binary-tree-right-side-view,"params = [    
    {        
        ""input"": [1, 2, 3, None, 5, None, 4],
        ""output"": [1, 3, 4]
    },
    {
        ""input"": [1, None, 3],
        ""output"": [1, 3]
    },
    {
        ""input"": [],
        ""output"": []
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6],
        ""output"": [1, 3, 6]
    },
    {
        ""input"": [1, 2, 3, 4, 5],
        ""output"": [1, 3, 5]
    },
    {
        ""input"": [1, 2, 3, 4],
        ""output"": [1, 3, 4]
    },
    {
        ""input"": [1, 2, 3],
        ""output"": [1, 3]
    },
    {
        ""input"": [1, 2],
        ""output"": [1, 2]
    },
    {
        ""input"": [1],
        ""output"": [1]
    },
    {
        ""input"": [1, 2, 3, None, None, 4, 5, 6],
        ""output"": [1, 3, 5, 6]
    },
    {        
        ""input"": [1, 2, 3, None, None, 4, None, None, None, 5, 6],
        ""output"": [1, 3, 4]
    },
    {
        ""input"": [1, 2, 3, None, None, 4, None, None, None, 5, 6, 7, 8],
        ""output"": [1, 3, 4]
    },
    {
        ""input"": [1, 2, 3, None, None, 4, None, None, None, 5, 6, None, None, None, 7],
        ""output"": [1, 3, 4]
    },
    {
        ""input"": [1, None, 2, 3, None, 4, 5, None, None, None, None, 6],
        ""output"": [1, 2, 3, 5]
    },
    {
        ""input"": [1, 2, 3, None, None, None, None, 4, 5, 6, None, None, None, None, 7],
        ""output"": [1, 3]
    },
    {
        ""input"": [1, 2, 3, None, None, 4, None, None, None, 5, None, None, None, None, 6],
        ""output"": [1, 3, 4]
    },
    {
        ""input"": [1, 2, 3, None, None, None, None, 4, None, None, None, None, None, None, 5],
        ""output"": [1, 3]
    },
    {
        ""input"": [1, 2, 3, None, None, None, None, 4, None, None, None, None, None, None, 5, 6, 7],
        ""output"": [1, 3]
    },
    {
        ""input"": [1, 2, 3, None, None, None, None, 4, None, None, None, None, None, None, 5, None, None, None, None, None, None, 6],
        ""output"": [1, 3]
    },
    {
        ""input"": [1, 2, 3, None, None, None, None, 4, None, None, None, None, None, None, 5, None, None, None, None, None, None, 6, 7, 8],
        ""output"": [1, 3]
    }
]

def create_tree(lst):
    if not lst:
        return None
    root = TreeNode(lst[0])
    queue = [root]
    i = 1
    while queue and i < len(lst):
        node = queue.pop(0)
        if i < len(lst) and lst[i] is not None:
            node.left = TreeNode(lst[i])
            queue.append(node.left)
        i += 1
        if i < len(lst) and lst[i] is not None:
            node.right = TreeNode(lst[i])
            queue.append(node.right)
        i += 1
    return root

obj = Solution()

for param in params:
    root = create_tree(param[""input""])
    expected_output = param[""output""]
    output = obj.rightSideView(root)
    if output == expected_output:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input: {param['input']} Expected output: {expected_output}, but got {output}"")","let params = [    
    {        
        ""input"": [1, 2, 3, null, 5, null, 4],
        ""output"": [1, 3, 4]
    },
    {
        ""input"": [1, null, 3],
        ""output"": [1, 3]
    },
    {
        ""input"": [],
        ""output"": []
    },
    {
        ""input"": [1, 2, 3, 4, 5, 6],
        ""output"": [1, 3, 6]
    },
    {
        ""input"": [1, 2, 3, 4, 5],
        ""output"": [1, 3, 5]
    },
    {
        ""input"": [1, 2, 3, 4],
        ""output"": [1, 3, 4]
    },
    {
        ""input"": [1, 2, 3],
        ""output"": [1, 3]
    },
    {
        ""input"": [1, 2],
        ""output"": [1, 2]
    },
    {
        ""input"": [1],
        ""output"": [1]
    },
    {
        ""input"": [1, 2, 3, null, null, 4, 5, 6],
        ""output"": [1, 3, 5, 6]
    },
    {        
        ""input"": [1, 2, 3, null, null, 4, null, null, null, 5, 6],
        ""output"": [1, 3, 4]
    },
    {
        ""input"": [1, 2, 3, null, null, 4, null, null, null, 5, 6, 7, 8],
        ""output"": [1, 3, 4]
    },
    {
        ""input"": [1, 2, 3, null, null, 4, null, null, null, 5, 6, null, null, null, 7],
        ""output"": [1, 3, 4]
    },
    {
        ""input"": [1, null, 2, 3, null, 4, 5, null, null, null, null, 6],
        ""output"": [1, 2, 3, 5]
    },
    {
        ""input"": [1, 2, 3, null, null, null, null, 4, 5, 6, null, null, null, null, 7],
        ""output"": [1, 3]
    },
    {
        ""input"": [1, 2, 3, null, null, 4, null, null, null, 5, null, null, null, null, 6],
        ""output"": [1, 3, 4]
    },
    {
        ""input"": [1, 2, 3, null, null, null, null, 4, null, null, null, null, null, null, 5],
        ""output"": [1, 3]
    },
    {
        ""input"": [1, 2, 3, null, null, null, null, 4, null, null, null, null, null, null, 5, 6, 7],
        ""output"": [1, 3]
    },
    {
        ""input"": [1, 2, 3, null, null, null, null, 4, null, null, null, null, null, null, 5, null, null, null, null, null, null, 6],
        ""output"": [1, 3]
    },
    {
        ""input"": [1, 2, 3, null, null, null, null, 4, null, null, null, null, null, null, 5, null, null, null, null, null, null, 6, 7, 8],
        ""output"": [1, 3]
    }
]

function create_tree(lst) {
    if (!lst || lst.length === 0) {
        return null;
    }
    let root = new TreeNode(lst[0]);
    let queue = [root];
    let i = 1;
    while (queue.length > 0 && i < lst.length) {
        let node = queue.shift();
        if (i < lst.length && lst[i] !== null) {
            node.left = new TreeNode(lst[i]);
            queue.push(node.left);
        }
        i += 1;
        if (i < lst.length && lst[i] !== null) {
            node.right = new TreeNode(lst[i]);
            queue.push(node.right);
        }
        i += 1;
    }
    return root;
}

for (let i = 0; i < params.length; i++) {
    let input = params[i].input;
    let expectedOutput = params[i].output;
    let output = rightSideView(create_tree(input));
    if (output.toString() === expectedOutput.toString()) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. Input: ${input} Expected output: ${expectedOutput}, but got ${output}`);
    }
}","class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right","function TreeNode(val, left, right) {
    this.val = (val===undefined ? 0 : val)
    this.left = (left===undefined ? null : left)
    this.right = (right===undefined ? null : right)
}"
63b5984b8ad4593d6b7b0220,count-good-nodes-in-binary-tree,"params = [
    {
    ""input"": [3,1,4,3,None,1,5],
    ""output"": 4
    },
    {
    ""input"": [3,3,None,4,2],
    ""output"": 3
    },
    {
    ""input"": [1],
    ""output"": 1
    },
    {
    ""input"": [3,3,None,4,5],
    ""output"": 4
    },
    {
    ""input"": [3,2,None,1],
    ""output"": 1
    },
    {
    ""input"": [5,4,8,11,None,13,4,7,2,None,None,None,1],
    ""output"": 4
    },
    {
    ""input"": [5,1,5],
    ""output"": 2
    },
    {
    ""input"": [5,5,5],
    ""output"": 3
    },
    {
    ""input"": [10,5,15,1,8,None,7],
    ""output"": 2
    },
    {
    ""input"": [1,2,3,4,5,6,7,8,9,10],
    ""output"": 10
    },
    {
    ""input"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],
    ""output"": 15
    },
    {
    ""input"": [1,1,1,1,1,1,1,1],
    ""output"": 8
    },
    {
    ""input"": [1,1,1,1,1,1,1,0],
    ""output"": 7
    },
    {
    ""input"": [5,4,8,11,None,13,4,7,2,None,None,None,1,None,None,None,None,None,None,None,None,None,None,None,None,None,None,None,None,None],
    ""output"": 4
    },
    {
    ""input"": [1,None,2,3,4,5,6,7,8,9,10,11,12,13,14,15],
    ""output"": 15
    },
    {
    ""input"": [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    ""output"": 15
    },
    {
    ""input"": [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1],
    ""output"": 1
    },
    {
    ""input"": [15,1,14,2,13,3,12,4,11,5,10,6,9,7,8],
    ""output"": 1
    },
    {
    ""input"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],
    ""output"": 16
    },
    {
    ""input"": [5,4,8,11,None,13,4,7,2,None,None,None,1,None,None,None,None,None,None,None,None,None,None,None,None,None,None,None,None,None,None,None],
    ""output"": 4
    }
]

def create_tree(lst):
    if not lst:
        return None
    root = TreeNode(lst[0])
    queue = [root]
    i = 1
    while queue and i < len(lst):
        node = queue.pop(0)
        if i < len(lst) and lst[i] is not None:
            node.left = TreeNode(lst[i])
            queue.append(node.left)
        i += 1
        if i < len(lst) and lst[i] is not None:
            node.right = TreeNode(lst[i])
            queue.append(node.right)
        i += 1
    return root

obj = Solution()

for test in params:
    input_data = test['input']
    expected_output = test['output']
    output = obj.goodNodes(create_tree(input_data))
    if output == expected_output:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input: {input_data} Expected output: {expected_output}, but got {output}"")","let params = [
    {
    ""input"": [3,1,4,3,null,1,5],
    ""output"": 4
    },
    {
    ""input"": [3,3,null,4,2],
    ""output"": 3
    },
    {
    ""input"": [1],
    ""output"": 1
    },
    {
    ""input"": [3,3,null,4,5],
    ""output"": 4
    },
    {
    ""input"": [3,2,null,1],
    ""output"": 1
    },
    {
    ""input"": [5,4,8,11,null,13,4,7,2,null,null,null,1],
    ""output"": 4
    },
    {
    ""input"": [5,1,5],
    ""output"": 2
    },
    {
    ""input"": [5,5,5],
    ""output"": 3
    },
    {
    ""input"": [10,5,15,1,8,null,7],
    ""output"": 2
    },
    {
    ""input"": [1,2,3,4,5,6,7,8,9,10],
    ""output"": 10
    },
    {
    ""input"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],
    ""output"": 15
    },
    {
    ""input"": [1,1,1,1,1,1,1,1],
    ""output"": 8
    },
    {
    ""input"": [1,1,1,1,1,1,1,0],
    ""output"": 7
    },
    {
    ""input"": [5,4,8,11,null,13,4,7,2,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
    ""output"": 4
    },
    {
    ""input"": [1,null,2,3,4,5,6,7,8,9,10,11,12,13,14,15],
    ""output"": 15
    },
    {
    ""input"": [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    ""output"": 15
    },
    {
    ""input"": [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1],
    ""output"": 1
    },
    {
    ""input"": [15,1,14,2,13,3,12,4,11,5,10,6,9,7,8],
    ""output"": 1
    },
    {
    ""input"": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],
    ""output"": 16
    },
    {
    ""input"": [5,4,8,11,null,13,4,7,2,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
    ""output"": 4
    }
]

function create_tree(lst) {
    if (!lst || lst.length === 0) {
        return null;
    }
    let root = new TreeNode(lst[0]);
    let queue = [root];
    let i = 1;
    while (queue.length > 0 && i < lst.length) {
        let node = queue.shift();
        if (i < lst.length && lst[i] !== null) {
            node.left = new TreeNode(lst[i]);
            queue.push(node.left);
        }
        i += 1;
        if (i < lst.length && lst[i] !== null) {
            node.right = new TreeNode(lst[i]);
            queue.push(node.right);
        }
        i += 1;
    }
    return root;
}

for (var i = 0; i < params.length; i++) {
    var test = params[i];
    var input_data = test['input'];
    var expected_output = test['output'];
    var output = goodNodes(create_tree(input_data));
    if (output === expected_output) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(""\u274C Test failed. Input: "" + input_data + "" Expected output: "" + expected_output + "", but got "" + output);
    }
}","class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right","function TreeNode(val, left, right) {
    this.val = (val===undefined ? 0 : val)
    this.left = (left===undefined ? null : left)
    this.right = (right===undefined ? null : right)
}"
63b5984c8ad4593d6b7b0221,validate-binary-search-tree,"params = [
    {
    ""input"": [2,1,3],
    ""output"": True
    },
    {
    ""input"": [5,1,4,None,None,3,6],
    ""output"": False
    },
    {
    ""input"": [1,2,3,4,5],
    ""output"": False
    },
    {
    ""input"": [1,2,3,4,5,6],
    ""output"": False
    },
    {
    ""input"": [5,3,7,2,4,6,8],
    ""output"": True
    },
    {
    ""input"": [5,3,7,2,4,6,8,1],
    ""output"": True
    },
    {
    ""input"": [5,1,4,None,None,3,6,None,None,2,None,None,None],
    ""output"": False
    },
    {
    ""input"": [1,None,2,3,None,None,4,None,None,None],
    ""output"": False
    },
    {
    ""input"": [1,None,2,3,None,None,4,None,None,None,None,None,5],
    ""output"": False
    },
    {
    ""input"": [1,None,2,None,3],
    ""output"": True
    }
]

def create_tree(lst):
    if not lst:
        return None
    root = TreeNode(lst[0])
    queue = [root]
    i = 1
    while queue and i < len(lst):
        node = queue.pop(0)
        if i < len(lst) and lst[i] is not None:
            node.left = TreeNode(lst[i])
            queue.append(node.left)
        i += 1
        if i < len(lst) and lst[i] is not None:
            node.right = TreeNode(lst[i])
            queue.append(node.right)
        i += 1
    return root

obj = Solution()

for test in params:
    input_data = test['input']
    expected_output = test['output']
    output = obj.isValidBST(create_tree(input_data))
    if output == expected_output:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input: {input_data} Expected output: {expected_output}, but got {output}"")","let params = [
    {
    ""input"": [2,1,3],
    ""output"": true
    },
    {
    ""input"": [5,1,4,null,null,3,6],
    ""output"": false
    },
    {
    ""input"": [1,2,3,4,5],
    ""output"": false
    },
    {
    ""input"": [1,2,3,4,5,6],
    ""output"": false
    },
    {
    ""input"": [5,3,7,2,4,6,8],
    ""output"": true
    },
    {
    ""input"": [5,3,7,2,4,6,8,1],
    ""output"": true
    },
    {
    ""input"": [5,1,4,null,null,3,6,null,null,2,null,null,null],
    ""output"": false
    },
    {
    ""input"": [1,null,2,3,null,null,4,null,null,null],
    ""output"": false
    },
    {
    ""input"": [1,null,2,3,null,null,4,null,null,null,null,null,5],
    ""output"": false
    },
    {
    ""input"": [1,null,2,null,3],
    ""output"": true
    }
]

function create_tree(lst) {
    if (!lst || lst.length === 0) {
        return null;
    }
    let root = new TreeNode(lst[0]);
    let queue = [root];
    let i = 1;
    while (queue.length > 0 && i < lst.length) {
        let node = queue.shift();
        if (i < lst.length && lst[i] !== null) {
            node.left = new TreeNode(lst[i]);
            queue.push(node.left);
        }
        i += 1;
        if (i < lst.length && lst[i] !== null) {
            node.right = new TreeNode(lst[i]);
            queue.push(node.right);
        }
        i += 1;
    }
    return root;
}


for (let i = 0; i < params.length; i++) {
    let test = params[i];
    let input_data = test['input'];
    let expected_output = test['output'];
    let output = isValidBST(create_tree(input_data));
    if (output === expected_output) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. Input: ${input_data} Expected output: ${expected_output}, but got ${output}`);
    }
}","class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right","function TreeNode(val, left, right) {
    this.val = (val===undefined ? 0 : val)
    this.left = (left===undefined ? null : left)
    this.right = (right===undefined ? null : right)
}"
63b5984c8ad4593d6b7b0222,kth-smallest-element-in-a-bst,"params = [    
    {       
    ""input"": [3,1,4,None,2],
    ""k"": 1,
    ""output"": 1
    },
    {
    ""input"": [5,3,6,2,4,None,None,1],
    ""k"": 3,
    ""output"": 3
    },
    {
    ""input"": [5,3,6,2,4,None,None,1],
    ""k"": 1,
    ""output"": 1
    },
    {
    ""input"": [5,3,6,2,4,None,None,1],
    ""k"": 5,
    ""output"": 5
    },
    {
    ""input"": [5,3,6,2,4,None,None,1],
    ""k"": 6,
    ""output"": 6
    },
    {
    ""input"": [1],
    ""k"": 1,
    ""output"": 1
    },
    {
    ""input"": [10,5,15,3,7,None,18],
    ""k"": 3,
    ""output"": 7
    },
    {
    ""input"": [10,5,15,3,7,13,18,1,None,6],
    ""k"": 7,
    ""output"": 13
    },
    {
    ""input"": [10,20,30,40,50,60,70,80,90,100],
    ""k"": 6,
    ""output"": 50
    },
    {
    ""input"": [100,90,80,70,60,50,40,30,20,10],
    ""k"": 3,
    ""output"": 20
    },
    {
    ""input"": [5,3,6,2,4,None,None,1],
    ""k"": 4,
    ""output"": 4
    },
    {
    ""input"": [1,2,3,4,5,6,7,8,9,10],
    ""k"": 10,
    ""output"": 7
    },
    {
    ""input"": [5,5,5],
    ""k"": 3,
    ""output"": 5
    },
    {
    ""input"": [5,1,5],
    ""k"": 2,
    ""output"": 5
    },
    {
    ""input"": [5,4,8,11,None,13,4,7,2,None,None,None,1],
    ""k"": 2,
    ""output"": 11
    },
    {
    ""input"": [3,2,None,1],
    ""k"": 3,
    ""output"": 3
    }
]

def create_tree(lst):
    if not lst:
        return None
    root = TreeNode(lst[0])
    queue = [root]
    i = 1
    while queue and i < len(lst):
        node = queue.pop(0)
        if i < len(lst) and lst[i] is not None:
            node.left = TreeNode(lst[i])
            queue.append(node.left)
        i += 1
        if i < len(lst) and lst[i] is not None:
            node.right = TreeNode(lst[i])
            queue.append(node.right)
        i += 1
    return root

obj = Solution()

for test in params:
    input_data = test['input']
    expected_output = test['output']
    k = test['k']
    output = obj.kthSmallest(create_tree(input_data), k)
    if output == expected_output:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input: {input_data}, k: {k} Expected output: {expected_output}, but got {output}"")","let params = [    
    {       
    ""input"": [3,1,4,null,2],
    ""k"": 1,
    ""output"": 1
    },
    {
    ""input"": [5,3,6,2,4,null,null,1],
    ""k"": 3,
    ""output"": 3
    },
    {
    ""input"": [5,3,6,2,4,null,null,1],
    ""k"": 1,
    ""output"": 1
    },
    {
    ""input"": [5,3,6,2,4,null,null,1],
    ""k"": 5,
    ""output"": 5
    },
    {
    ""input"": [5,3,6,2,4,null,null,1],
    ""k"": 6,
    ""output"": 6
    },
    {
    ""input"": [1],
    ""k"": 1,
    ""output"": 1
    },
    {
    ""input"": [10,5,15,3,7,null,18],
    ""k"": 3,
    ""output"": 7
    },
    {
    ""input"": [10,5,15,3,7,13,18,1,null,6],
    ""k"": 7,
    ""output"": 13
    },
    {
    ""input"": [10,20,30,40,50,60,70,80,90,100],
    ""k"": 6,
    ""output"": 50
    },
    {
    ""input"": [100,90,80,70,60,50,40,30,20,10],
    ""k"": 3,
    ""output"": 20
    },
    {
    ""input"": [5,3,6,2,4,null,null,1],
    ""k"": 4,
    ""output"": 4
    },
    {
    ""input"": [1,2,3,4,5,6,7,8,9,10],
    ""k"": 10,
    ""output"": 7
    },
    {
    ""input"": [5,5,5],
    ""k"": 3,
    ""output"": 5
    },
    {
    ""input"": [5,1,5],
    ""k"": 2,
    ""output"": 5
    },
    {
    ""input"": [5,4,8,11,null,13,4,7,2,null,null,null,1],
    ""k"": 2,
    ""output"": 11
    },
    {
    ""input"": [3,2,null,1],
    ""k"": 3,
    ""output"": 3
    }
]

function create_tree(lst) {
    if (!lst || lst.length === 0) {
        return null;
    }
    let root = new TreeNode(lst[0]);
    let queue = [root];
    let i = 1;
    while (queue.length > 0 && i < lst.length) {
        let node = queue.shift();
        if (i < lst.length && lst[i] !== null) {
            node.left = new TreeNode(lst[i]);
            queue.push(node.left);
        }
        i += 1;
        if (i < lst.length && lst[i] !== null) {
            node.right = new TreeNode(lst[i]);
            queue.push(node.right);
        }
        i += 1;
    }
    return root;
}

for (let test of params) {
    let input_data = test['input'];
    let expected_output = test['output'];
    let k = test['k'];
    let output = kthSmallest(create_tree(input_data), k);
    if (output === expected_output) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. Input: ${input_data}, k: ${k} Expected output: ${expected_output}, but got ${output}`);
    }
}","class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None","function TreeNode(val, left, right) {
    this.val = (val===undefined ? 0 : val)
    this.left = (left===undefined ? null : left)
    this.right = (right===undefined ? null : right)
}"
63b5984d8ad4593d6b7b0223,construct-binary-tree-from-preorder-and-inorder-traversal,"params = [
    {
        ""input"": [[3,9,20,15,7], [9,3,15,20,7]],
        ""output"": [3,9,20,None,None,15,7]
    },
    {
        ""input"": [[-1], [-1]],
        ""output"": [-1]
    },
    {
        ""input"": [[1,2,3], [2,1,3]],
        ""output"": [1,2,3]
    },
    {
        ""input"": [[1,2], [1,2]],
        ""output"": [1, None, 2, None, None]
    },
    {
        ""input"": [[1], [1]],
        ""output"": [1]
    },
    {
        ""input"": [[1,2,3,4,5,6,7], [2,1,4,3,6,5,7]],
        ""output"": [1, 2, 3, None, None, 4, 5, None, None, 6, 7, None, None, None, None]
    },
    {
        ""input"": [[1,2,3,4,5,6], [5, 6, 4, 3, 2, 1]],
        ""output"": [1, 2, None, 3, None, 4, None, 5, None, None, 6, None, None]
    },
    {
        ""input"": [[1,2,3,4,5], [2,1,5,4,3]],
        ""output"": [1, 2, 3, None, None, 4, None, 5, None, None, None]
    },
    {
        ""input"": [[1,2,3,4], [2,1,4,3]],
        ""output"": [1, 2, 3, None, None, 4, None, None, None]
    },
    {
        ""input"": [[1,2,4,5,7,6,3,8,9,10,11,12,13], [4,2,7,5,6,1,11,10,13,12,9,8,3]],
        ""output"": [1, 2, 3, 4, 5, 8, None, None, None, 7, 6, 9, None, None, None, None, None, 10, None, 11, 12, None, None, 13, None, None, None]
    }
]

def create_tree(lst):
    if not lst:
        return None
    root = TreeNode(lst[0])
    queue = [root]
    i = 1
    while queue and i < len(lst):
        node = queue.pop(0)
        if i < len(lst) and lst[i] is not None:
            node.left = TreeNode(lst[i])
            queue.append(node.left)
        i += 1
        if i < len(lst) and lst[i] is not None:
            node.right = TreeNode(lst[i])
            queue.append(node.right)
        i += 1
    return root

def tree_to_list(root):
    if not root:
        return []
    result = []
    queue = [root]
    while queue:
        node = queue.pop(0)
        if node:
            result.append(node.val)
            queue.append(node.left)
            queue.append(node.right)
        else:
            result.append(None)
    return result

def identicalTrees(a, b):
 
    # 1. Both empty
    if a is None and b is None:
        return True
 
    # 2. Both non-empty -> Compare them
    if a is not None and b is not None:
        return ((a.val == b.val) and
                identicalTrees(a.left, b.left)and
                identicalTrees(a.right, b.right))
 
    # 3. one empty, one not -- false
    return False

obj = Solution()

for test in params:
    preorder = test['input'][0]
    inorder = test['input'][1]
    expected_output = test['output']
    output = obj.buildTree(preorder, inorder)
    if identicalTrees(output, create_tree(expected_output)):
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input: preorder={preorder}, inorder={inorder} Expected output: {expected_output}, but got {tree_to_list(output)}"")","let params = [
    {
        ""input"": [[3,9,20,15,7], [9,3,15,20,7]],
        ""output"": [3,9,20,null,null,15,7]
    },
    {
        ""input"": [[-1], [-1]],
        ""output"": [-1]
    },
    {
        ""input"": [[1,2,3], [2,1,3]],
        ""output"": [1,2,3]
    },
    {
        ""input"": [[1,2], [1,2]],
        ""output"": [1, null, 2, null, null]
    },
    {
        ""input"": [[1], [1]],
        ""output"": [1]
    },
    {
        ""input"": [[1,2,3,4,5,6,7], [2,1,4,3,6,5,7]],
        ""output"": [1, 2, 3, null, null, 4, 5, null, null, 6, 7, null, null, null, null]
    },
    {
        ""input"": [[1,2,3,4,5,6], [5, 6, 4, 3, 2, 1]],
        ""output"": [1, 2, null, 3, null, 4, null, 5, null, null, 6, null, null]
    },
    {
        ""input"": [[1,2,3,4,5], [2,1,5,4,3]],
        ""output"": [1, 2, 3, null, null, 4, null, 5, null, null, null]
    },
    {
        ""input"": [[1,2,3,4], [2,1,4,3]],
        ""output"": [1, 2, 3, null, null, 4, null, null, null]
    },
    {
        ""input"": [[1,2,4,5,7,6,3,8,9,10,11,12,13], [4,2,7,5,6,1,11,10,13,12,9,8,3]],
        ""output"": [1, 2, 3, 4, 5, 8, null, null, null, 7, 6, 9, null, null, null, null, null, 10, null, 11, 12, null, null, 13, null, null, null]
    }
]

function create_tree(lst) {
    if (!lst || lst.length === 0) {
        return null;
    }
    let root = new TreeNode(lst[0]);
    let queue = [root];
    let i = 1;
    while (queue.length > 0 && i < lst.length) {
        let node = queue.shift();
        if (i < lst.length && lst[i] !== null) {
            node.left = new TreeNode(lst[i]);
            queue.push(node.left);
        }
        i += 1;
        if (i < lst.length && lst[i] !== null) {
            node.right = new TreeNode(lst[i]);
            queue.push(node.right);
        }
        i += 1;
    }
    return root;
}

function tree_to_list(root) {
    if (!root) {
        return [];
    }
    let result = [];
    let queue = [root];
    while (queue.length > 0) {
        let node = queue.shift();
        if (node) {
            result.push(node.val);
            queue.push(node.left);
            queue.push(node.right);
        } else {
            result.push(null);
        }
    }
    return result;
}

function identicalTrees(a, b) {
 
    // 1. Both empty
    if (a === null && b === null) {
        return true;
    }
 
    // 2. Both non-empty -> Compare them
    if (a !== null && b !== null) {
        return ((a.val === b.val) &&
                identicalTrees(a.left, b.left)&&
                identicalTrees(a.right, b.right));
    }
 
    // 3. one empty, one not -- false
    return false;
}

for (const test of params) {
    let preorder = test['input'][0];
    let inorder = test['input'][1];
    let expected_output = test['output'];
    let output = buildTree(preorder, inorder);
    if (identicalTrees(output, create_tree(expected_output))) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. Input: preorder=${preorder}, inorder=${inorder} Expected output: ${expected_output}, but got ${tree_to_list(output)}`);
    }
}","class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right","function TreeNode(val, left, right) {
    this.val = (val===undefined ? 0 : val)
    this.left = (left===undefined ? null : left)
    this.right = (right===undefined ? null : right)
}"
63b5984e8ad4593d6b7b0224,binary-tree-maximum-path-sum,"params = [
    {
    ""input"": [1,2,3],
    ""output"": 6
    },
    {
    ""input"": [-10,9,20,None,None,15,7],
    ""output"": 42
    },
    {
    ""input"": [1, -2, 3],
    ""output"": 4
    },
    {
    ""input"": [1],
    ""output"": 1
    },
    {
    ""input"": [1,2,3,-4],
    ""output"": 6
    },
    {
    ""input"": [2, -1, -2],
    ""output"": 2
    },
    {
    ""input"": [1, -1, -1],
    ""output"": 1
    },
    {
    ""input"": [1, 2, -1, 4],
    ""output"": 7
    },
    {
    ""input"": [-1, -2, -3, -4],
    ""output"": -1
    },
    {
    ""input"": [1,2,3,4,5],
    ""output"": 11
    },
    {
    ""input"": [-1,0,1],
    ""output"": 1
    },
    {
    ""input"": [1,2,3,4,5,-6],
    ""output"": 11
    },
    {
    ""input"": [1, -2, 3, -4, -5],
    ""output"": 4
    },
    {
    ""input"": [1, 2, -1, 4, -5, -6],
    ""output"": 7
    },
    {
    ""input"": [1, -1, 2, -3, 4, -5],
    ""output"": 6
    },
    {
    ""input"": [1, -2, 3, -4, 5],
    ""output"": 7
    },
    {
    ""input"": [1, -1, -1, 2],
    ""output"": 2
    },
    {
    ""input"": [-1, -2, -3, 4],
    ""output"": 4
    },
    {
    ""input"": [1, -1, -1, 2, -2],
    ""output"": 2
    }
]

def create_tree(lst):
    if not lst:
        return None
    root = TreeNode(lst[0])
    queue = [root]
    i = 1
    while queue and i < len(lst):
        node = queue.pop(0)
        if i < len(lst) and lst[i] is not None:
            node.left = TreeNode(lst[i])
            queue.append(node.left)
        i += 1
        if i < len(lst) and lst[i] is not None:
            node.right = TreeNode(lst[i])
            queue.append(node.right)
        i += 1
    return root


obj = Solution()

for test in params:
    input_data = test['input']
    expected_output = test['output']
    output = obj.maxPathSum(create_tree(input_data))
    if output == expected_output:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input: {input_data} Expected output: {expected_output}, but got {output}"")","let params = [
    {
    ""input"": [1,2,3],
    ""output"": 6
    },
    {
    ""input"": [-10,9,20,null,null,15,7],
    ""output"": 42
    },
    {
    ""input"": [1, -2, 3],
    ""output"": 4
    },
    {
    ""input"": [1],
    ""output"": 1
    },
    {
    ""input"": [1,2,3,-4],
    ""output"": 6
    },
    {
    ""input"": [2, -1, -2],
    ""output"": 2
    },
    {
    ""input"": [1, -1, -1],
    ""output"": 1
    },
    {
    ""input"": [1, 2, -1, 4],
    ""output"": 7
    },
    {
    ""input"": [-1, -2, -3, -4],
    ""output"": -1
    },
    {
    ""input"": [1,2,3,4,5],
    ""output"": 11
    },
    {
    ""input"": [-1,0,1],
    ""output"": 1
    },
    {
    ""input"": [1,2,3,4,5,-6],
    ""output"": 11
    },
    {
    ""input"": [1, -2, 3, -4, -5],
    ""output"": 4
    },
    {
    ""input"": [1, 2, -1, 4, -5, -6],
    ""output"": 7
    },
    {
    ""input"": [1, -1, 2, -3, 4, -5],
    ""output"": 6
    },
    {
    ""input"": [1, -2, 3, -4, 5],
    ""output"": 7
    },
    {
    ""input"": [1, -1, -1, 2],
    ""output"": 2
    },
    {
    ""input"": [-1, -2, -3, 4],
    ""output"": 4
    },
    {
    ""input"": [1, -1, -1, 2, -2],
    ""output"": 2
    }
]

function create_tree(lst) {
    if (!lst || lst.length === 0) {
        return null;
    }
    let root = new TreeNode(lst[0]);
    let queue = [root];
    let i = 1;
    while (queue.length > 0 && i < lst.length) {
        let node = queue.shift();
        if (i < lst.length && lst[i] !== null) {
            node.left = new TreeNode(lst[i]);
            queue.push(node.left);
        }
        i += 1;
        if (i < lst.length && lst[i] !== null) {
            node.right = new TreeNode(lst[i]);
            queue.push(node.right);
        }
        i += 1;
    }
    return root;
}


for (let test of params) {
    let input_data = test['input'];
    let expected_output = test['output'];
    let output = maxPathSum(create_tree(input_data));
    if (output === expected_output) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. Input: ${input_data} Expected output: ${expected_output}, but got ${output}`);
    }
}","class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right","function TreeNode(val, left, right) {
    this.val = (val===undefined ? 0 : val)
    this.left = (left===undefined ? null : left)
    this.right = (right===undefined ? null : right)
}"
63b5984f8ad4593d6b7b0225,serialize-and-deserialize-binary-tree,"params = [
    {
    ""input"": [1,2,3],
    ""output"": [1,2,3]
    },
    {
    ""input"": [-10,9,20,None,None,15,7],
    ""output"": [-10,9,20,None,None,15,7]
    },
    {
    ""input"": [1, -2, 3],
    ""output"": [1, -2, 3]
    },
    {
    ""input"": [1],
    ""output"": [1]
    },
    {
    ""input"": [1,2,3,-4],
    ""output"": [1,2,3,-4],
    },
    {
    ""input"": [2, -1, -2],
    ""output"": [2, -1, -2],
    },
    {
    ""input"": [1, -1, -1],
    ""output"": [1, -1, -1],
    },
    {
    ""input"": [1, 2, -1, 4],
    ""output"": [1, 2, -1, 4],
    },
    {
    ""input"": [-1, -2, -3, -4],
    ""output"":  [-1, -2, -3, -4],
    },
    {
    ""input"": [1,2,3,4,5],
    ""output"": [1,2,3,4,5],
    },
    {
    ""input"": [-1,0,1],
    ""output"": [-1,0,1],
    },
    {
    ""input"": [1,2,3,4,5,-6],
    ""output"": [1,2,3,4,5,-6],
    },
    {
    ""input"": [1, -2, 3, -4, -5],
    ""output"": [1, -2, 3, -4, -5],
    },
    {
    ""input"": [1, 2, -1, 4, -5, -6],
    ""output"": [1, 2, -1, 4, -5, -6],
    },
    {
    ""input"": [1, -1, 2, -3, 4, -5],
    ""output"": [1, -1, 2, -3, 4, -5],
    },
    {
    ""input"": [1, -2, 3, -4, 5],
    ""output"": [1, -2, 3, -4, 5],
    },
    {
    ""input"": [1, -1, -1, 2],
    ""output"": [1, -1, -1, 2],
    },
    {
    ""input"": [-1, -2, -3, 4],
    ""output"": [-1, -2, -3, 4],
    },
    {
    ""input"": [1, -1, -1, 2, -2],
    ""output"": [1, -1, -1, 2, -2],
    }
]

def create_tree(lst):
    if not lst:
        return None
    root = TreeNode(lst[0])
    queue = [root]
    i = 1
    while queue and i < len(lst):
        node = queue.pop(0)
        if i < len(lst) and lst[i] is not None:
            node.left = TreeNode(lst[i])
            queue.append(node.left)
        i += 1
        if i < len(lst) and lst[i] is not None:
            node.right = TreeNode(lst[i])
            queue.append(node.right)
        i += 1
    return root

def identicalTrees(a, b):
 
    # 1. Both empty
    if a is None and b is None:
        return True
 
    # 2. Both non-empty -> Compare them
    if a is not None and b is not None:
        return ((a.val == b.val) and
                identicalTrees(a.left, b.left)and
                identicalTrees(a.right, b.right))
 
    # 3. one empty, one not -- false
    return False

def tree_to_list(root):
    if not root:
        return []
    result = []
    queue = [root]
    while queue:
        node = queue.pop(0)
        if node:
            result.append(node.val)
            queue.append(node.left)
            queue.append(node.right)
        else:
            result.append(None)
    return result


obj = Codec()

for test in params:
    input_data = test['input']
    expected_output = test['output']
    output = obj.deserialize(obj.serialize(create_tree(input_data)))
    if identicalTrees(output, create_tree(expected_output)):
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input: {input_data} Expected output: {expected_output}, but got {tree_to_list(output)}"")","let params = [
    {
    ""input"": [1,2,3],
    ""output"": [1,2,3]
    },
    {
    ""input"": [-10,9,20,null,null,15,7],
    ""output"": [-10,9,20,null,null,15,7]
    },
    {
    ""input"": [1, -2, 3],
    ""output"": [1, -2, 3]
    },
    {
    ""input"": [1],
    ""output"": [1]
    },
    {
    ""input"": [1,2,3,-4],
    ""output"": [1,2,3,-4],
    },
    {
    ""input"": [2, -1, -2],
    ""output"": [2, -1, -2],
    },
    {
    ""input"": [1, -1, -1],
    ""output"": [1, -1, -1],
    },
    {
    ""input"": [1, 2, -1, 4],
    ""output"": [1, 2, -1, 4],
    },
    {
    ""input"": [-1, -2, -3, -4],
    ""output"":  [-1, -2, -3, -4],
    },
    {
    ""input"": [1,2,3,4,5],
    ""output"": [1,2,3,4,5],
    },
    {
    ""input"": [-1,0,1],
    ""output"": [-1,0,1],
    },
    {
    ""input"": [1,2,3,4,5,-6],
    ""output"": [1,2,3,4,5,-6],
    },
    {
    ""input"": [1, -2, 3, -4, -5],
    ""output"": [1, -2, 3, -4, -5],
    },
    {
    ""input"": [1, 2, -1, 4, -5, -6],
    ""output"": [1, 2, -1, 4, -5, -6],
    },
    {
    ""input"": [1, -1, 2, -3, 4, -5],
    ""output"": [1, -1, 2, -3, 4, -5],
    },
    {
    ""input"": [1, -2, 3, -4, 5],
    ""output"": [1, -2, 3, -4, 5],
    },
    {
    ""input"": [1, -1, -1, 2],
    ""output"": [1, -1, -1, 2],
    },
    {
    ""input"": [-1, -2, -3, 4],
    ""output"": [-1, -2, -3, 4],
    },
    {
    ""input"": [1, -1, -1, 2, -2],
    ""output"": [1, -1, -1, 2, -2],
    }
]

function create_tree(lst) {
    if (!lst || lst.length === 0) {
        return null;
    }
    let root = new TreeNode(lst[0]);
    let queue = [root];
    let i = 1;
    while (queue.length > 0 && i < lst.length) {
        let node = queue.shift();
        if (i < lst.length && lst[i] !== null) {
            node.left = new TreeNode(lst[i]);
            queue.push(node.left);
        }
        i += 1;
        if (i < lst.length && lst[i] !== null) {
            node.right = new TreeNode(lst[i]);
            queue.push(node.right);
        }
        i += 1;
    }
    return root;
}



function tree_to_list(root) {
    if (!root) {
        return [];
    }
    let result = [];
    let queue = [root];
    while (queue.length > 0) {
        let node = queue.shift();
        if (node) {
            result.push(node.val);
            queue.push(node.left);
            queue.push(node.right);
        } else {
            result.push(null);
        }
    }
    return result;
}

function identicalTrees(a, b) {
 
    // 1. Both empty
    if (a === null && b === null) {
        return true;
    }
 
    // 2. Both non-empty -> Compare them
    if (a !== null && b !== null) {
        return ((a.val === b.val) &&
                identicalTrees(a.left, b.left)&&
                identicalTrees(a.right, b.right));
    }
 
    // 3. one empty, one not -- false
    return false;
}

for (let test of params) {
    let input_data = test['input']
    let expected_output = test['output']
    let output = deserialize(serialize(create_tree(input_data)));
    if (identicalTrees(output, create_tree(expected_output))) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. Input: ${input_data} Expected output: ${expected_output}, but got ${tree_to_list(output)}`);
    }
}","class TreeNode(object):
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None","function TreeNode(val) {
    this.val = val;
    this.left = this.right = null;
}"
63b598508ad4593d6b7b0226,implement-trie-prefix-tree,"params = [    
    {        
        ""input"": [""insert"", ""search"", ""search"", ""startsWith"", ""insert"", ""search""],
        ""input_args"": [[""apple""], [""apple""], [""app""], [""app""], [""app""], [""app""]],
        ""output"": [None, True, False, True, None, True]
    },
    {
        ""input"": [""insert"", ""search"", ""startsWith"", ""startsWith""],
        ""input_args"": [[""cat""], [""cat""], [""ca""], [""cf""]],
        ""output"": [None, True, True, False]
    },
    {
        ""input"": [""insert"", ""search"", ""startsWith"", ""startsWith""],
        ""input_args"": [[""dog""], [""dog""], [""do""], [""d""]],
        ""output"": [None, True, True, True]
    },
    {
        ""input"": [""insert"", ""search"", ""startsWith"", ""startsWith""],
        ""input_args"": [[""hello""], [""hello""], [""hell""], [""hev""]],
        ""output"": [None, True, True, False]
    },
    {
        ""input"": [""insert"", ""search"", ""startsWith"", ""startsWith""],
        ""input_args"": [[""world""], [""world""], [""wor""], [""wof""]],
        ""output"": [None, True, True, False]
    },
    {
        ""input"": [""insert"", ""search"", ""startsWith"", ""startsWith""],
        ""input_args"": [[""tree""], [""tree""], [""tre""], [""tr""]],
        ""output"": [None, True, True, True]
    },
    {
        ""input"": [""insert"", ""insert"", ""search"", ""search""],
        ""input_args"": [[""apple""], [""apple""], [""appl""], [""app""]],
        ""output"": [None, None, False, True]
    },
    {
        ""input"": [""insert"", ""search"", ""startsWith"", ""startsWith""],
        ""input_args"": [[""banana""], [""banana""], [""banan""], [""bana""]],
        ""output"": [None, True, True, True]
    },
    {
        ""input"": [""insert"", ""search"", ""startsWith"", ""startsWith""],
        ""input_args"": [[""cherry""], [""cherry""], [""cherr""], [""cher""]],
        ""output"": [None, True, True, True]
    },
    {
        ""input"": [""insert"", ""search"", ""startsWith"", ""startsWith""],
        ""input_args"": [[""date""], [""date""], [""dat""], [""da""]],
        ""output"": [None, True, True, True]
    },
    {        
        ""input"": [""insert"", ""search"", ""startsWith"", ""startsWith""],
        ""input_args"": [[""cat""], [""cat""], [""catt""], [""c""]],
        ""output"": [None, True, False, True]
    },
    {
        ""input"": [""insert"", ""search"", ""startsWith"", ""startsWith""],
        ""input_args"": [[""dog""], [""dog""], [""do""], [""dkuahsdlfkuahsdjfhaks""]],
        ""output"": [None, True, True, False]
    },
    {
        ""input"": [""insert"", ""search"", ""startsWith"", ""startsWith""],
        ""input_args"": [[""hello""], [""hello""], [""hello""], [""he""]],
        ""output"": [None, True, True, True]
    },
    {
        ""input"": [""insert"", ""search"", ""startsWith"", ""startsWith""],
        ""input_args"": [[""world""], [""world""], [""wor""], [""wo""]],
        ""output"": [None, True, True, True]
    },
    {
        ""input"": [""insert"", ""search"", ""startsWith"", ""startsWith""],
        ""input_args"": [[""tree""], [""tree""], [""tre""], [""tr""]],
        ""output"": [None, True, True, True]
    },
    {
        ""input"": [""addWord"", ""search"", ""startsWith"", ""startsWith""],
        ""input_args"": [[""apple""], [""apple""], [""appl""], [""a""]],
        ""output"": [None, True, True, True]
    },
]

obj = Trie()
for test in params:
    input_data = test['input']
    input_args = test['input_args']
    expected_output = test['output']
    output = []
    for i in range(len(input_data)):
        if input_data[i] == ""insert"":
            obj.insert(input_args[i][0])
            output.append(None)
        elif input_data[i] == ""search"":
            output.append(obj.search(input_args[i][0]))
        elif input_data[i] == ""startsWith"":
            output.append(obj.startsWith(input_args[i][0]))
        else:
            output.append(None)
    if output == expected_output:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input: {input_data}, {input_args} Expected output: {expected_output}, but got {output}"")","let params = [    
    {        
        ""input"": [""insert"", ""search"", ""search"", ""startsWith"", ""insert"", ""search""],
        ""input_args"": [[""apple""], [""apple""], [""app""], [""app""], [""app""], [""app""]],
        ""output"": [null, true, false, true, null, true]
    },
    {
        ""input"": [""insert"", ""search"", ""startsWith"", ""startsWith""],
        ""input_args"": [[""cat""], [""cat""], [""ca""], [""cf""]],
        ""output"": [null, true, true, false]
    },
    {
        ""input"": [""insert"", ""search"", ""startsWith"", ""startsWith""],
        ""input_args"": [[""dog""], [""dog""], [""do""], [""d""]],
        ""output"": [null, true, true, true]
    },
    {
        ""input"": [""insert"", ""search"", ""startsWith"", ""startsWith""],
        ""input_args"": [[""hello""], [""hello""], [""hell""], [""hev""]],
        ""output"": [null, true, true, false]
    },
    {
        ""input"": [""insert"", ""search"", ""startsWith"", ""startsWith""],
        ""input_args"": [[""world""], [""world""], [""wor""], [""wof""]],
        ""output"": [null, true, true, false]
    },
    {
        ""input"": [""insert"", ""search"", ""startsWith"", ""startsWith""],
        ""input_args"": [[""tree""], [""tree""], [""tre""], [""tr""]],
        ""output"": [null, true, true, true]
    },
    {
        ""input"": [""insert"", ""insert"", ""search"", ""search""],
        ""input_args"": [[""apple""], [""apple""], [""appl""], [""app""]],
        ""output"": [null, null, false, true]
    },
    {
        ""input"": [""insert"", ""search"", ""startsWith"", ""startsWith""],
        ""input_args"": [[""banana""], [""banana""], [""banan""], [""bana""]],
        ""output"": [null, true, true, true]
    },
    {
        ""input"": [""insert"", ""search"", ""startsWith"", ""startsWith""],
        ""input_args"": [[""cherry""], [""cherry""], [""cherr""], [""cher""]],
        ""output"": [null, true, true, true]
    },
    {
        ""input"": [""insert"", ""search"", ""startsWith"", ""startsWith""],
        ""input_args"": [[""date""], [""date""], [""dat""], [""da""]],
        ""output"": [null, true, true, true]
    },
    {        
        ""input"": [""insert"", ""search"", ""startsWith"", ""startsWith""],
        ""input_args"": [[""cat""], [""cat""], [""catt""], [""c""]],
        ""output"": [null, true, false, true]
    },
    {
        ""input"": [""insert"", ""search"", ""startsWith"", ""startsWith""],
        ""input_args"": [[""dog""], [""dog""], [""do""], [""dkuahsdlfkuahsdjfhaks""]],
        ""output"": [null, true, true, false]
    },
    {
        ""input"": [""insert"", ""search"", ""startsWith"", ""startsWith""],
        ""input_args"": [[""hello""], [""hello""], [""hello""], [""he""]],
        ""output"": [null, true, true, true]
    },
    {
        ""input"": [""insert"", ""search"", ""startsWith"", ""startsWith""],
        ""input_args"": [[""world""], [""world""], [""wor""], [""wo""]],
        ""output"": [null, true, true, true]
    },
    {
        ""input"": [""insert"", ""search"", ""startsWith"", ""startsWith""],
        ""input_args"": [[""tree""], [""tree""], [""tre""], [""tr""]],
        ""output"": [null, true, true, true]
    },
    {
        ""input"": [""addWord"", ""search"", ""startsWith"", ""startsWith""],
        ""input_args"": [[""apple""], [""apple""], [""appl""], [""a""]],
        ""output"": [null, true, true, true]
    },
]

let obj = new Trie();
for (let test of params) {
    let input_data = test['input'];
    let input_args = test['input_args'];
    let expected_output = test['output'];
    let output = [];
    for (let i = 0; i < input_data.length; i++) {
        if (input_data[i] === ""insert"") {
            obj.insert(input_args[i][0]);
            output.push(null);
        } else if (input_data[i] === ""search"") {
            output.push(obj.search(input_args[i][0]));
        } else if (input_data[i] === ""startsWith"") {
            output.push(obj.startsWith(input_args[i][0]));
        } else {
            output.push(null);
        }
    }
    if (output.toString() === expected_output.toString()) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. Input: ${input_data}, ${input_args} Expected output: ${expected_output}, but got ${output}`);
    }
}",,
63b598518ad4593d6b7b0227,design-add-and-search-words-data-structure,"params = [
    {
    ""input"": [""addWord"",""addWord"",""addWord"",""search"",""search"",""search"",""search""],
    ""input_args"": [[""bad""],[""dad""],[""mad""],[""pad""],[""bad""],["".ad""],[""b..""]],
    ""output"": [None, None, None, False, True, True, True]
    },
    {
    ""input"": [""addWord"",""addWord"",""addWord"",""search"",""search"",""search"",""search""],
    ""input_args"": [[""apple""],[""banana""],[""cherry""],[""app""],[""ban""],["".er""],[""c..""]],
    ""output"": [None, None, None, False, False, False, False]
    },
    {
    ""input"": [""addWord"",""addWord"",""search"",""search"",""search""],
    ""input_args"": [[""dog""],[""cat""],[""do""],[""ca""],[""d.""]],
    ""output"": [None, None, False, False, False]
    },
    {
    ""input"": [""addWord"",""addWord"",""search"",""search"",""search""],
    ""input_args"": [[""hello""],[""world""],[""he""],[""wo""],[""w.""]],
    ""output"": [None, None, False, False, False]
    },
    {
    ""input"": [""addWord"",""addWord"",""search"",""search"",""search""],
    ""input_args"": [[""tree""],[""forest""],[""tr""],[""fo""],[""f.""]],
    ""output"": [None, None, False, False, False]
    },
    {
    ""input"": [""addWord"",""addWord"",""search"",""search"",""search""],
    ""input_args"": [[""hello""],[""world""],[""he""],[""wo""],[""w.""]],
    ""output"": [None, None, False, False, False]
    },
    {
    ""input"": [""addWord"",""addWord"",""search"",""search"",""search""],
    ""input_args"": [[""water""],[""bottle""],[""wa""],[""bo""],[""b.""]],
    ""output"": [None, None, False, False, False]
    },
    {
    ""input"": [""addWord"",""addWord"",""search"",""search"",""search"",""search""],
    ""input_args"": [[""word""],[""wo""],[""wor""],[""wor.""],[""w..""],[""wor..""]],
    ""output"": [None, None, False, True, False, True]
    },
    {
    ""input"": [""addWord"",""search"",""search"",""search""],
    ""input_args"": [[""test""],[""te""],[""tes""],[""te.t""]],
    ""output"": [None, False, False, True]
    },
    {
    ""input"": [""addWord"",""addWord"",""search"",""search"",""search""],
    ""input_args"": [[""example""],[""ex""],[""exa""],[""exam.""],[""exa.p""]],
    ""output"": [None, None, False, False, False]
    },
    {
    ""input"": [""addWord"",""addWord"",""search"",""search"",""search""],
    ""input_args"": [[""hello""],[""world""],[""he""],[""wo""],[""w.""]],
    ""output"": [None, None, False, True, True]
    },
    {
    ""input"": [""addWord"",""addWord"",""search"",""search"",""search""],
    ""input_args"": [[""tree""],[""forest""],[""tr""],[""fo""],[""f.""]],
    ""output"": [None, None, False, False, False]
    }
]


obj = WordDictionary()
for test in params:
    input_data = test['input']
    input_args = test['input_args']
    expected_output = test['output']
    output = []
    for i in range(len(input_data)):
        if input_data[i] == ""addWord"":
            obj.addWord(input_args[i][0])
            output.append(None)
        elif input_data[i] == ""search"":
            output.append(obj.search(input_args[i][0]))
    if output == expected_output:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input: {input_data} Ops: {input_args} Expected output: {expected_output}, but got {output}"")","let params = [
    {
    ""input"": [""addWord"",""addWord"",""addWord"",""search"",""search"",""search"",""search""],
    ""input_args"": [[""bad""],[""dad""],[""mad""],[""pad""],[""bad""],["".ad""],[""b..""]],
    ""output"": [null, null, null, false, true, true, true]
    },
    {
    ""input"": [""addWord"",""addWord"",""addWord"",""search"",""search"",""search"",""search""],
    ""input_args"": [[""apple""],[""banana""],[""cherry""],[""app""],[""ban""],["".er""],[""c..""]],
    ""output"": [null, null, null, false, false, false, false]
    },
    {
    ""input"": [""addWord"",""addWord"",""search"",""search"",""search""],
    ""input_args"": [[""dog""],[""cat""],[""do""],[""ca""],[""d.""]],
    ""output"": [null, null, false, false, false]
    },
    {
    ""input"": [""addWord"",""addWord"",""search"",""search"",""search""],
    ""input_args"": [[""hello""],[""world""],[""he""],[""wo""],[""w.""]],
    ""output"": [null, null, false, false, false]
    },
    {
    ""input"": [""addWord"",""addWord"",""search"",""search"",""search""],
    ""input_args"": [[""tree""],[""forest""],[""tr""],[""fo""],[""f.""]],
    ""output"": [null, null, false, false, false]
    },
    {
    ""input"": [""addWord"",""addWord"",""search"",""search"",""search""],
    ""input_args"": [[""hello""],[""world""],[""he""],[""wo""],[""w.""]],
    ""output"": [null, null, false, false, false]
    },
    {
    ""input"": [""addWord"",""addWord"",""search"",""search"",""search""],
    ""input_args"": [[""water""],[""bottle""],[""wa""],[""bo""],[""b.""]],
    ""output"": [null, null, false, false, false]
    },
    {
    ""input"": [""addWord"",""addWord"",""search"",""search"",""search"",""search""],
    ""input_args"": [[""word""],[""wo""],[""wor""],[""wor.""],[""w..""],[""wor..""]],
    ""output"": [null, null, false, true, false, true]
    },
    {
    ""input"": [""addWord"",""search"",""search"",""search""],
    ""input_args"": [[""test""],[""te""],[""tes""],[""te.t""]],
    ""output"": [null, false, false, true]
    },
    {
    ""input"": [""addWord"",""addWord"",""search"",""search"",""search""],
    ""input_args"": [[""example""],[""ex""],[""exa""],[""exam.""],[""exa.p""]],
    ""output"": [null, null, false, false, false]
    },
    {
    ""input"": [""addWord"",""addWord"",""search"",""search"",""search""],
    ""input_args"": [[""hello""],[""world""],[""he""],[""wo""],[""w.""]],
    ""output"": [null, null, false, true, true]
    },
    {
    ""input"": [""addWord"",""addWord"",""search"",""search"",""search""],
    ""input_args"": [[""tree""],[""forest""],[""tr""],[""fo""],[""f.""]],
    ""output"": [null, null, false, false, false]
    }
]

let obj = new WordDictionary();
for (let test of params) {
    let input_data = test['input'];
    let input_args = test['input_args'];
    let expected_output = test['output'];
    let output = [];
    for (let i = 0; i < input_data.length; i++) {
        if (input_data[i] == ""addWord"") {
            obj.addWord(input_args[i][0]);
            output.push(null);
        } else if (input_data[i] == ""search"") {
            output.push(obj.search(input_args[i][0]));
        }
    }
    if (output.toString() === expected_output.toString()) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. Input: ${input_data} Ops: ${input_args} Expected output: ${expected_output}, but got ${output}`);
    }
}",,
63b598518ad4593d6b7b0228,word-search-ii,"params = [
    {
        ""input"": [
        [[""o"",""a"",""a"",""n""],[""e"",""t"",""a"",""e""],[""i"",""h"",""k"",""r""],[""i"",""f"",""l"",""v""]],
        [""oath"",""pea"",""eat"",""rain""]
        ],
        ""output"": [""eat"",""oath""]
    },
    {
        ""input"": [
        [[""a"",""b""],[""c"",""d""]],
        [""abcb""]
        ],
        ""output"": []
    },
    {
        ""input"": [
        [[""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l""],[""m"",""n"",""o"",""p"",""q"",""r"",""s"",""t"",""u"",""v"",""w"",""x""],[""y"",""z"",""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j""],[""k"",""l"",""m"",""n"",""o"",""p"",""q"",""r"",""s"",""t"",""u"",""v""],[""w"",""x"",""y"",""z"",""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h""],[""i"",""j"",""k"",""l"",""m"",""n"",""o"",""p"",""q"",""r"",""s"",""t""],[""u"",""v"",""w"",""x"",""y"",""z"",""a"",""b"",""c"",""d"",""e"",""f""],[""g"",""h"",""i"",""j"",""k"",""l"",""m"",""n"",""o"",""p"",""q"",""r""],[""s"",""t"",""u"",""v"",""w"",""x"",""y"",""z"",""a"",""b"",""c"",""d""],[""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"",""m"",""n"",""o"",""p""],[""q"",""r"",""s"",""t"",""u"",""v"",""w"",""x"",""y"",""z"",""a"",""b""],[""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"",""m"",""n""]],
        [""abcdefghijklmnopqrstuvwxyz""]
        ],
        ""output"": []
    },
    {
        ""input"": [
        [[""a"",""a"",""a"",""a""],[""a"",""a"",""a"",""a""],[""a"",""a"",""a"",""a""],[""a"",""a"",""a"",""a""]],
        [""aaaaaaaaaa""]
        ],
        ""output"": [""aaaaaaaaaa""]
    },
    {    
        ""input"": [
            [[""o"",""a"",""t""],[""h"",""e"",""a""],[""t"",""t"",""n""]],
            [""oath"",""heat"",""eat"",""tea""]
        ],
        ""output"": ['heat', 'tea', 'eat']
    },
    {
        ""input"": [    
            [[""g"",""o"",""o"",""d""],[""b"",""y"",""e"",""e""],[""g"",""o"",""o"",""d""],[""b"",""y"",""e"",""e""]],
            [""goodbye"",""byegood"",""good"",""bye""]
        ],
        ""output"": ['bye', 'good']
    },
    {
        ""input"": [    
            [[""c"",""a"",""t"",""s""],[""r"",""u"",""n"",""s""],[""c"",""a"",""t"",""s""],[""r"",""u"",""n"",""s""]],
            [""catsruns"",""runscats"",""cat"",""runs""]
        ],
        ""output"": ['cat', 'runs']
    },
    {
        ""input"": [    
            [[""h"",""e"",""l"",""l"",""o""],[""w"",""o"",""r"",""l"",""d""]],
            [""hello"",""world"",""word"",""hell""]
        ],
        ""output"": ['hello', 'hell', 'world']
    },
    {
        ""input"": [    
            [[""h"",""e"",""a"",""t""],[""c"",""o"",""o"",""l""]],
            [""heat"",""cool"",""coat"",""lot""]
        ],
        ""output"": [""heat"",""cool""]
    },
    {
        ""input"": [    
            [[""p"",""e"",""a"",""c"",""e""],[""w"",""a"",""r"", ""t"", ""o""]],
            [""peace"",""war"",""wear"",""car""]
        ],
        ""output"": ['car', 'peace', 'war']
    },
    {
        ""input"": [    
            [[""s"",""p"",""r"",""i"",""n"",""g""],[""s"",""u"",""m"",""m"",""e"",""r""]],
            [""spring"",""summer"",""ring"",""murmur""]
        ],
        ""output"": ['summer', 'ring', 'spring']
    },
    {
        ""input"": [    
            [[""a"",""p"",""p"",""l"",""e""],[""b"",""a"",""n"",""a"",""n"",""a""]],
            [""apple"",""banana"",""ana"",""plea""]
        ],
        ""output"": ['apple', 'ana']
    },
    {
        ""input"": [    
            [[""f"",""a"",""l"",""l""],[""w"",""i"",""n"",""t"",""e"",""r""]],
            [""fall"",""winter"",""faint"",""inter""]
        ],
        ""output"": ['fall', 'faint']
    },
    {
        ""input"": [    
            [[""s"",""n"",""o"",""w"",""f"",""l"",""a"",""k"",""e""],[""s"",""a"",""n"",""d"",""b"",""e"",""a"",""c"",""h""]],
            [""snowflake"",""beachsand"",""flake"",""sand""]
        ],
        ""output"": ['flake', 'sand', 'snowflake']
    }
]


obj = Solution()
for test in params:
    input_data = test[""input""]
    expected_output = test[""output""]
    got_output = obj.findWords(input_data[0], input_data[1])
    if set(got_output) == set(expected_output):
        print(f""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Board: {input_data[0]}, Words: {input_data[1]} expected output {expected_output} but got {got_output}"")","let params = [
    {
        ""input"": [
        [[""o"",""a"",""a"",""n""],[""e"",""t"",""a"",""e""],[""i"",""h"",""k"",""r""],[""i"",""f"",""l"",""v""]],
        [""oath"",""pea"",""eat"",""rain""]
        ],
        ""output"": [""eat"",""oath""]
    },
    {
        ""input"": [
        [[""a"",""b""],[""c"",""d""]],
        [""abcb""]
        ],
        ""output"": []
    },
    {
        ""input"": [
        [[""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l""],[""m"",""n"",""o"",""p"",""q"",""r"",""s"",""t"",""u"",""v"",""w"",""x""],[""y"",""z"",""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j""],[""k"",""l"",""m"",""n"",""o"",""p"",""q"",""r"",""s"",""t"",""u"",""v""],[""w"",""x"",""y"",""z"",""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h""],[""i"",""j"",""k"",""l"",""m"",""n"",""o"",""p"",""q"",""r"",""s"",""t""],[""u"",""v"",""w"",""x"",""y"",""z"",""a"",""b"",""c"",""d"",""e"",""f""],[""g"",""h"",""i"",""j"",""k"",""l"",""m"",""n"",""o"",""p"",""q"",""r""],[""s"",""t"",""u"",""v"",""w"",""x"",""y"",""z"",""a"",""b"",""c"",""d""],[""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"",""m"",""n"",""o"",""p""],[""q"",""r"",""s"",""t"",""u"",""v"",""w"",""x"",""y"",""z"",""a"",""b""],[""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"",""m"",""n""]],
        [""abcdefghijklmnopqrstuvwxyz""]
        ],
        ""output"": []
    },
    {
        ""input"": [
        [[""a"",""a"",""a"",""a""],[""a"",""a"",""a"",""a""],[""a"",""a"",""a"",""a""],[""a"",""a"",""a"",""a""]],
        [""aaaaaaaaaa""]
        ],
        ""output"": [""aaaaaaaaaa""]
    },
    {    
        ""input"": [
            [[""o"",""a"",""t""],[""h"",""e"",""a""],[""t"",""t"",""n""]],
            [""oath"",""heat"",""eat"",""tea""]
        ],
        ""output"": ['heat', 'tea', 'eat']
    },
    {
        ""input"": [    
            [[""g"",""o"",""o"",""d""],[""b"",""y"",""e"",""e""],[""g"",""o"",""o"",""d""],[""b"",""y"",""e"",""e""]],
            [""goodbye"",""byegood"",""good"",""bye""]
        ],
        ""output"": ['bye', 'good']
    },
    {
        ""input"": [    
            [[""c"",""a"",""t"",""s""],[""r"",""u"",""n"",""s""],[""c"",""a"",""t"",""s""],[""r"",""u"",""n"",""s""]],
            [""catsruns"",""runscats"",""cat"",""runs""]
        ],
        ""output"": ['cat', 'runs']
    },
    {
        ""input"": [    
            [[""h"",""e"",""l"",""l"",""o""],[""w"",""o"",""r"",""l"",""d""]],
            [""hello"",""world"",""word"",""hell""]
        ],
        ""output"": ['hello', 'hell', 'world']
    },
    {
        ""input"": [    
            [[""h"",""e"",""a"",""t""],[""c"",""o"",""o"",""l""]],
            [""heat"",""cool"",""coat"",""lot""]
        ],
        ""output"": [""heat"",""cool""]
    },
    {
        ""input"": [    
            [[""p"",""e"",""a"",""c"",""e""],[""w"",""a"",""r"", ""t"", ""o""]],
            [""peace"",""war"",""wear"",""car""]
        ],
        ""output"": ['car', 'peace', 'war']
    },
    {
        ""input"": [    
            [[""s"",""p"",""r"",""i"",""n"",""g""],[""s"",""u"",""m"",""m"",""e"",""r""]],
            [""spring"",""summer"",""ring"",""murmur""]
        ],
        ""output"": ['summer', 'ring', 'spring']
    },
    {
        ""input"": [    
            [[""a"",""p"",""p"",""l"",""e""],[""b"",""a"",""n"",""a"",""n"",""a""]],
            [""apple"",""banana"",""ana"",""plea""]
        ],
        ""output"": ['apple', 'ana']
    },
    {
        ""input"": [    
            [[""f"",""a"",""l"",""l""],[""w"",""i"",""n"",""t"",""e"",""r""]],
            [""fall"",""winter"",""faint"",""inter""]
        ],
        ""output"": ['fall', 'faint']
    },
    {
        ""input"": [    
            [[""s"",""n"",""o"",""w"",""f"",""l"",""a"",""k"",""e""],[""s"",""a"",""n"",""d"",""b"",""e"",""a"",""c"",""h""]],
            [""snowflake"",""beachsand"",""flake"",""sand""]
        ],
        ""output"": ['flake', 'sand', 'snowflake']
    }
]

for (const test of params) {
    let input_data = test[""input""];
    let expected_output = test[""output""];
    let got_output = findWords(input_data[0], input_data[1]);
    if (new Set(got_output).toString() === new Set(expected_output).toString()) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. Board: ${input_data[0]}, Words: ${input_data[1]} expected output ${expected_output} but got ${got_output}`);
    }
}",,
63b598528ad4593d6b7b0229,kth-largest-element-in-a-stream,"params = [    
    {        
        ""input"": [3, [4, 5, 8, 2]], 
        ""add"": [3, 5, 10, 9, 4], 
        ""output"": [4, 5, 5, 8, 8]
    },
    {
        ""input"": [2, [-1, 0, 1, 2, 3]], 
        ""add"": [4, 5, -2, -3, -4], 
        ""output"": [3, 4, 4, 4, 4]
    },
    {
        ""input"": [2, [1, 2, 3, 4, 5]], 
        ""add"": [-1, -2, -3, -4, -5], 
        ""output"": [4, 4, 4, 4, 4]
    },
    {
        ""input"": [3, [10, 20, 30, 40, 50]], 
        ""add"": [60, 70, 80, 90, 100], 
        ""output"": [40, 50, 60, 70, 80]
    },
    {
        ""input"": [1, [-100, -50, -25, -10, -5]], 
        ""add"": [0, 1, 2, 3, 4], 
        ""output"":[0, 1, 2, 3, 4]
    },
    {
        ""input"": [5, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], 
        ""add"": [11, 12, 13, 14, 15], 
        ""output"": [7, 8, 9, 10, 11]
    },
    {
        ""input"": [1, [1]], 
        ""add"": [2, 3, 4, 5, 6], 
        ""output"": [2, 3, 4, 5, 6]
    },
    {
        ""input"": [5, [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], 
        ""add"": [1, 1, 1, 1, 1], 
        ""output"": [1, 1, 1, 1, 1]
    },
    {
        ""input"": [3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]], 
        ""add"": [-1, -2, -3, -4, -5], 
        ""output"": [13, 13, 13, 13, 13]
    },
    {
        ""input"": [4, [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]], 
        ""add"": [900, 800, 700, 600, 500], 
        ""output"": [800, 800, 800, 800, 800]
    }
]

for test in params:
    kthLargest = KthLargest(test[""input""][0], test[""input""][1])
    res = []
    for val in test[""add""]:
        got_output = kthLargest.add(val)
        res.append(got_output)
    expected_output = test[""output""]
    if res == expected_output:
        print(f""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. add value: {val} expected output {expected_output} but got {res}"")","let params = [    
    {        
        ""input"": [3, [4, 5, 8, 2]], 
        ""add"": [3, 5, 10, 9, 4], 
        ""output"": [4, 5, 5, 8, 8]
    },
    {
        ""input"": [2, [-1, 0, 1, 2, 3]], 
        ""add"": [4, 5, -2, -3, -4], 
        ""output"": [3, 4, 4, 4, 4]
    },
    {
        ""input"": [2, [1, 2, 3, 4, 5]], 
        ""add"": [-1, -2, -3, -4, -5], 
        ""output"": [4, 4, 4, 4, 4]
    },
    {
        ""input"": [3, [10, 20, 30, 40, 50]], 
        ""add"": [60, 70, 80, 90, 100], 
        ""output"": [40, 50, 60, 70, 80]
    },
    {
        ""input"": [1, [-100, -50, -25, -10, -5]], 
        ""add"": [0, 1, 2, 3, 4], 
        ""output"":[0, 1, 2, 3, 4]
    },
    {
        ""input"": [5, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], 
        ""add"": [11, 12, 13, 14, 15], 
        ""output"": [7, 8, 9, 10, 11]
    },
    {
        ""input"": [1, [1]], 
        ""add"": [2, 3, 4, 5, 6], 
        ""output"": [2, 3, 4, 5, 6]
    },
    {
        ""input"": [5, [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], 
        ""add"": [1, 1, 1, 1, 1], 
        ""output"": [1, 1, 1, 1, 1]
    },
    {
        ""input"": [3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]], 
        ""add"": [-1, -2, -3, -4, -5], 
        ""output"": [13, 13, 13, 13, 13]
    },
    {
        ""input"": [4, [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]], 
        ""add"": [900, 800, 700, 600, 500], 
        ""output"": [800, 800, 800, 800, 800]
    }
]

for (let test of params) {
    let kthLargest = new KthLargest(test[""input""][0], test[""input""][1]);
    let res = [];
    for (let val of test[""add""]) {
        let got_output = kthLargest.add(val);
        res.push(got_output);
    }
    let expected_output = test[""output""];
    if (JSON.stringify(res) === JSON.stringify(expected_output)) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. add value: ${val} expected output ${expected_output} but got ${res}`);
    }
}",,
63b598538ad4593d6b7b022a,last-stone-weight,"params = [    
    {        
        ""input"": [2,7,4,1,8,1],
        ""output"": 1
    },
    {
        ""input"": [1],
        ""output"": 1
    },
    {
        ""input"": [7,7,7,7],
        ""output"": 0
    },
    {
        ""input"": [1,2,3,4,5],
        ""output"": 1
    },
    {
        ""input"": [1000,999,998,997],
        ""output"": 0
    },
    {
        ""input"": [1,1,1,1,1],
        ""output"": 1
    },
    {
        ""input"": [2,2,2,2,2],
        ""output"": 2
    },
    {
        ""input"": [30,28,26,24,22],
        ""output"": 18
    },
    {
        ""input"": [2,4,6,8,10],
        ""output"": 2
    },
    {
        ""input"": [10,9,8,7,6],
        ""output"": 4
    }
]

obj = Solution()
for test in params:
    got_output = obj.lastStoneWeight(test[""input""])
    expected_output = test[""output""]
    if got_output == expected_output:
        print(f""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. input: {test['input']} expected output {expected_output} but got {got_output}"")","let params = [    
    {        
        ""input"": [2,7,4,1,8,1],
        ""output"": 1
    },
    {
        ""input"": [1],
        ""output"": 1
    },
    {
        ""input"": [7,7,7,7],
        ""output"": 0
    },
    {
        ""input"": [1,2,3,4,5],
        ""output"": 1
    },
    {
        ""input"": [1000,999,998,997],
        ""output"": 0
    },
    {
        ""input"": [1,1,1,1,1],
        ""output"": 1
    },
    {
        ""input"": [2,2,2,2,2],
        ""output"": 2
    },
    {
        ""input"": [30,28,26,24,22],
        ""output"": 18
    },
    {
        ""input"": [2,4,6,8,10],
        ""output"": 2
    },
    {
        ""input"": [10,9,8,7,6],
        ""output"": 4
    }
]

for (let i = 0; i < params.length; i++) {
    let test = params[i];
    let got_output = lastStoneWeight(test[""input""]);
    let expected_output = test[""output""];
    if (parseInt(got_output) === expected_output) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. input: ${test['input']} expected output ${expected_output} but got ${got_output}`);
    }
}",,
63b598548ad4593d6b7b022b,k-closest-points-to-origin,"params = [
    {
    ""input"": [[[1,3],[-2,2]], 1],
    ""output"": [[-2,2]]
    },
    {
    ""input"": [[[3,3],[5,-1],[-2,4]], 2],
    ""output"": [[3,3],[-2,4]]
    },
    {
    ""input"": [[[3,3],[5,-1],[-2,4]], 3],
    ""output"": [[3, 3], [-2, 4], [5, -1]]
    },
    {
    ""input"": [[[3,3],[5,-1],[-2,4]], 1],
    ""output"": [[3,3]]
    },
    {
    ""input"": [[[3,3],[5,-1],[-2,4],[-5,5],[-10,10]], 2],
    ""output"": [[3, 3], [-2, 4]]
    },
    {
    ""input"": [[[3,3],[5,-1],[-2,4],[-5,5],[-10,10]], 5],
    ""output"": [[3, 3], [-2, 4], [5, -1], [-5, 5], [-10, 10]]
    },
    {
    ""input"": [[[3,3],[5,-1],[-2,4],[-5,5],[-10,10]], 4],
    ""output"": [[3, 3], [-2, 4], [5, -1], [-5, 5]]
    },
    {
    ""input"": [[[5,3],[1,-1],[-1,1],[-1,9]], 2],
    ""output"": [[1,-1],[-1,1]]
    },
    {
    ""input"": [[[8,7],[0,4],[0,-1],[1,0],[-1,0]], 3],
    ""output"": [[0,-1],[1,0],[-1,0]]
    }
]

obj = Solution()
for test in params:
    got_output = obj.kClosest(test[""input""][0], test[""input""][1])
    expected_output = test[""output""]
    got_output_set = set([tuple(lst) for lst in got_output])
    expected_output_set = set([tuple(lst) for lst in expected_output])
    if got_output_set == expected_output_set:
        print(f""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. input: {test['input']} expected output {expected_output} but got {got_output}"")","let params = [
    {
    ""input"": [[[1,3],[-2,2]], 1],
    ""output"": [[-2,2]]
    },
    {
    ""input"": [[[3,3],[5,-1],[-2,4]], 2],
    ""output"": [[3,3],[-2,4]]
    },
    {
    ""input"": [[[3,3],[5,-1],[-2,4]], 3],
    ""output"": [[3, 3], [-2, 4], [5, -1]]
    },
    {
    ""input"": [[[3,3],[5,-1],[-2,4]], 1],
    ""output"": [[3,3]]
    },
    {
    ""input"": [[[3,3],[5,-1],[-2,4],[-5,5],[-10,10]], 2],
    ""output"": [[3, 3], [-2, 4]]
    },
    {
    ""input"": [[[3,3],[5,-1],[-2,4],[-5,5],[-10,10]], 5],
    ""output"": [[3, 3], [-2, 4], [5, -1], [-5, 5], [-10, 10]]
    },
    {
    ""input"": [[[3,3],[5,-1],[-2,4],[-5,5],[-10,10]], 4],
    ""output"": [[3, 3], [-2, 4], [5, -1], [-5, 5]]
    },
    {
    ""input"": [[[5,3],[1,-1],[-1,1],[-1,9]], 2],
    ""output"": [[1,-1],[-1,1]]
    },
    {
    ""input"": [[[8,7],[0,4],[0,-1],[1,0],[-1,0]], 3],
    ""output"": [[0,-1],[1,0],[-1,0]]
    }
]

const eqSet = (xs, ys) =>
    xs.size === ys.size &&
    [...xs].every((x) => ys.has(x));

for (let test of params) {
    let got_output = kClosest(test[""input""][0], test[""input""][1]);
    let expected_output = test[""output""];
    let got_output_set = got_output.map(lst => JSON.stringify(lst))
    let expected_output_set = expected_output.map(lst => JSON.stringify(lst))
    let one = new Set(got_output_set)
    let two = new Set(expected_output_set)
    if (eqSet(one, two)) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. input: ${JSON.stringify(test['input'])} expected output [${JSON.stringify(expected_output)}] but got [${JSON.stringify(got_output)}]`);
    }
}",,
63b598558ad4593d6b7b022c,kth-largest-element-in-an-array,"params = [
    {
    ""input"": [[3,2,1,5,6,4], 2],
    ""output"": 5
    },
    {
    ""input"": [[3,2,3,1,2,4,5,5,6], 4],
    ""output"": 4
    },
    {
    ""input"": [[1,2,3,4,5,6,7,8,9], 9],
    ""output"": 1
    },
    {
    ""input"": [[1,1,1,1,1,1,1], 1],
    ""output"": 1
    },
    {
    ""input"": [[-1,-2,-3,-4,-5,-6,-7,-8,-9], 3],
    ""output"": -3
    },
    {
    ""input"": [[-1,-1,-1,-1,-1,-1,-1], 1],
    ""output"": -1
    },
    {
    ""input"": [[-1,1,0], 2],
    ""output"": 0
    },
    {
    ""input"": [[1], 1],
    ""output"": 1
    },
    {
    ""input"": [[1,2,3,4,5,6,7,8,9], 5],
    ""output"": 5
    },
    {
    ""input"": [[-5, -2, -1, 0, 1, 2, 3, 4, 5], 3],
    ""output"": 3
    },
    {
    ""input"": [[-5, -2, -1, 0, 1, 2, 3, 4, 5], 1],
    ""output"": 5
    },
    {
    ""input"": [[-5, -2, -1, 0, 1, 2, 3, 4, 5], 9],
    ""output"": -5
    },
    {
    ""input"": [[5,5,5,5,5], 3],
    ""output"": 5
    },
    {
    ""input"": [[-5,-5,-5,-5,-5], 3],
    ""output"": -5
    },
    {
    ""input"": [[-5,5,-5,5,-5,5], 3],
    ""output"": 5
    },
    {
    ""input"": [[1,1,1,1,1,1,1,1,1], 5],
    ""output"": 1
    },
    {
    ""input"": [[1,2,3,4,5,6,7,8,9], 4],
    ""output"": 6
    },
    {
    ""input"": [[1,2,3,4,5,6,7,8,9], 2],
    ""output"": 8
    },
    {
    ""input"": [[1,2,3,4,5,6,7,8,9], 1],
    ""output"": 9
    }
]

obj = Solution()
for test in params:
    got_output = obj.findKthLargest(test[""input""][0], test[""input""][1])
    expected_output = test[""output""]
    if got_output == expected_output:
        print(f""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. input: {test['input']} expected output {expected_output} but got {got_output}"")","let params = [
    {
    ""input"": [[3,2,1,5,6,4], 2],
    ""output"": 5
    },
    {
    ""input"": [[3,2,3,1,2,4,5,5,6], 4],
    ""output"": 4
    },
    {
    ""input"": [[1,2,3,4,5,6,7,8,9], 9],
    ""output"": 1
    },
    {
    ""input"": [[1,1,1,1,1,1,1], 1],
    ""output"": 1
    },
    {
    ""input"": [[-1,-2,-3,-4,-5,-6,-7,-8,-9], 3],
    ""output"": -3
    },
    {
    ""input"": [[-1,-1,-1,-1,-1,-1,-1], 1],
    ""output"": -1
    },
    {
    ""input"": [[-1,1,0], 2],
    ""output"": 0
    },
    {
    ""input"": [[1], 1],
    ""output"": 1
    },
    {
    ""input"": [[1,2,3,4,5,6,7,8,9], 5],
    ""output"": 5
    },
    {
    ""input"": [[-5, -2, -1, 0, 1, 2, 3, 4, 5], 3],
    ""output"": 3
    },
    {
    ""input"": [[-5, -2, -1, 0, 1, 2, 3, 4, 5], 1],
    ""output"": 5
    },
    {
    ""input"": [[-5, -2, -1, 0, 1, 2, 3, 4, 5], 9],
    ""output"": -5
    },
    {
    ""input"": [[5,5,5,5,5], 3],
    ""output"": 5
    },
    {
    ""input"": [[-5,-5,-5,-5,-5], 3],
    ""output"": -5
    },
    {
    ""input"": [[-5,5,-5,5,-5,5], 3],
    ""output"": 5
    },
    {
    ""input"": [[1,1,1,1,1,1,1,1,1], 5],
    ""output"": 1
    },
    {
    ""input"": [[1,2,3,4,5,6,7,8,9], 4],
    ""output"": 6
    },
    {
    ""input"": [[1,2,3,4,5,6,7,8,9], 2],
    ""output"": 8
    },
    {
    ""input"": [[1,2,3,4,5,6,7,8,9], 1],
    ""output"": 9
    }
]

for (let i = 0; i < params.length; i++) {
    let test = params[i];
    let got_output = findKthLargest(test[""input""][0], test[""input""][1]);
    let expected_output = test[""output""];
    if (got_output === expected_output) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. input: ${test['input']} expected output ${expected_output} but got ${got_output}`);
    }
}",,
63b598558ad4593d6b7b022d,task-scheduler,"params = [    
    {        
        ""input"": [[""A"",""A"",""A"",""B"",""B"",""B""], 2],
        ""output"": 8
    },
    {
        ""input"": [[""A"",""A"",""A"",""B"",""B"",""B""], 0],
        ""output"": 6
    },
    {
        ""input"": [[""A"",""A"",""A"",""A"",""A"",""A"",""B"",""C"",""D"",""E"",""F"",""G""], 2],
        ""output"": 16
    },
    {
        ""input"": [[""A"",""B"",""C"",""D"",""E"",""F"",""G"",""H"",""I"",""J"",""K"",""L""], 3],
        ""output"": 12
    },
    {
        ""input"": [[""A"",""B"",""C"",""D"",""E"",""F"",""G"",""H"",""I"",""J"",""K"",""L""], 2],
        ""output"": 12
    },
    {
        ""input"": [[""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A""], 0],
        ""output"": 12
    },
    {
        ""input"": [[""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A""], 1],
        ""output"": 23
    },
    {
        ""input"": [[""A"",""B"",""A"",""B"",""A"",""B"",""A"",""B"",""A"",""B"",""A"",""B""], 1],
        ""output"": 12
    },
    {
        ""input"": [[""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A""], 4],
        ""output"": 56
    },
    {
        ""input"": [[""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A""], 100],
        ""output"": 1112
    },
    {        
        ""input"": [[""A"",""A"",""B"",""B"",""C"",""C"",""D"",""D"",""E"",""E""], 3],
        ""output"": 10
    },
    {
        ""input"": [[""A"",""A"",""A"",""A"",""A"",""B"",""B"",""B"",""B"",""B""], 2],
        ""output"": 14
    },
    {
        ""input"": [[""A"",""B"",""C"",""D"",""E"",""F"",""G"",""H"",""I"",""J"",""K"",""L""], 4],
        ""output"": 12
    },
    {
        ""input"": [[""A"",""A"",""A"",""B"",""B"",""B"",""C"",""C"",""C""], 1],
        ""output"": 9
    },
    {
        ""input"": [[""A"",""B"",""A"",""B"",""C"",""C"",""D"",""D""], 0],
        ""output"": 8
    }
]

obj = Solution()
for test in params:
    got_output = obj.leastInterval(test[""input""][0], test[""input""][1])
    expected_output = test[""output""]
    if got_output == expected_output:
        print(f""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. input: {test['input']} expected output {expected_output} but got {got_output}"")","let params = [    
    {        
        ""input"": [[""A"",""A"",""A"",""B"",""B"",""B""], 2],
        ""output"": 8
    },
    {
        ""input"": [[""A"",""A"",""A"",""B"",""B"",""B""], 0],
        ""output"": 6
    },
    {
        ""input"": [[""A"",""A"",""A"",""A"",""A"",""A"",""B"",""C"",""D"",""E"",""F"",""G""], 2],
        ""output"": 16
    },
    {
        ""input"": [[""A"",""B"",""C"",""D"",""E"",""F"",""G"",""H"",""I"",""J"",""K"",""L""], 3],
        ""output"": 12
    },
    {
        ""input"": [[""A"",""B"",""C"",""D"",""E"",""F"",""G"",""H"",""I"",""J"",""K"",""L""], 2],
        ""output"": 12
    },
    {
        ""input"": [[""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A""], 0],
        ""output"": 12
    },
    {
        ""input"": [[""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A""], 1],
        ""output"": 23
    },
    {
        ""input"": [[""A"",""B"",""A"",""B"",""A"",""B"",""A"",""B"",""A"",""B"",""A"",""B""], 1],
        ""output"": 12
    },
    {
        ""input"": [[""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A""], 4],
        ""output"": 56
    },
    {
        ""input"": [[""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A"",""A""], 100],
        ""output"": 1112
    },
    {        
        ""input"": [[""A"",""A"",""B"",""B"",""C"",""C"",""D"",""D"",""E"",""E""], 3],
        ""output"": 10
    },
    {
        ""input"": [[""A"",""A"",""A"",""A"",""A"",""B"",""B"",""B"",""B"",""B""], 2],
        ""output"": 14
    },
    {
        ""input"": [[""A"",""B"",""C"",""D"",""E"",""F"",""G"",""H"",""I"",""J"",""K"",""L""], 4],
        ""output"": 12
    },
    {
        ""input"": [[""A"",""A"",""A"",""B"",""B"",""B"",""C"",""C"",""C""], 1],
        ""output"": 9
    },
    {
        ""input"": [[""A"",""B"",""A"",""B"",""C"",""C"",""D"",""D""], 0],
        ""output"": 8
    }
]

for (let test of params) {
    let got_output = leastInterval(test[""input""][0], test[""input""][1]);
    let expected_output = test[""output""];
    if (got_output === expected_output) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. input: ${test['input']} expected output ${expected_output} but got ${got_output}`);
    }
}",,
63b598578ad4593d6b7b022e,design-twitter,"params = [
    {""input"": [""postTweet"", 1, 5], ""output"": None},
    {""input"": [""getNewsFeed"", 1], ""output"": [5]},
    {""input"": [""follow"", 1, 2], ""output"": None},
    {""input"": [""postTweet"", 2, 6], ""output"": None},
    {""input"": [""getNewsFeed"", 1], ""output"": [6, 5]},
    {""input"": [""unfollow"", 1, 2], ""output"": None},
    {""input"": [""getNewsFeed"", 1], ""output"": [5]},
    {""input"": [""postTweet"", 3, 8], ""output"": None},
    {""input"": [""getNewsFeed"", 2], ""output"": [6]},
    {""input"": [""follow"", 2, 3], ""output"": None},
    {""input"": [""postTweet"", 4, 10], ""output"": None},
    {""input"": [""getNewsFeed"", 3], ""output"": [8]},
    {""input"": [""unfollow"", 2, 3], ""output"": None},
    {""input"": [""getNewsFeed"", 2], ""output"": [6]},
    {""input"": [""postTweet"", 5, 12], ""output"": None},
    {""input"": [""getNewsFeed"", 4], ""output"": [10]},
    {""input"": [""follow"", 4, 5], ""output"": None},
    {""input"": [""postTweet"", 6, 14], ""output"": None},
    {""input"": [""getNewsFeed"", 5], ""output"": [12]},
    {""input"": [""unfollow"", 4, 5], ""output"": None},
    {""input"": [""getNewsFeed"", 4], ""output"": [10]},
    {""input"": [""postTweet"", 7, 16], ""output"": None},
    {""input"": [""getNewsFeed"", 6], ""output"": [14]},
]

twitter = Twitter()
for test in params:
    expected_output = test['output']
    got_output = None
    if test['input'][0] == ""postTweet"":
        got_output = twitter.postTweet(test['input'][1], test['input'][2])
    elif test['input'][0] == ""getNewsFeed"":
        got_output = twitter.getNewsFeed(test['input'][1])
    elif test['input'][0] == ""follow"":
        got_output = twitter.follow(test['input'][1], test['input'][2])
    elif test['input'][0] == ""unfollow"":
        got_output = twitter.unfollow(test['input'][1], test['input'][2])
    if got_output == expected_output:
        print(f""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. input: {test['input']} expected output {expected_output} but got {got_output}"")","let params = [
    {""input"": [""postTweet"", 1, 5], ""output"": undefined},
    {""input"": [""getNewsFeed"", 1], ""output"": [5]},
    {""input"": [""follow"", 1, 2], ""output"": undefined},
    {""input"": [""postTweet"", 2, 6], ""output"": undefined},
    {""input"": [""getNewsFeed"", 1], ""output"": [6, 5]},
    {""input"": [""unfollow"", 1, 2], ""output"": undefined},
    {""input"": [""getNewsFeed"", 1], ""output"": [5]},
    {""input"": [""postTweet"", 3, 8], ""output"": undefined},
    {""input"": [""getNewsFeed"", 2], ""output"": [6]},
    {""input"": [""follow"", 2, 3], ""output"": undefined},
    {""input"": [""postTweet"", 4, 10], ""output"": undefined},
    {""input"": [""getNewsFeed"", 3], ""output"": [8]},
    {""input"": [""unfollow"", 2, 3], ""output"": undefined},
    {""input"": [""getNewsFeed"", 2], ""output"": [6]},
    {""input"": [""postTweet"", 5, 12], ""output"": undefined},
    {""input"": [""getNewsFeed"", 4], ""output"": [10]},
    {""input"": [""follow"", 4, 5], ""output"": undefined},
    {""input"": [""postTweet"", 6, 14], ""output"": undefined},
    {""input"": [""getNewsFeed"", 5], ""output"": [12]},
    {""input"": [""unfollow"", 4, 5], ""output"": undefined},
    {""input"": [""getNewsFeed"", 4], ""output"": [10]},
    {""input"": [""postTweet"", 7, 16], ""output"": undefined},
    {""input"": [""getNewsFeed"", 6], ""output"": [14]},
]

let twitter = new Twitter();
for (let test of params) {
    let expected_output = test['output'];
    let got_output = null;
    if (test['input'][0] === ""postTweet"") {
        got_output = twitter.postTweet(test['input'][1], test['input'][2]);
    } else if (test['input'][0] === ""getNewsFeed"") {
        got_output = twitter.getNewsFeed(test['input'][1]);
    } else if (test['input'][0] === ""follow"") {
        got_output = twitter.follow(test['input'][1], test['input'][2]);
    } else if (test['input'][0] === ""unfollow"") {
        got_output = twitter.unfollow(test['input'][1], test['input'][2]);
    }
    if (JSON.stringify(got_output) === JSON.stringify(expected_output)) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. input: ${JSON.stringify(test['input'])} expected output ${JSON.stringify(expected_output)} but got ${JSON.stringify(got_output)}`);
    }
}",,
63b598598ad4593d6b7b022f,find-median-from-data-stream,"params = [
    {""input"": [""addNum"", 1], ""output"": None},
    {""input"": [""addNum"", 2], ""output"": None},
    {""input"": [""findMedian""], ""output"": 1.5},
    {""input"": [""addNum"", 3], ""output"": None},
    {""input"": [""findMedian""], ""output"": 2.0},
    {""input"": [""addNum"", -5], ""output"": None},
    {""input"": [""findMedian""], ""output"": 1.5},
    {""input"": [""addNum"", -3], ""output"": None},
    {""input"": [""addNum"", -1], ""output"": None},
    {""input"": [""findMedian""], ""output"": 0},
    {""input"": [""addNum"", 4], ""output"": None},
    {""input"": [""addNum"", -2], ""output"": None},
    {""input"": [""findMedian""], ""output"": 0},
    {""input"": [""addNum"", 8], ""output"": None},
    {""input"": [""findMedian""], ""output"": 1},
    {""input"": [""addNum"", 0], ""output"": None},
    {""input"": [""findMedian""], ""output"": 0.5},
    {""input"": [""addNum"", -7], ""output"": None},
    {""input"": [""findMedian""], ""output"": 0},
    {""input"": [""addNum"", -6], ""output"": None},
    {""input"": [""findMedian""], ""output"": -0.5},
    {""input"": [""addNum"", 9], ""output"": None},
    {""input"": [""addNum"", -4], ""output"": None},
    {""input"": [""findMedian""], ""output"": -0.5},
    {""input"": [""addNum"", 6], ""output"": None},
    {""input"": [""findMedian""], ""output"": 0},
    {""input"": [""addNum"", 2], ""output"": None},
    {""input"": [""findMedian""], ""output"": 0.5},
    {""input"": [""addNum"", -1], ""output"": None},
    {""input"": [""findMedian""], ""output"": 0},
    {""input"": [""addNum"", 10], ""output"": None},
    {""input"": [""findMedian""], ""output"": 0.5},
    {""input"": [""addNum"", -8], ""output"": None},
    {""input"": [""findMedian""], ""output"": 0},
    {""input"": [""addNum"", 7], ""output"": None},
    {""input"": [""findMedian""], ""output"": 0.5},
    {""input"": [""addNum"", -11], ""output"": None},
    {""input"": [""findMedian""], ""output"": 0},
    {""input"": [""addNum"", 5], ""output"": None},
    {""input"": [""findMedian""], ""output"": 0.5},
    {""input"": [""addNum"", -15], ""output"": None},
    {""input"": [""findMedian""], ""output"": 0},
]

median = MedianFinder()
for i in range(len(params)):
    test = params[i]
    result = None
    if test['input'][0] == ""addNum"":
        result = median.addNum(test['input'][1])
    elif test['input'][0] == ""findMedian"":
        result = median.findMedian()
    if result == test['output']:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. input: {test['input']} expected output {test['output']} but got {result}"")","let params = [
    {""input"": [""addNum"", 1], ""output"": undefined},
    {""input"": [""addNum"", 2], ""output"": undefined},
    {""input"": [""findMedian""], ""output"": 1.5},
    {""input"": [""addNum"", 3], ""output"": undefined},
    {""input"": [""findMedian""], ""output"": 2.0},
    {""input"": [""addNum"", -5], ""output"": undefined},
    {""input"": [""findMedian""], ""output"": 1.5},
    {""input"": [""addNum"", -3], ""output"": undefined},
    {""input"": [""addNum"", -1], ""output"": undefined},
    {""input"": [""findMedian""], ""output"": 0},
    {""input"": [""addNum"", 4], ""output"": undefined},
    {""input"": [""addNum"", -2], ""output"": undefined},
    {""input"": [""findMedian""], ""output"": 0},
    {""input"": [""addNum"", 8], ""output"": undefined},
    {""input"": [""findMedian""], ""output"": 1},
    {""input"": [""addNum"", 0], ""output"": undefined},
    {""input"": [""findMedian""], ""output"": 0.5},
    {""input"": [""addNum"", -7], ""output"": undefined},
    {""input"": [""findMedian""], ""output"": 0},
    {""input"": [""addNum"", -6], ""output"": undefined},
    {""input"": [""findMedian""], ""output"": -0.5},
    {""input"": [""addNum"", 9], ""output"": undefined},
    {""input"": [""addNum"", -4], ""output"": undefined},
    {""input"": [""findMedian""], ""output"": -0.5},
    {""input"": [""addNum"", 6], ""output"": undefined},
    {""input"": [""findMedian""], ""output"": 0},
    {""input"": [""addNum"", 2], ""output"": undefined},
    {""input"": [""findMedian""], ""output"": 0.5},
    {""input"": [""addNum"", -1], ""output"": undefined},
    {""input"": [""findMedian""], ""output"": 0},
    {""input"": [""addNum"", 10], ""output"": undefined},
    {""input"": [""findMedian""], ""output"": 0.5},
    {""input"": [""addNum"", -8], ""output"": undefined},
    {""input"": [""findMedian""], ""output"": 0},
    {""input"": [""addNum"", 7], ""output"": undefined},
    {""input"": [""findMedian""], ""output"": 0.5},
    {""input"": [""addNum"", -11], ""output"": undefined},
    {""input"": [""findMedian""], ""output"": 0},
    {""input"": [""addNum"", 5], ""output"": undefined},
    {""input"": [""findMedian""], ""output"": 0.5},
    {""input"": [""addNum"", -15], ""output"": undefined},
    {""input"": [""findMedian""], ""output"": 0},
]

let median = new MedianFinder();
for (let i = 0; i < params.length; i++) {
    let test = params[i];
    let result = undefined
    if (test['input'][0] === ""addNum"") {
        result = median.addNum(test['input'][1])
    } else if (test['input'][0] === ""findMedian"") {
        result = median.findMedian()
    }
    if (result === test['output']) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. input: ${JSON.stringify(test['input'])} expected output ${JSON.stringify(test['output'])} but got ${JSON.stringify(result)}`)
    }
}",,
63b5985a8ad4593d6b7b0230,subsets,"params = [    
    {""input"": [[1,2,3]], ""output"": [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]},
    {""input"": [[0]], ""output"": [[],[0]]},
    {""input"": [[]], ""output"": [[]]},
    {""input"": [[1,2,3,4]], ""output"": [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3],[4],[1,4],[2,4],[1,2,4],[3,4],[1,3,4],[2,3,4],[1,2,3,4]]},
    {""input"": [[-1,0,1]], ""output"": [[],[-1],[0],[-1,0],[1],[-1,1],[0,1],[-1,0,1]]},
    {""input"": [[1,1,2,2]], ""output"": [[],[1],[1,1],[1,2],[1,1,2],[1,2,2],[1,1,2,2],[2],[2,2]]},
    {""input"": [[1,2,3,4,5]], ""output"": [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3],[4],[1,4],[2,4],[1,2,4],[3,4],[1,3,4],[2,3,4],[1,2,3,4],[5],[1,5],[2,5],[1,2,5],[3,5],[1,3,5],[2,3,5],[1,2,3,5],[4,5],[1,4,5],[2,4,5],[1,2,4,5],[3,4,5],[1,3,4,5],[2,3,4,5],[1,2,3,4,5]]},
    {""input"": [[-5,-4,-3,-2,-1,0,1,2,4,5]], ""output"": [[-5, -4, -3, -2, -1, 0, 1, 2, 4, 5], [-5, -4, -3, -2, -1, 0, 1, 2, 4], [-5, -4, -3, -2, -1, 0, 1, 2, 5], [-5, -4, -3, -2, -1, 0, 1, 2], [-5, -4, -3, -2, -1, 0, 1, 4, 5], [-5, -4, -3, -2, -1, 0, 1, 4], [-5, -4, -3, -2, -1, 0, 1, 5], [-5, -4, -3, -2, -1, 0, 1], [-5, -4, -3, -2, -1, 0, 2, 4, 5], [-5, -4, -3, -2, -1, 0, 2, 4], [-5, -4, -3, -2, -1, 0, 2, 5], [-5, -4, -3, -2, -1, 0, 2], [-5, -4, -3, -2, -1, 0, 4, 5], [-5, -4, -3, -2, -1, 0, 4], [-5, -4, -3, -2, -1, 0, 5], [-5, -4, -3, -2, -1, 0], [-5, -4, -3, -2, -1, 1, 2, 4, 5], [-5, -4, -3, -2, -1, 1, 2, 4], [-5, -4, -3, -2, -1, 1, 2, 5], [-5, -4, -3, -2, -1, 1, 2], [-5, -4, -3, -2, -1, 1, 4, 5], [-5, -4, -3, -2, -1, 1, 4], [-5, -4, -3, -2, -1, 1, 5], [-5, -4, -3, -2, -1, 1], [-5, -4, -3, -2, -1, 2, 4, 5], [-5, -4, -3, -2, -1, 2, 4], [-5, -4, -3, -2, -1, 2, 5], [-5, -4, -3, -2, -1, 2], [-5, -4, -3, -2, -1, 4, 5], [-5, -4, -3, -2, -1, 4], [-5, -4, -3, -2, -1, 5], [-5, -4, -3, -2, -1], [-5, -4, -3, -2, 0, 1, 2, 4, 5], [-5, -4, -3, -2, 0, 1, 2, 4], [-5, -4, -3, -2, 0, 1, 2, 5], [-5, -4, -3, -2, 0, 1, 2], [-5, -4, -3, -2, 0, 1, 4, 5], [-5, -4, -3, -2, 0, 1, 4], [-5, -4, -3, -2, 0, 1, 5], [-5, -4, -3, -2, 0, 1], [-5, -4, -3, -2, 0, 2, 4, 5], [-5, -4, -3, -2, 0, 2, 4], [-5, -4, -3, -2, 0, 2, 5], [-5, -4, -3, -2, 0, 2], [-5, -4, -3, -2, 0, 4, 5], [-5, -4, -3, -2, 0, 4], [-5, -4, -3, -2, 0, 5], [-5, -4, -3, -2, 0], [-5, -4, -3, -2, 1, 2, 4, 5], [-5, -4, -3, -2, 1, 2, 4], [-5, -4, -3, -2, 1, 2, 5], [-5, -4, -3, -2, 1, 2], [-5, -4, -3, -2, 1, 4, 5], [-5, -4, -3, -2, 1, 4], [-5, -4, -3, -2, 1, 5], [-5, -4, -3, -2, 1], [-5, -4, -3, -2, 2, 4, 5], [-5, -4, -3, -2, 2, 4], [-5, -4, -3, -2, 2, 5], [-5, -4, -3, -2, 2], [-5, -4, -3, -2, 4, 5], [-5, -4, -3, -2, 4], [-5, -4, -3, -2, 5], [-5, -4, -3, -2], [-5, -4, -3, -1, 0, 1, 2, 4, 5], [-5, -4, -3, -1, 0, 1, 2, 4], [-5, -4, -3, -1, 0, 1, 2, 5], [-5, -4, -3, -1, 0, 1, 2], [-5, -4, -3, -1, 0, 1, 4, 5], [-5, -4, -3, -1, 0, 1, 4], [-5, -4, -3, -1, 0, 1, 5], [-5, -4, -3, -1, 0, 1], [-5, -4, -3, -1, 0, 2, 4, 5], [-5, -4, -3, -1, 0, 2, 4], [-5, -4, -3, -1, 0, 2, 5], [-5, -4, -3, -1, 0, 2], [-5, -4, -3, -1, 0, 4, 5], [-5, -4, -3, -1, 0, 4], [-5, -4, -3, -1, 0, 5], [-5, -4, -3, -1, 0], [-5, -4, -3, -1, 1, 2, 4, 5], [-5, -4, -3, -1, 1, 2, 4], [-5, -4, -3, -1, 1, 2, 5], [-5, -4, -3, -1, 1, 2], [-5, -4, -3, -1, 1, 4, 5], [-5, -4, -3, -1, 1, 4], [-5, -4, -3, -1, 1, 5], [-5, -4, -3, -1, 1], [-5, -4, -3, -1, 2, 4, 5], [-5, -4, -3, -1, 2, 4], [-5, -4, -3, -1, 2, 5], [-5, -4, -3, -1, 2], [-5, -4, -3, -1, 4, 5], [-5, -4, -3, -1, 4], [-5, -4, -3, -1, 5], [-5, -4, -3, -1], [-5, -4, -3, 0, 1, 2, 4, 5], [-5, -4, -3, 0, 1, 2, 4], [-5, -4, -3, 0, 1, 2, 5], [-5, -4, -3, 0, 1, 2], [-5, -4, -3, 0, 1, 4, 5], [-5, -4, -3, 0, 1, 4], [-5, -4, -3, 0, 1, 5], [-5, -4, -3, 0, 1], [-5, -4, -3, 0, 2, 4, 5], [-5, -4, -3, 0, 2, 4], [-5, -4, -3, 0, 2, 5], [-5, -4, -3, 0, 2], [-5, -4, -3, 0, 4, 5], [-5, -4, -3, 0, 4], [-5, -4, -3, 0, 5], [-5, -4, -3, 0], [-5, -4, -3, 1, 2, 4, 5], [-5, -4, -3, 1, 2, 4], [-5, -4, -3, 1, 2, 5], [-5, -4, -3, 1, 2], [-5, -4, -3, 1, 4, 5], [-5, -4, -3, 1, 4], [-5, -4, -3, 1, 5], [-5, -4, -3, 1], [-5, -4, -3, 2, 4, 5], [-5, -4, -3, 2, 4], [-5, -4, -3, 2, 5], [-5, -4, -3, 2], [-5, -4, -3, 4, 5], [-5, -4, -3, 4], [-5, -4, -3, 5], [-5, -4, -3], [-5, -4, -2, -1, 0, 1, 2, 4, 5], [-5, -4, -2, -1, 0, 1, 2, 4], [-5, -4, -2, -1, 0, 1, 2, 5], [-5, -4, -2, -1, 0, 1, 2], [-5, -4, -2, -1, 0, 1, 4, 5], [-5, -4, -2, -1, 0, 1, 4], [-5, -4, -2, -1, 0, 1, 5], [-5, -4, -2, -1, 0, 1], [-5, -4, -2, -1, 0, 2, 4, 5], [-5, -4, -2, -1, 0, 2, 4], [-5, -4, -2, -1, 0, 2, 5], [-5, -4, -2, -1, 0, 2], [-5, -4, -2, -1, 0, 4, 5], [-5, -4, -2, -1, 0, 4], [-5, -4, -2, -1, 0, 5], [-5, -4, -2, -1, 0], [-5, -4, -2, -1, 1, 2, 4, 5], [-5, -4, -2, -1, 1, 2, 4], [-5, -4, -2, -1, 1, 2, 5], [-5, -4, -2, -1, 1, 2], [-5, -4, -2, -1, 1, 4, 5], [-5, -4, -2, -1, 1, 4], [-5, -4, -2, -1, 1, 5], [-5, -4, -2, -1, 1], [-5, -4, -2, -1, 2, 4, 5], [-5, -4, -2, -1, 2, 4], [-5, -4, -2, -1, 2, 5], [-5, -4, -2, -1, 2], [-5, -4, -2, -1, 4, 5], [-5, -4, -2, -1, 4], [-5, -4, -2, -1, 5], [-5, -4, -2, -1], [-5, -4, -2, 0, 1, 2, 4, 5], [-5, -4, -2, 0, 1, 2, 4], [-5, -4, -2, 0, 1, 2, 5], [-5, -4, -2, 0, 1, 2], [-5, -4, -2, 0, 1, 4, 5], [-5, -4, -2, 0, 1, 4], [-5, -4, -2, 0, 1, 5], [-5, -4, -2, 0, 1], [-5, -4, -2, 0, 2, 4, 5], [-5, -4, -2, 0, 2, 4], [-5, -4, -2, 0, 2, 5], [-5, -4, -2, 0, 2], [-5, -4, -2, 0, 4, 5], [-5, -4, -2, 0, 4], [-5, -4, -2, 0, 5], [-5, -4, -2, 0], [-5, -4, -2, 1, 2, 4, 5], [-5, -4, -2, 1, 2, 4], [-5, -4, -2, 1, 2, 5], [-5, -4, -2, 1, 2], [-5, -4, -2, 1, 4, 5], [-5, -4, -2, 1, 4], [-5, -4, -2, 1, 5], [-5, -4, -2, 1], [-5, -4, -2, 2, 4, 5], [-5, -4, -2, 2, 4], [-5, -4, -2, 2, 5], [-5, -4, -2, 2], [-5, -4, -2, 4, 5], [-5, -4, -2, 4], [-5, -4, -2, 5], [-5, -4, -2], [-5, -4, -1, 0, 1, 2, 4, 5], [-5, -4, -1, 0, 1, 2, 4], [-5, -4, -1, 0, 1, 2, 5], [-5, -4, -1, 0, 1, 2], [-5, -4, -1, 0, 1, 4, 5], [-5, -4, -1, 0, 1, 4], [-5, -4, -1, 0, 1, 5], [-5, -4, -1, 0, 1], [-5, -4, -1, 0, 2, 4, 5], [-5, -4, -1, 0, 2, 4], [-5, -4, -1, 0, 2, 5], [-5, -4, -1, 0, 2], [-5, -4, -1, 0, 4, 5], [-5, -4, -1, 0, 4], [-5, -4, -1, 0, 5], [-5, -4, -1, 0], [-5, -4, -1, 1, 2, 4, 5], [-5, -4, -1, 1, 2, 4], [-5, -4, -1, 1, 2, 5], [-5, -4, -1, 1, 2], [-5, -4, -1, 1, 4, 5], [-5, -4, -1, 1, 4], [-5, -4, -1, 1, 5], [-5, -4, -1, 1], [-5, -4, -1, 2, 4, 5], [-5, -4, -1, 2, 4], [-5, -4, -1, 2, 5], [-5, -4, -1, 2], [-5, -4, -1, 4, 5], [-5, -4, -1, 4], [-5, -4, -1, 5], [-5, -4, -1], [-5, -4, 0, 1, 2, 4, 5], [-5, -4, 0, 1, 2, 4], [-5, -4, 0, 1, 2, 5], [-5, -4, 0, 1, 2], [-5, -4, 0, 1, 4, 5], [-5, -4, 0, 1, 4], [-5, -4, 0, 1, 5], [-5, -4, 0, 1], [-5, -4, 0, 2, 4, 5], [-5, -4, 0, 2, 4], [-5, -4, 0, 2, 5], [-5, -4, 0, 2], [-5, -4, 0, 4, 5], [-5, -4, 0, 4], [-5, -4, 0, 5], [-5, -4, 0], [-5, -4, 1, 2, 4, 5], [-5, -4, 1, 2, 4], [-5, -4, 1, 2, 5], [-5, -4, 1, 2], [-5, -4, 1, 4, 5], [-5, -4, 1, 4], [-5, -4, 1, 5], [-5, -4, 1], [-5, -4, 2, 4, 5], [-5, -4, 2, 4], [-5, -4, 2, 5], [-5, -4, 2], [-5, -4, 4, 5], [-5, -4, 4], [-5, -4, 5], [-5, -4], [-5, -3, -2, -1, 0, 1, 2, 4, 5], [-5, -3, -2, -1, 0, 1, 2, 4], [-5, -3, -2, -1, 0, 1, 2, 5], [-5, -3, -2, -1, 0, 1, 2], [-5, -3, -2, -1, 0, 1, 4, 5], [-5, -3, -2, -1, 0, 1, 4], [-5, -3, -2, -1, 0, 1, 5], [-5, -3, -2, -1, 0, 1], [-5, -3, -2, -1, 0, 2, 4, 5], [-5, -3, -2, -1, 0, 2, 4], [-5, -3, -2, -1, 0, 2, 5], [-5, -3, -2, -1, 0, 2], [-5, -3, -2, -1, 0, 4, 5], [-5, -3, -2, -1, 0, 4], [-5, -3, -2, -1, 0, 5], [-5, -3, -2, -1, 0], [-5, -3, -2, -1, 1, 2, 4, 5], [-5, -3, -2, -1, 1, 2, 4], [-5, -3, -2, -1, 1, 2, 5], [-5, -3, -2, -1, 1, 2], [-5, -3, -2, -1, 1, 4, 5], [-5, -3, -2, -1, 1, 4], [-5, -3, -2, -1, 1, 5], [-5, -3, -2, -1, 1], [-5, -3, -2, -1, 2, 4, 5], [-5, -3, -2, -1, 2, 4], [-5, -3, -2, -1, 2, 5], [-5, -3, -2, -1, 2], [-5, -3, -2, -1, 4, 5], [-5, -3, -2, -1, 4], [-5, -3, -2, -1, 5], [-5, -3, -2, -1], [-5, -3, -2, 0, 1, 2, 4, 5], [-5, -3, -2, 0, 1, 2, 4], [-5, -3, -2, 0, 1, 2, 5], [-5, -3, -2, 0, 1, 2], [-5, -3, -2, 0, 1, 4, 5], [-5, -3, -2, 0, 1, 4], [-5, -3, -2, 0, 1, 5], [-5, -3, -2, 0, 1], [-5, -3, -2, 0, 2, 4, 5], [-5, -3, -2, 0, 2, 4], [-5, -3, -2, 0, 2, 5], [-5, -3, -2, 0, 2], [-5, -3, -2, 0, 4, 5], [-5, -3, -2, 0, 4], [-5, -3, -2, 0, 5], [-5, -3, -2, 0], [-5, -3, -2, 1, 2, 4, 5], [-5, -3, -2, 1, 2, 4], [-5, -3, -2, 1, 2, 5], [-5, -3, -2, 1, 2], [-5, -3, -2, 1, 4, 5], [-5, -3, -2, 1, 4], [-5, -3, -2, 1, 5], [-5, -3, -2, 1], [-5, -3, -2, 2, 4, 5], [-5, -3, -2, 2, 4], [-5, -3, -2, 2, 5], [-5, -3, -2, 2], [-5, -3, -2, 4, 5], [-5, -3, -2, 4], [-5, -3, -2, 5], [-5, -3, -2], [-5, -3, -1, 0, 1, 2, 4, 5], [-5, -3, -1, 0, 1, 2, 4], [-5, -3, -1, 0, 1, 2, 5], [-5, -3, -1, 0, 1, 2], [-5, -3, -1, 0, 1, 4, 5], [-5, -3, -1, 0, 1, 4], [-5, -3, -1, 0, 1, 5], [-5, -3, -1, 0, 1], [-5, -3, -1, 0, 2, 4, 5], [-5, -3, -1, 0, 2, 4], [-5, -3, -1, 0, 2, 5], [-5, -3, -1, 0, 2], [-5, -3, -1, 0, 4, 5], [-5, -3, -1, 0, 4], [-5, -3, -1, 0, 5], [-5, -3, -1, 0], [-5, -3, -1, 1, 2, 4, 5], [-5, -3, -1, 1, 2, 4], [-5, -3, -1, 1, 2, 5], [-5, -3, -1, 1, 2], [-5, -3, -1, 1, 4, 5], [-5, -3, -1, 1, 4], [-5, -3, -1, 1, 5], [-5, -3, -1, 1], [-5, -3, -1, 2, 4, 5], [-5, -3, -1, 2, 4], [-5, -3, -1, 2, 5], [-5, -3, -1, 2], [-5, -3, -1, 4, 5], [-5, -3, -1, 4], [-5, -3, -1, 5], [-5, -3, -1], [-5, -3, 0, 1, 2, 4, 5], [-5, -3, 0, 1, 2, 4], [-5, -3, 0, 1, 2, 5], [-5, -3, 0, 1, 2], [-5, -3, 0, 1, 4, 5], [-5, -3, 0, 1, 4], [-5, -3, 0, 1, 5], [-5, -3, 0, 1], [-5, -3, 0, 2, 4, 5], [-5, -3, 0, 2, 4], [-5, -3, 0, 2, 5], [-5, -3, 0, 2], [-5, -3, 0, 4, 5], [-5, -3, 0, 4], [-5, -3, 0, 5], [-5, -3, 0], [-5, -3, 1, 2, 4, 5], [-5, -3, 1, 2, 4], [-5, -3, 1, 2, 5], [-5, -3, 1, 2], [-5, -3, 1, 4, 5], [-5, -3, 1, 4], [-5, -3, 1, 5], [-5, -3, 1], [-5, -3, 2, 4, 5], [-5, -3, 2, 4], [-5, -3, 2, 5], [-5, -3, 2], [-5, -3, 4, 5], [-5, -3, 4], [-5, -3, 5], [-5, -3], [-5, -2, -1, 0, 1, 2, 4, 5], [-5, -2, -1, 0, 1, 2, 4], [-5, -2, -1, 0, 1, 2, 5], [-5, -2, -1, 0, 1, 2], [-5, -2, -1, 0, 1, 4, 5], [-5, -2, -1, 0, 1, 4], [-5, -2, -1, 0, 1, 5], [-5, -2, -1, 0, 1], [-5, -2, -1, 0, 2, 4, 5], [-5, -2, -1, 0, 2, 4], [-5, -2, -1, 0, 2, 5], [-5, -2, -1, 0, 2], [-5, -2, -1, 0, 4, 5], [-5, -2, -1, 0, 4], [-5, -2, -1, 0, 5], [-5, -2, -1, 0], [-5, -2, -1, 1, 2, 4, 5], [-5, -2, -1, 1, 2, 4], [-5, -2, -1, 1, 2, 5], [-5, -2, -1, 1, 2], [-5, -2, -1, 1, 4, 5], [-5, -2, -1, 1, 4], [-5, -2, -1, 1, 5], [-5, -2, -1, 1], [-5, -2, -1, 2, 4, 5], [-5, -2, -1, 2, 4], [-5, -2, -1, 2, 5], [-5, -2, -1, 2], [-5, -2, -1, 4, 5], [-5, -2, -1, 4], [-5, -2, -1, 5], [-5, -2, -1], [-5, -2, 0, 1, 2, 4, 5], [-5, -2, 0, 1, 2, 4], [-5, -2, 0, 1, 2, 5], [-5, -2, 0, 1, 2], [-5, -2, 0, 1, 4, 5], [-5, -2, 0, 1, 4], [-5, -2, 0, 1, 5], [-5, -2, 0, 1], [-5, -2, 0, 2, 4, 5], [-5, -2, 0, 2, 4], [-5, -2, 0, 2, 5], [-5, -2, 0, 2], [-5, -2, 0, 4, 5], [-5, -2, 0, 4], [-5, -2, 0, 5], [-5, -2, 0], [-5, -2, 1, 2, 4, 5], [-5, -2, 1, 2, 4], [-5, -2, 1, 2, 5], [-5, -2, 1, 2], [-5, -2, 1, 4, 5], [-5, -2, 1, 4], [-5, -2, 1, 5], [-5, -2, 1], [-5, -2, 2, 4, 5], [-5, -2, 2, 4], [-5, -2, 2, 5], [-5, -2, 2], [-5, -2, 4, 5], [-5, -2, 4], [-5, -2, 5], [-5, -2], [-5, -1, 0, 1, 2, 4, 5], [-5, -1, 0, 1, 2, 4], [-5, -1, 0, 1, 2, 5], [-5, -1, 0, 1, 2], [-5, -1, 0, 1, 4, 5], [-5, -1, 0, 1, 4], [-5, -1, 0, 1, 5], [-5, -1, 0, 1], [-5, -1, 0, 2, 4, 5], [-5, -1, 0, 2, 4], [-5, -1, 0, 2, 5], [-5, -1, 0, 2], [-5, -1, 0, 4, 5], [-5, -1, 0, 4], [-5, -1, 0, 5], [-5, -1, 0], [-5, -1, 1, 2, 4, 5], [-5, -1, 1, 2, 4], [-5, -1, 1, 2, 5], [-5, -1, 1, 2], [-5, -1, 1, 4, 5], [-5, -1, 1, 4], [-5, -1, 1, 5], [-5, -1, 1], [-5, -1, 2, 4, 5], [-5, -1, 2, 4], [-5, -1, 2, 5], [-5, -1, 2], [-5, -1, 4, 5], [-5, -1, 4], [-5, -1, 5], [-5, -1], [-5, 0, 1, 2, 4, 5], [-5, 0, 1, 2, 4], [-5, 0, 1, 2, 5], [-5, 0, 1, 2], [-5, 0, 1, 4, 5], [-5, 0, 1, 4], [-5, 0, 1, 5], [-5, 0, 1], [-5, 0, 2, 4, 5], [-5, 0, 2, 4], [-5, 0, 2, 5], [-5, 0, 2], [-5, 0, 4, 5], [-5, 0, 4], [-5, 0, 5], [-5, 0], [-5, 1, 2, 4, 5], [-5, 1, 2, 4], [-5, 1, 2, 5], [-5, 1, 2], [-5, 1, 4, 5], [-5, 1, 4], [-5, 1, 5], [-5, 1], [-5, 2, 4, 5], [-5, 2, 4], [-5, 2, 5], [-5, 2], [-5, 4, 5], [-5, 4], [-5, 5], [-5], [-4, -3, -2, -1, 0, 1, 2, 4, 5], [-4, -3, -2, -1, 0, 1, 2, 4], [-4, -3, -2, -1, 0, 1, 2, 5], [-4, -3, -2, -1, 0, 1, 2], [-4, -3, -2, -1, 0, 1, 4, 5], [-4, -3, -2, -1, 0, 1, 4], [-4, -3, -2, -1, 0, 1, 5], [-4, -3, -2, -1, 0, 1], [-4, -3, -2, -1, 0, 2, 4, 5], [-4, -3, -2, -1, 0, 2, 4], [-4, -3, -2, -1, 0, 2, 5], [-4, -3, -2, -1, 0, 2], [-4, -3, -2, -1, 0, 4, 5], [-4, -3, -2, -1, 0, 4], [-4, -3, -2, -1, 0, 5], [-4, -3, -2, -1, 0], [-4, -3, -2, -1, 1, 2, 4, 5], [-4, -3, -2, -1, 1, 2, 4], [-4, -3, -2, -1, 1, 2, 5], [-4, -3, -2, -1, 1, 2], [-4, -3, -2, -1, 1, 4, 5], [-4, -3, -2, -1, 1, 4], [-4, -3, -2, -1, 1, 5], [-4, -3, -2, -1, 1], [-4, -3, -2, -1, 2, 4, 5], [-4, -3, -2, -1, 2, 4], [-4, -3, -2, -1, 2, 5], [-4, -3, -2, -1, 2], [-4, -3, -2, -1, 4, 5], [-4, -3, -2, -1, 4], [-4, -3, -2, -1, 5], [-4, -3, -2, -1], [-4, -3, -2, 0, 1, 2, 4, 5], [-4, -3, -2, 0, 1, 2, 4], [-4, -3, -2, 0, 1, 2, 5], [-4, -3, -2, 0, 1, 2], [-4, -3, -2, 0, 1, 4, 5], [-4, -3, -2, 0, 1, 4], [-4, -3, -2, 0, 1, 5], [-4, -3, -2, 0, 1], [-4, -3, -2, 0, 2, 4, 5], [-4, -3, -2, 0, 2, 4], [-4, -3, -2, 0, 2, 5], [-4, -3, -2, 0, 2], [-4, -3, -2, 0, 4, 5], [-4, -3, -2, 0, 4], [-4, -3, -2, 0, 5], [-4, -3, -2, 0], [-4, -3, -2, 1, 2, 4, 5], [-4, -3, -2, 1, 2, 4], [-4, -3, -2, 1, 2, 5], [-4, -3, -2, 1, 2], [-4, -3, -2, 1, 4, 5], [-4, -3, -2, 1, 4], [-4, -3, -2, 1, 5], [-4, -3, -2, 1], [-4, -3, -2, 2, 4, 5], [-4, -3, -2, 2, 4], [-4, -3, -2, 2, 5], [-4, -3, -2, 2], [-4, -3, -2, 4, 5], [-4, -3, -2, 4], [-4, -3, -2, 5], [-4, -3, -2], [-4, -3, -1, 0, 1, 2, 4, 5], [-4, -3, -1, 0, 1, 2, 4], [-4, -3, -1, 0, 1, 2, 5], [-4, -3, -1, 0, 1, 2], [-4, -3, -1, 0, 1, 4, 5], [-4, -3, -1, 0, 1, 4], [-4, -3, -1, 0, 1, 5], [-4, -3, -1, 0, 1], [-4, -3, -1, 0, 2, 4, 5], [-4, -3, -1, 0, 2, 4], [-4, -3, -1, 0, 2, 5], [-4, -3, -1, 0, 2], [-4, -3, -1, 0, 4, 5], [-4, -3, -1, 0, 4], [-4, -3, -1, 0, 5], [-4, -3, -1, 0], [-4, -3, -1, 1, 2, 4, 5], [-4, -3, -1, 1, 2, 4], [-4, -3, -1, 1, 2, 5], [-4, -3, -1, 1, 2], [-4, -3, -1, 1, 4, 5], [-4, -3, -1, 1, 4], [-4, -3, -1, 1, 5], [-4, -3, -1, 1], [-4, -3, -1, 2, 4, 5], [-4, -3, -1, 2, 4], [-4, -3, -1, 2, 5], [-4, -3, -1, 2], [-4, -3, -1, 4, 5], [-4, -3, -1, 4], [-4, -3, -1, 5], [-4, -3, -1], [-4, -3, 0, 1, 2, 4, 5], [-4, -3, 0, 1, 2, 4], [-4, -3, 0, 1, 2, 5], [-4, -3, 0, 1, 2], [-4, -3, 0, 1, 4, 5], [-4, -3, 0, 1, 4], [-4, -3, 0, 1, 5], [-4, -3, 0, 1], [-4, -3, 0, 2, 4, 5], [-4, -3, 0, 2, 4], [-4, -3, 0, 2, 5], [-4, -3, 0, 2], [-4, -3, 0, 4, 5], [-4, -3, 0, 4], [-4, -3, 0, 5], [-4, -3, 0], [-4, -3, 1, 2, 4, 5], [-4, -3, 1, 2, 4], [-4, -3, 1, 2, 5], [-4, -3, 1, 2], [-4, -3, 1, 4, 5], [-4, -3, 1, 4], [-4, -3, 1, 5], [-4, -3, 1], [-4, -3, 2, 4, 5], [-4, -3, 2, 4], [-4, -3, 2, 5], [-4, -3, 2], [-4, -3, 4, 5], [-4, -3, 4], [-4, -3, 5], [-4, -3], [-4, -2, -1, 0, 1, 2, 4, 5], [-4, -2, -1, 0, 1, 2, 4], [-4, -2, -1, 0, 1, 2, 5], [-4, -2, -1, 0, 1, 2], [-4, -2, -1, 0, 1, 4, 5], [-4, -2, -1, 0, 1, 4], [-4, -2, -1, 0, 1, 5], [-4, -2, -1, 0, 1], [-4, -2, -1, 0, 2, 4, 5], [-4, -2, -1, 0, 2, 4], [-4, -2, -1, 0, 2, 5], [-4, -2, -1, 0, 2], [-4, -2, -1, 0, 4, 5], [-4, -2, -1, 0, 4], [-4, -2, -1, 0, 5], [-4, -2, -1, 0], [-4, -2, -1, 1, 2, 4, 5], [-4, -2, -1, 1, 2, 4], [-4, -2, -1, 1, 2, 5], [-4, -2, -1, 1, 2], [-4, -2, -1, 1, 4, 5], [-4, -2, -1, 1, 4], [-4, -2, -1, 1, 5], [-4, -2, -1, 1], [-4, -2, -1, 2, 4, 5], [-4, -2, -1, 2, 4], [-4, -2, -1, 2, 5], [-4, -2, -1, 2], [-4, -2, -1, 4, 5], [-4, -2, -1, 4], [-4, -2, -1, 5], [-4, -2, -1], [-4, -2, 0, 1, 2, 4, 5], [-4, -2, 0, 1, 2, 4], [-4, -2, 0, 1, 2, 5], [-4, -2, 0, 1, 2], [-4, -2, 0, 1, 4, 5], [-4, -2, 0, 1, 4], [-4, -2, 0, 1, 5], [-4, -2, 0, 1], [-4, -2, 0, 2, 4, 5], [-4, -2, 0, 2, 4], [-4, -2, 0, 2, 5], [-4, -2, 0, 2], [-4, -2, 0, 4, 5], [-4, -2, 0, 4], [-4, -2, 0, 5], [-4, -2, 0], [-4, -2, 1, 2, 4, 5], [-4, -2, 1, 2, 4], [-4, -2, 1, 2, 5], [-4, -2, 1, 2], [-4, -2, 1, 4, 5], [-4, -2, 1, 4], [-4, -2, 1, 5], [-4, -2, 1], [-4, -2, 2, 4, 5], [-4, -2, 2, 4], [-4, -2, 2, 5], [-4, -2, 2], [-4, -2, 4, 5], [-4, -2, 4], [-4, -2, 5], [-4, -2], [-4, -1, 0, 1, 2, 4, 5], [-4, -1, 0, 1, 2, 4], [-4, -1, 0, 1, 2, 5], [-4, -1, 0, 1, 2], [-4, -1, 0, 1, 4, 5], [-4, -1, 0, 1, 4], [-4, -1, 0, 1, 5], [-4, -1, 0, 1], [-4, -1, 0, 2, 4, 5], [-4, -1, 0, 2, 4], [-4, -1, 0, 2, 5], [-4, -1, 0, 2], [-4, -1, 0, 4, 5], [-4, -1, 0, 4], [-4, -1, 0, 5], [-4, -1, 0], [-4, -1, 1, 2, 4, 5], [-4, -1, 1, 2, 4], [-4, -1, 1, 2, 5], [-4, -1, 1, 2], [-4, -1, 1, 4, 5], [-4, -1, 1, 4], [-4, -1, 1, 5], [-4, -1, 1], [-4, -1, 2, 4, 5], [-4, -1, 2, 4], [-4, -1, 2, 5], [-4, -1, 2], [-4, -1, 4, 5], [-4, -1, 4], [-4, -1, 5], [-4, -1], [-4, 0, 1, 2, 4, 5], [-4, 0, 1, 2, 4], [-4, 0, 1, 2, 5], [-4, 0, 1, 2], [-4, 0, 1, 4, 5], [-4, 0, 1, 4], [-4, 0, 1, 5], [-4, 0, 1], [-4, 0, 2, 4, 5], [-4, 0, 2, 4], [-4, 0, 2, 5], [-4, 0, 2], [-4, 0, 4, 5], [-4, 0, 4], [-4, 0, 5], [-4, 0], [-4, 1, 2, 4, 5], [-4, 1, 2, 4], [-4, 1, 2, 5], [-4, 1, 2], [-4, 1, 4, 5], [-4, 1, 4], [-4, 1, 5], [-4, 1], [-4, 2, 4, 5], [-4, 2, 4], [-4, 2, 5], [-4, 2], [-4, 4, 5], [-4, 4], [-4, 5], [-4], [-3, -2, -1, 0, 1, 2, 4, 5], [-3, -2, -1, 0, 1, 2, 4], [-3, -2, -1, 0, 1, 2, 5], [-3, -2, -1, 0, 1, 2], [-3, -2, -1, 0, 1, 4, 5], [-3, -2, -1, 0, 1, 4], [-3, -2, -1, 0, 1, 5], [-3, -2, -1, 0, 1], [-3, -2, -1, 0, 2, 4, 5], [-3, -2, -1, 0, 2, 4], [-3, -2, -1, 0, 2, 5], [-3, -2, -1, 0, 2], [-3, -2, -1, 0, 4, 5], [-3, -2, -1, 0, 4], [-3, -2, -1, 0, 5], [-3, -2, -1, 0], [-3, -2, -1, 1, 2, 4, 5], [-3, -2, -1, 1, 2, 4], [-3, -2, -1, 1, 2, 5], [-3, -2, -1, 1, 2], [-3, -2, -1, 1, 4, 5], [-3, -2, -1, 1, 4], [-3, -2, -1, 1, 5], [-3, -2, -1, 1], [-3, -2, -1, 2, 4, 5], [-3, -2, -1, 2, 4], [-3, -2, -1, 2, 5], [-3, -2, -1, 2], [-3, -2, -1, 4, 5], [-3, -2, -1, 4], [-3, -2, -1, 5], [-3, -2, -1], [-3, -2, 0, 1, 2, 4, 5], [-3, -2, 0, 1, 2, 4], [-3, -2, 0, 1, 2, 5], [-3, -2, 0, 1, 2], [-3, -2, 0, 1, 4, 5], [-3, -2, 0, 1, 4], [-3, -2, 0, 1, 5], [-3, -2, 0, 1], [-3, -2, 0, 2, 4, 5], [-3, -2, 0, 2, 4], [-3, -2, 0, 2, 5], [-3, -2, 0, 2], [-3, -2, 0, 4, 5], [-3, -2, 0, 4], [-3, -2, 0, 5], [-3, -2, 0], [-3, -2, 1, 2, 4, 5], [-3, -2, 1, 2, 4], [-3, -2, 1, 2, 5], [-3, -2, 1, 2], [-3, -2, 1, 4, 5], [-3, -2, 1, 4], [-3, -2, 1, 5], [-3, -2, 1], [-3, -2, 2, 4, 5], [-3, -2, 2, 4], [-3, -2, 2, 5], [-3, -2, 2], [-3, -2, 4, 5], [-3, -2, 4], [-3, -2, 5], [-3, -2], [-3, -1, 0, 1, 2, 4, 5], [-3, -1, 0, 1, 2, 4], [-3, -1, 0, 1, 2, 5], [-3, -1, 0, 1, 2], [-3, -1, 0, 1, 4, 5], [-3, -1, 0, 1, 4], [-3, -1, 0, 1, 5], [-3, -1, 0, 1], [-3, -1, 0, 2, 4, 5], [-3, -1, 0, 2, 4], [-3, -1, 0, 2, 5], [-3, -1, 0, 2], [-3, -1, 0, 4, 5], [-3, -1, 0, 4], [-3, -1, 0, 5], [-3, -1, 0], [-3, -1, 1, 2, 4, 5], [-3, -1, 1, 2, 4], [-3, -1, 1, 2, 5], [-3, -1, 1, 2], [-3, -1, 1, 4, 5], [-3, -1, 1, 4], [-3, -1, 1, 5], [-3, -1, 1], [-3, -1, 2, 4, 5], [-3, -1, 2, 4], [-3, -1, 2, 5], [-3, -1, 2], [-3, -1, 4, 5], [-3, -1, 4], [-3, -1, 5], [-3, -1], [-3, 0, 1, 2, 4, 5], [-3, 0, 1, 2, 4], [-3, 0, 1, 2, 5], [-3, 0, 1, 2], [-3, 0, 1, 4, 5], [-3, 0, 1, 4], [-3, 0, 1, 5], [-3, 0, 1], [-3, 0, 2, 4, 5], [-3, 0, 2, 4], [-3, 0, 2, 5], [-3, 0, 2], [-3, 0, 4, 5], [-3, 0, 4], [-3, 0, 5], [-3, 0], [-3, 1, 2, 4, 5], [-3, 1, 2, 4], [-3, 1, 2, 5], [-3, 1, 2], [-3, 1, 4, 5], [-3, 1, 4], [-3, 1, 5], [-3, 1], [-3, 2, 4, 5], [-3, 2, 4], [-3, 2, 5], [-3, 2], [-3, 4, 5], [-3, 4], [-3, 5], [-3], [-2, -1, 0, 1, 2, 4, 5], [-2, -1, 0, 1, 2, 4], [-2, -1, 0, 1, 2, 5], [-2, -1, 0, 1, 2], [-2, -1, 0, 1, 4, 5], [-2, -1, 0, 1, 4], [-2, -1, 0, 1, 5], [-2, -1, 0, 1], [-2, -1, 0, 2, 4, 5], [-2, -1, 0, 2, 4], [-2, -1, 0, 2, 5], [-2, -1, 0, 2], [-2, -1, 0, 4, 5], [-2, -1, 0, 4], [-2, -1, 0, 5], [-2, -1, 0], [-2, -1, 1, 2, 4, 5], [-2, -1, 1, 2, 4], [-2, -1, 1, 2, 5], [-2, -1, 1, 2], [-2, -1, 1, 4, 5], [-2, -1, 1, 4], [-2, -1, 1, 5], [-2, -1, 1], [-2, -1, 2, 4, 5], [-2, -1, 2, 4], [-2, -1, 2, 5], [-2, -1, 2], [-2, -1, 4, 5], [-2, -1, 4], [-2, -1, 5], [-2, -1], [-2, 0, 1, 2, 4, 5], [-2, 0, 1, 2, 4], [-2, 0, 1, 2, 5], [-2, 0, 1, 2], [-2, 0, 1, 4, 5], [-2, 0, 1, 4], [-2, 0, 1, 5], [-2, 0, 1], [-2, 0, 2, 4, 5], [-2, 0, 2, 4], [-2, 0, 2, 5], [-2, 0, 2], [-2, 0, 4, 5], [-2, 0, 4], [-2, 0, 5], [-2, 0], [-2, 1, 2, 4, 5], [-2, 1, 2, 4], [-2, 1, 2, 5], [-2, 1, 2], [-2, 1, 4, 5], [-2, 1, 4], [-2, 1, 5], [-2, 1], [-2, 2, 4, 5], [-2, 2, 4], [-2, 2, 5], [-2, 2], [-2, 4, 5], [-2, 4], [-2, 5], [-2], [-1, 0, 1, 2, 4, 5], [-1, 0, 1, 2, 4], [-1, 0, 1, 2, 5], [-1, 0, 1, 2], [-1, 0, 1, 4, 5], [-1, 0, 1, 4], [-1, 0, 1, 5], [-1, 0, 1], [-1, 0, 2, 4, 5], [-1, 0, 2, 4], [-1, 0, 2, 5], [-1, 0, 2], [-1, 0, 4, 5], [-1, 0, 4], [-1, 0, 5], [-1, 0], [-1, 1, 2, 4, 5], [-1, 1, 2, 4], [-1, 1, 2, 5], [-1, 1, 2], [-1, 1, 4, 5], [-1, 1, 4], [-1, 1, 5], [-1, 1], [-1, 2, 4, 5], [-1, 2, 4], [-1, 2, 5], [-1, 2], [-1, 4, 5], [-1, 4], [-1, 5], [-1], [0, 1, 2, 4, 5], [0, 1, 2, 4], [0, 1, 2, 5], [0, 1, 2], [0, 1, 4, 5], [0, 1, 4], [0, 1, 5], [0, 1], [0, 2, 4, 5], [0, 2, 4], [0, 2, 5], [0, 2], [0, 4, 5], [0, 4], [0, 5], [0], [1, 2, 4, 5], [1, 2, 4], [1, 2, 5], [1, 2], [1, 4, 5], [1, 4], [1, 5], [1], [2, 4, 5], [2, 4], [2, 5], [2], [4, 5], [4], [5], []]},
    {""input"": [[-521,-34,3,434,101,0,1,2]], ""output"": [[-521, -34, 3, 434, 101, 0, 1, 2], [-521, -34, 3, 434, 101, 0, 1], [-521, -34, 3, 434, 101, 0, 2], [-521, -34, 3, 434, 101, 0], [-521, -34, 3, 434, 101, 1, 2], [-521, -34, 3, 434, 101, 1], [-521, -34, 3, 434, 101, 2], [-521, -34, 3, 434, 101], [-521, -34, 3, 434, 0, 1, 2], [-521, -34, 3, 434, 0, 1], [-521, -34, 3, 434, 0, 2], [-521, -34, 3, 434, 0], [-521, -34, 3, 434, 1, 2], [-521, -34, 3, 434, 1], [-521, -34, 3, 434, 2], [-521, -34, 3, 434], [-521, -34, 3, 101, 0, 1, 2], [-521, -34, 3, 101, 0, 1], [-521, -34, 3, 101, 0, 2], [-521, -34, 3, 101, 0], [-521, -34, 3, 101, 1, 2], [-521, -34, 3, 101, 1], [-521, -34, 3, 101, 2], [-521, -34, 3, 101], [-521, -34, 3, 0, 1, 2], [-521, -34, 3, 0, 1], [-521, -34, 3, 0, 2], [-521, -34, 3, 0], [-521, -34, 3, 1, 2], [-521, -34, 3, 1], [-521, -34, 3, 2], [-521, -34, 3], [-521, -34, 434, 101, 0, 1, 2], [-521, -34, 434, 101, 0, 1], [-521, -34, 434, 101, 0, 2], [-521, -34, 434, 101, 0], [-521, -34, 434, 101, 1, 2], [-521, -34, 434, 101, 1], [-521, -34, 434, 101, 2], [-521, -34, 434, 101], [-521, -34, 434, 0, 1, 2], [-521, -34, 434, 0, 1], [-521, -34, 434, 0, 2], [-521, -34, 434, 0], [-521, -34, 434, 1, 2], [-521, -34, 434, 1], [-521, -34, 434, 2], [-521, -34, 434], [-521, -34, 101, 0, 1, 2], [-521, -34, 101, 0, 1], [-521, -34, 101, 0, 2], [-521, -34, 101, 0], [-521, -34, 101, 1, 2], [-521, -34, 101, 1], [-521, -34, 101, 2], [-521, -34, 101], [-521, -34, 0, 1, 2], [-521, -34, 0, 1], [-521, -34, 0, 2], [-521, -34, 0], [-521, -34, 1, 2], [-521, -34, 1], [-521, -34, 2], [-521, -34], [-521, 3, 434, 101, 0, 1, 2], [-521, 3, 434, 101, 0, 1], [-521, 3, 434, 101, 0, 2], [-521, 3, 434, 101, 0], [-521, 3, 434, 101, 1, 2], [-521, 3, 434, 101, 1], [-521, 3, 434, 101, 2], [-521, 3, 434, 101], [-521, 3, 434, 0, 1, 2], [-521, 3, 434, 0, 1], [-521, 3, 434, 0, 2], [-521, 3, 434, 0], [-521, 3, 434, 1, 2], [-521, 3, 434, 1], [-521, 3, 434, 2], [-521, 3, 434], [-521, 3, 101, 0, 1, 2], [-521, 3, 101, 0, 1], [-521, 3, 101, 0, 2], [-521, 3, 101, 0], [-521, 3, 101, 1, 2], [-521, 3, 101, 1], [-521, 3, 101, 2], [-521, 3, 101], [-521, 3, 0, 1, 2], [-521, 3, 0, 1], [-521, 3, 0, 2], [-521, 3, 0], [-521, 3, 1, 2], [-521, 3, 1], [-521, 3, 2], [-521, 3], [-521, 434, 101, 0, 1, 2], [-521, 434, 101, 0, 1], [-521, 434, 101, 0, 2], [-521, 434, 101, 0], [-521, 434, 101, 1, 2], [-521, 434, 101, 1], [-521, 434, 101, 2], [-521, 434, 101], [-521, 434, 0, 1, 2], [-521, 434, 0, 1], [-521, 434, 0, 2], [-521, 434, 0], [-521, 434, 1, 2], [-521, 434, 1], [-521, 434, 2], [-521, 434], [-521, 101, 0, 1, 2], [-521, 101, 0, 1], [-521, 101, 0, 2], [-521, 101, 0], [-521, 101, 1, 2], [-521, 101, 1], [-521, 101, 2], [-521, 101], [-521, 0, 1, 2], [-521, 0, 1], [-521, 0, 2], [-521, 0], [-521, 1, 2], [-521, 1], [-521, 2], [-521], [-34, 3, 434, 101, 0, 1, 2], [-34, 3, 434, 101, 0, 1], [-34, 3, 434, 101, 0, 2], [-34, 3, 434, 101, 0], [-34, 3, 434, 101, 1, 2], [-34, 3, 434, 101, 1], [-34, 3, 434, 101, 2], [-34, 3, 434, 101], [-34, 3, 434, 0, 1, 2], [-34, 3, 434, 0, 1], [-34, 3, 434, 0, 2], [-34, 3, 434, 0], [-34, 3, 434, 1, 2], [-34, 3, 434, 1], [-34, 3, 434, 2], [-34, 3, 434], [-34, 3, 101, 0, 1, 2], [-34, 3, 101, 0, 1], [-34, 3, 101, 0, 2], [-34, 3, 101, 0], [-34, 3, 101, 1, 2], [-34, 3, 101, 1], [-34, 3, 101, 2], [-34, 3, 101], [-34, 3, 0, 1, 2], [-34, 3, 0, 1], [-34, 3, 0, 2], [-34, 3, 0], [-34, 3, 1, 2], [-34, 3, 1], [-34, 3, 2], [-34, 3], [-34, 434, 101, 0, 1, 2], [-34, 434, 101, 0, 1], [-34, 434, 101, 0, 2], [-34, 434, 101, 0], [-34, 434, 101, 1, 2], [-34, 434, 101, 1], [-34, 434, 101, 2], [-34, 434, 101], [-34, 434, 0, 1, 2], [-34, 434, 0, 1], [-34, 434, 0, 2], [-34, 434, 0], [-34, 434, 1, 2], [-34, 434, 1], [-34, 434, 2], [-34, 434], [-34, 101, 0, 1, 2], [-34, 101, 0, 1], [-34, 101, 0, 2], [-34, 101, 0], [-34, 101, 1, 2], [-34, 101, 1], [-34, 101, 2], [-34, 101], [-34, 0, 1, 2], [-34, 0, 1], [-34, 0, 2], [-34, 0], [-34, 1, 2], [-34, 1], [-34, 2], [-34], [3, 434, 101, 0, 1, 2], [3, 434, 101, 0, 1], [3, 434, 101, 0, 2], [3, 434, 101, 0], [3, 434, 101, 1, 2], [3, 434, 101, 1], [3, 434, 101, 2], [3, 434, 101], [3, 434, 0, 1, 2], [3, 434, 0, 1], [3, 434, 0, 2], [3, 434, 0], [3, 434, 1, 2], [3, 434, 1], [3, 434, 2], [3, 434], [3, 101, 0, 1, 2], [3, 101, 0, 1], [3, 101, 0, 2], [3, 101, 0], [3, 101, 1, 2], [3, 101, 1], [3, 101, 2], [3, 101], [3, 0, 1, 2], [3, 0, 1], [3, 0, 2], [3, 0], [3, 1, 2], [3, 1], [3, 2], [3], [434, 101, 0, 1, 2], [434, 101, 0, 1], [434, 101, 0, 2], [434, 101, 0], [434, 101, 1, 2], [434, 101, 1], [434, 101, 2], [434, 101], [434, 0, 1, 2], [434, 0, 1], [434, 0, 2], [434, 0], [434, 1, 2], [434, 1], [434, 2], [434], [101, 0, 1, 2], [101, 0, 1], [101, 0, 2], [101, 0], [101, 1, 2], [101, 1], [101, 2], [101], [0, 1, 2], [0, 1], [0, 2], [0], [1, 2], [1], [2], []]}
]

s = Solution()
for test in params:
    result = s.subsets(test['input'][0])
    result_set = set([tuple(lst) for lst in result])
    output_set = set([tuple(lst) for lst in test['output']])
    if result_set == output_set:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input: {test['input']} Expected output: {test['output']} but got {result}"")","let params = [    
    {""input"": [[1,2,3]], ""output"": [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]},
    {""input"": [[0]], ""output"": [[],[0]]},
    {""input"": [[]], ""output"": [[]]},
    {""input"": [[1,2,3,4]], ""output"": [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3],[4],[1,4],[2,4],[1,2,4],[3,4],[1,3,4],[2,3,4],[1,2,3,4]]},
    {""input"": [[-1,0,1]], ""output"": [[],[-1],[0],[-1,0],[1],[-1,1],[0,1],[-1,0,1]]},
    {""input"": [[1,1,2,2]], ""output"": [[],[1],[1,1],[1,2],[1,1,2],[1,2,2],[1,1,2,2],[2],[2,2]]},
    {""input"": [[1,2,3,4,5]], ""output"": [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3],[4],[1,4],[2,4],[1,2,4],[3,4],[1,3,4],[2,3,4],[1,2,3,4],[5],[1,5],[2,5],[1,2,5],[3,5],[1,3,5],[2,3,5],[1,2,3,5],[4,5],[1,4,5],[2,4,5],[1,2,4,5],[3,4,5],[1,3,4,5],[2,3,4,5],[1,2,3,4,5]]},
    {""input"": [[-5,-4,-3,-2,-1,0,1,2,4,5]], ""output"": [[-5, -4, -3, -2, -1, 0, 1, 2, 4, 5], [-5, -4, -3, -2, -1, 0, 1, 2, 4], [-5, -4, -3, -2, -1, 0, 1, 2, 5], [-5, -4, -3, -2, -1, 0, 1, 2], [-5, -4, -3, -2, -1, 0, 1, 4, 5], [-5, -4, -3, -2, -1, 0, 1, 4], [-5, -4, -3, -2, -1, 0, 1, 5], [-5, -4, -3, -2, -1, 0, 1], [-5, -4, -3, -2, -1, 0, 2, 4, 5], [-5, -4, -3, -2, -1, 0, 2, 4], [-5, -4, -3, -2, -1, 0, 2, 5], [-5, -4, -3, -2, -1, 0, 2], [-5, -4, -3, -2, -1, 0, 4, 5], [-5, -4, -3, -2, -1, 0, 4], [-5, -4, -3, -2, -1, 0, 5], [-5, -4, -3, -2, -1, 0], [-5, -4, -3, -2, -1, 1, 2, 4, 5], [-5, -4, -3, -2, -1, 1, 2, 4], [-5, -4, -3, -2, -1, 1, 2, 5], [-5, -4, -3, -2, -1, 1, 2], [-5, -4, -3, -2, -1, 1, 4, 5], [-5, -4, -3, -2, -1, 1, 4], [-5, -4, -3, -2, -1, 1, 5], [-5, -4, -3, -2, -1, 1], [-5, -4, -3, -2, -1, 2, 4, 5], [-5, -4, -3, -2, -1, 2, 4], [-5, -4, -3, -2, -1, 2, 5], [-5, -4, -3, -2, -1, 2], [-5, -4, -3, -2, -1, 4, 5], [-5, -4, -3, -2, -1, 4], [-5, -4, -3, -2, -1, 5], [-5, -4, -3, -2, -1], [-5, -4, -3, -2, 0, 1, 2, 4, 5], [-5, -4, -3, -2, 0, 1, 2, 4], [-5, -4, -3, -2, 0, 1, 2, 5], [-5, -4, -3, -2, 0, 1, 2], [-5, -4, -3, -2, 0, 1, 4, 5], [-5, -4, -3, -2, 0, 1, 4], [-5, -4, -3, -2, 0, 1, 5], [-5, -4, -3, -2, 0, 1], [-5, -4, -3, -2, 0, 2, 4, 5], [-5, -4, -3, -2, 0, 2, 4], [-5, -4, -3, -2, 0, 2, 5], [-5, -4, -3, -2, 0, 2], [-5, -4, -3, -2, 0, 4, 5], [-5, -4, -3, -2, 0, 4], [-5, -4, -3, -2, 0, 5], [-5, -4, -3, -2, 0], [-5, -4, -3, -2, 1, 2, 4, 5], [-5, -4, -3, -2, 1, 2, 4], [-5, -4, -3, -2, 1, 2, 5], [-5, -4, -3, -2, 1, 2], [-5, -4, -3, -2, 1, 4, 5], [-5, -4, -3, -2, 1, 4], [-5, -4, -3, -2, 1, 5], [-5, -4, -3, -2, 1], [-5, -4, -3, -2, 2, 4, 5], [-5, -4, -3, -2, 2, 4], [-5, -4, -3, -2, 2, 5], [-5, -4, -3, -2, 2], [-5, -4, -3, -2, 4, 5], [-5, -4, -3, -2, 4], [-5, -4, -3, -2, 5], [-5, -4, -3, -2], [-5, -4, -3, -1, 0, 1, 2, 4, 5], [-5, -4, -3, -1, 0, 1, 2, 4], [-5, -4, -3, -1, 0, 1, 2, 5], [-5, -4, -3, -1, 0, 1, 2], [-5, -4, -3, -1, 0, 1, 4, 5], [-5, -4, -3, -1, 0, 1, 4], [-5, -4, -3, -1, 0, 1, 5], [-5, -4, -3, -1, 0, 1], [-5, -4, -3, -1, 0, 2, 4, 5], [-5, -4, -3, -1, 0, 2, 4], [-5, -4, -3, -1, 0, 2, 5], [-5, -4, -3, -1, 0, 2], [-5, -4, -3, -1, 0, 4, 5], [-5, -4, -3, -1, 0, 4], [-5, -4, -3, -1, 0, 5], [-5, -4, -3, -1, 0], [-5, -4, -3, -1, 1, 2, 4, 5], [-5, -4, -3, -1, 1, 2, 4], [-5, -4, -3, -1, 1, 2, 5], [-5, -4, -3, -1, 1, 2], [-5, -4, -3, -1, 1, 4, 5], [-5, -4, -3, -1, 1, 4], [-5, -4, -3, -1, 1, 5], [-5, -4, -3, -1, 1], [-5, -4, -3, -1, 2, 4, 5], [-5, -4, -3, -1, 2, 4], [-5, -4, -3, -1, 2, 5], [-5, -4, -3, -1, 2], [-5, -4, -3, -1, 4, 5], [-5, -4, -3, -1, 4], [-5, -4, -3, -1, 5], [-5, -4, -3, -1], [-5, -4, -3, 0, 1, 2, 4, 5], [-5, -4, -3, 0, 1, 2, 4], [-5, -4, -3, 0, 1, 2, 5], [-5, -4, -3, 0, 1, 2], [-5, -4, -3, 0, 1, 4, 5], [-5, -4, -3, 0, 1, 4], [-5, -4, -3, 0, 1, 5], [-5, -4, -3, 0, 1], [-5, -4, -3, 0, 2, 4, 5], [-5, -4, -3, 0, 2, 4], [-5, -4, -3, 0, 2, 5], [-5, -4, -3, 0, 2], [-5, -4, -3, 0, 4, 5], [-5, -4, -3, 0, 4], [-5, -4, -3, 0, 5], [-5, -4, -3, 0], [-5, -4, -3, 1, 2, 4, 5], [-5, -4, -3, 1, 2, 4], [-5, -4, -3, 1, 2, 5], [-5, -4, -3, 1, 2], [-5, -4, -3, 1, 4, 5], [-5, -4, -3, 1, 4], [-5, -4, -3, 1, 5], [-5, -4, -3, 1], [-5, -4, -3, 2, 4, 5], [-5, -4, -3, 2, 4], [-5, -4, -3, 2, 5], [-5, -4, -3, 2], [-5, -4, -3, 4, 5], [-5, -4, -3, 4], [-5, -4, -3, 5], [-5, -4, -3], [-5, -4, -2, -1, 0, 1, 2, 4, 5], [-5, -4, -2, -1, 0, 1, 2, 4], [-5, -4, -2, -1, 0, 1, 2, 5], [-5, -4, -2, -1, 0, 1, 2], [-5, -4, -2, -1, 0, 1, 4, 5], [-5, -4, -2, -1, 0, 1, 4], [-5, -4, -2, -1, 0, 1, 5], [-5, -4, -2, -1, 0, 1], [-5, -4, -2, -1, 0, 2, 4, 5], [-5, -4, -2, -1, 0, 2, 4], [-5, -4, -2, -1, 0, 2, 5], [-5, -4, -2, -1, 0, 2], [-5, -4, -2, -1, 0, 4, 5], [-5, -4, -2, -1, 0, 4], [-5, -4, -2, -1, 0, 5], [-5, -4, -2, -1, 0], [-5, -4, -2, -1, 1, 2, 4, 5], [-5, -4, -2, -1, 1, 2, 4], [-5, -4, -2, -1, 1, 2, 5], [-5, -4, -2, -1, 1, 2], [-5, -4, -2, -1, 1, 4, 5], [-5, -4, -2, -1, 1, 4], [-5, -4, -2, -1, 1, 5], [-5, -4, -2, -1, 1], [-5, -4, -2, -1, 2, 4, 5], [-5, -4, -2, -1, 2, 4], [-5, -4, -2, -1, 2, 5], [-5, -4, -2, -1, 2], [-5, -4, -2, -1, 4, 5], [-5, -4, -2, -1, 4], [-5, -4, -2, -1, 5], [-5, -4, -2, -1], [-5, -4, -2, 0, 1, 2, 4, 5], [-5, -4, -2, 0, 1, 2, 4], [-5, -4, -2, 0, 1, 2, 5], [-5, -4, -2, 0, 1, 2], [-5, -4, -2, 0, 1, 4, 5], [-5, -4, -2, 0, 1, 4], [-5, -4, -2, 0, 1, 5], [-5, -4, -2, 0, 1], [-5, -4, -2, 0, 2, 4, 5], [-5, -4, -2, 0, 2, 4], [-5, -4, -2, 0, 2, 5], [-5, -4, -2, 0, 2], [-5, -4, -2, 0, 4, 5], [-5, -4, -2, 0, 4], [-5, -4, -2, 0, 5], [-5, -4, -2, 0], [-5, -4, -2, 1, 2, 4, 5], [-5, -4, -2, 1, 2, 4], [-5, -4, -2, 1, 2, 5], [-5, -4, -2, 1, 2], [-5, -4, -2, 1, 4, 5], [-5, -4, -2, 1, 4], [-5, -4, -2, 1, 5], [-5, -4, -2, 1], [-5, -4, -2, 2, 4, 5], [-5, -4, -2, 2, 4], [-5, -4, -2, 2, 5], [-5, -4, -2, 2], [-5, -4, -2, 4, 5], [-5, -4, -2, 4], [-5, -4, -2, 5], [-5, -4, -2], [-5, -4, -1, 0, 1, 2, 4, 5], [-5, -4, -1, 0, 1, 2, 4], [-5, -4, -1, 0, 1, 2, 5], [-5, -4, -1, 0, 1, 2], [-5, -4, -1, 0, 1, 4, 5], [-5, -4, -1, 0, 1, 4], [-5, -4, -1, 0, 1, 5], [-5, -4, -1, 0, 1], [-5, -4, -1, 0, 2, 4, 5], [-5, -4, -1, 0, 2, 4], [-5, -4, -1, 0, 2, 5], [-5, -4, -1, 0, 2], [-5, -4, -1, 0, 4, 5], [-5, -4, -1, 0, 4], [-5, -4, -1, 0, 5], [-5, -4, -1, 0], [-5, -4, -1, 1, 2, 4, 5], [-5, -4, -1, 1, 2, 4], [-5, -4, -1, 1, 2, 5], [-5, -4, -1, 1, 2], [-5, -4, -1, 1, 4, 5], [-5, -4, -1, 1, 4], [-5, -4, -1, 1, 5], [-5, -4, -1, 1], [-5, -4, -1, 2, 4, 5], [-5, -4, -1, 2, 4], [-5, -4, -1, 2, 5], [-5, -4, -1, 2], [-5, -4, -1, 4, 5], [-5, -4, -1, 4], [-5, -4, -1, 5], [-5, -4, -1], [-5, -4, 0, 1, 2, 4, 5], [-5, -4, 0, 1, 2, 4], [-5, -4, 0, 1, 2, 5], [-5, -4, 0, 1, 2], [-5, -4, 0, 1, 4, 5], [-5, -4, 0, 1, 4], [-5, -4, 0, 1, 5], [-5, -4, 0, 1], [-5, -4, 0, 2, 4, 5], [-5, -4, 0, 2, 4], [-5, -4, 0, 2, 5], [-5, -4, 0, 2], [-5, -4, 0, 4, 5], [-5, -4, 0, 4], [-5, -4, 0, 5], [-5, -4, 0], [-5, -4, 1, 2, 4, 5], [-5, -4, 1, 2, 4], [-5, -4, 1, 2, 5], [-5, -4, 1, 2], [-5, -4, 1, 4, 5], [-5, -4, 1, 4], [-5, -4, 1, 5], [-5, -4, 1], [-5, -4, 2, 4, 5], [-5, -4, 2, 4], [-5, -4, 2, 5], [-5, -4, 2], [-5, -4, 4, 5], [-5, -4, 4], [-5, -4, 5], [-5, -4], [-5, -3, -2, -1, 0, 1, 2, 4, 5], [-5, -3, -2, -1, 0, 1, 2, 4], [-5, -3, -2, -1, 0, 1, 2, 5], [-5, -3, -2, -1, 0, 1, 2], [-5, -3, -2, -1, 0, 1, 4, 5], [-5, -3, -2, -1, 0, 1, 4], [-5, -3, -2, -1, 0, 1, 5], [-5, -3, -2, -1, 0, 1], [-5, -3, -2, -1, 0, 2, 4, 5], [-5, -3, -2, -1, 0, 2, 4], [-5, -3, -2, -1, 0, 2, 5], [-5, -3, -2, -1, 0, 2], [-5, -3, -2, -1, 0, 4, 5], [-5, -3, -2, -1, 0, 4], [-5, -3, -2, -1, 0, 5], [-5, -3, -2, -1, 0], [-5, -3, -2, -1, 1, 2, 4, 5], [-5, -3, -2, -1, 1, 2, 4], [-5, -3, -2, -1, 1, 2, 5], [-5, -3, -2, -1, 1, 2], [-5, -3, -2, -1, 1, 4, 5], [-5, -3, -2, -1, 1, 4], [-5, -3, -2, -1, 1, 5], [-5, -3, -2, -1, 1], [-5, -3, -2, -1, 2, 4, 5], [-5, -3, -2, -1, 2, 4], [-5, -3, -2, -1, 2, 5], [-5, -3, -2, -1, 2], [-5, -3, -2, -1, 4, 5], [-5, -3, -2, -1, 4], [-5, -3, -2, -1, 5], [-5, -3, -2, -1], [-5, -3, -2, 0, 1, 2, 4, 5], [-5, -3, -2, 0, 1, 2, 4], [-5, -3, -2, 0, 1, 2, 5], [-5, -3, -2, 0, 1, 2], [-5, -3, -2, 0, 1, 4, 5], [-5, -3, -2, 0, 1, 4], [-5, -3, -2, 0, 1, 5], [-5, -3, -2, 0, 1], [-5, -3, -2, 0, 2, 4, 5], [-5, -3, -2, 0, 2, 4], [-5, -3, -2, 0, 2, 5], [-5, -3, -2, 0, 2], [-5, -3, -2, 0, 4, 5], [-5, -3, -2, 0, 4], [-5, -3, -2, 0, 5], [-5, -3, -2, 0], [-5, -3, -2, 1, 2, 4, 5], [-5, -3, -2, 1, 2, 4], [-5, -3, -2, 1, 2, 5], [-5, -3, -2, 1, 2], [-5, -3, -2, 1, 4, 5], [-5, -3, -2, 1, 4], [-5, -3, -2, 1, 5], [-5, -3, -2, 1], [-5, -3, -2, 2, 4, 5], [-5, -3, -2, 2, 4], [-5, -3, -2, 2, 5], [-5, -3, -2, 2], [-5, -3, -2, 4, 5], [-5, -3, -2, 4], [-5, -3, -2, 5], [-5, -3, -2], [-5, -3, -1, 0, 1, 2, 4, 5], [-5, -3, -1, 0, 1, 2, 4], [-5, -3, -1, 0, 1, 2, 5], [-5, -3, -1, 0, 1, 2], [-5, -3, -1, 0, 1, 4, 5], [-5, -3, -1, 0, 1, 4], [-5, -3, -1, 0, 1, 5], [-5, -3, -1, 0, 1], [-5, -3, -1, 0, 2, 4, 5], [-5, -3, -1, 0, 2, 4], [-5, -3, -1, 0, 2, 5], [-5, -3, -1, 0, 2], [-5, -3, -1, 0, 4, 5], [-5, -3, -1, 0, 4], [-5, -3, -1, 0, 5], [-5, -3, -1, 0], [-5, -3, -1, 1, 2, 4, 5], [-5, -3, -1, 1, 2, 4], [-5, -3, -1, 1, 2, 5], [-5, -3, -1, 1, 2], [-5, -3, -1, 1, 4, 5], [-5, -3, -1, 1, 4], [-5, -3, -1, 1, 5], [-5, -3, -1, 1], [-5, -3, -1, 2, 4, 5], [-5, -3, -1, 2, 4], [-5, -3, -1, 2, 5], [-5, -3, -1, 2], [-5, -3, -1, 4, 5], [-5, -3, -1, 4], [-5, -3, -1, 5], [-5, -3, -1], [-5, -3, 0, 1, 2, 4, 5], [-5, -3, 0, 1, 2, 4], [-5, -3, 0, 1, 2, 5], [-5, -3, 0, 1, 2], [-5, -3, 0, 1, 4, 5], [-5, -3, 0, 1, 4], [-5, -3, 0, 1, 5], [-5, -3, 0, 1], [-5, -3, 0, 2, 4, 5], [-5, -3, 0, 2, 4], [-5, -3, 0, 2, 5], [-5, -3, 0, 2], [-5, -3, 0, 4, 5], [-5, -3, 0, 4], [-5, -3, 0, 5], [-5, -3, 0], [-5, -3, 1, 2, 4, 5], [-5, -3, 1, 2, 4], [-5, -3, 1, 2, 5], [-5, -3, 1, 2], [-5, -3, 1, 4, 5], [-5, -3, 1, 4], [-5, -3, 1, 5], [-5, -3, 1], [-5, -3, 2, 4, 5], [-5, -3, 2, 4], [-5, -3, 2, 5], [-5, -3, 2], [-5, -3, 4, 5], [-5, -3, 4], [-5, -3, 5], [-5, -3], [-5, -2, -1, 0, 1, 2, 4, 5], [-5, -2, -1, 0, 1, 2, 4], [-5, -2, -1, 0, 1, 2, 5], [-5, -2, -1, 0, 1, 2], [-5, -2, -1, 0, 1, 4, 5], [-5, -2, -1, 0, 1, 4], [-5, -2, -1, 0, 1, 5], [-5, -2, -1, 0, 1], [-5, -2, -1, 0, 2, 4, 5], [-5, -2, -1, 0, 2, 4], [-5, -2, -1, 0, 2, 5], [-5, -2, -1, 0, 2], [-5, -2, -1, 0, 4, 5], [-5, -2, -1, 0, 4], [-5, -2, -1, 0, 5], [-5, -2, -1, 0], [-5, -2, -1, 1, 2, 4, 5], [-5, -2, -1, 1, 2, 4], [-5, -2, -1, 1, 2, 5], [-5, -2, -1, 1, 2], [-5, -2, -1, 1, 4, 5], [-5, -2, -1, 1, 4], [-5, -2, -1, 1, 5], [-5, -2, -1, 1], [-5, -2, -1, 2, 4, 5], [-5, -2, -1, 2, 4], [-5, -2, -1, 2, 5], [-5, -2, -1, 2], [-5, -2, -1, 4, 5], [-5, -2, -1, 4], [-5, -2, -1, 5], [-5, -2, -1], [-5, -2, 0, 1, 2, 4, 5], [-5, -2, 0, 1, 2, 4], [-5, -2, 0, 1, 2, 5], [-5, -2, 0, 1, 2], [-5, -2, 0, 1, 4, 5], [-5, -2, 0, 1, 4], [-5, -2, 0, 1, 5], [-5, -2, 0, 1], [-5, -2, 0, 2, 4, 5], [-5, -2, 0, 2, 4], [-5, -2, 0, 2, 5], [-5, -2, 0, 2], [-5, -2, 0, 4, 5], [-5, -2, 0, 4], [-5, -2, 0, 5], [-5, -2, 0], [-5, -2, 1, 2, 4, 5], [-5, -2, 1, 2, 4], [-5, -2, 1, 2, 5], [-5, -2, 1, 2], [-5, -2, 1, 4, 5], [-5, -2, 1, 4], [-5, -2, 1, 5], [-5, -2, 1], [-5, -2, 2, 4, 5], [-5, -2, 2, 4], [-5, -2, 2, 5], [-5, -2, 2], [-5, -2, 4, 5], [-5, -2, 4], [-5, -2, 5], [-5, -2], [-5, -1, 0, 1, 2, 4, 5], [-5, -1, 0, 1, 2, 4], [-5, -1, 0, 1, 2, 5], [-5, -1, 0, 1, 2], [-5, -1, 0, 1, 4, 5], [-5, -1, 0, 1, 4], [-5, -1, 0, 1, 5], [-5, -1, 0, 1], [-5, -1, 0, 2, 4, 5], [-5, -1, 0, 2, 4], [-5, -1, 0, 2, 5], [-5, -1, 0, 2], [-5, -1, 0, 4, 5], [-5, -1, 0, 4], [-5, -1, 0, 5], [-5, -1, 0], [-5, -1, 1, 2, 4, 5], [-5, -1, 1, 2, 4], [-5, -1, 1, 2, 5], [-5, -1, 1, 2], [-5, -1, 1, 4, 5], [-5, -1, 1, 4], [-5, -1, 1, 5], [-5, -1, 1], [-5, -1, 2, 4, 5], [-5, -1, 2, 4], [-5, -1, 2, 5], [-5, -1, 2], [-5, -1, 4, 5], [-5, -1, 4], [-5, -1, 5], [-5, -1], [-5, 0, 1, 2, 4, 5], [-5, 0, 1, 2, 4], [-5, 0, 1, 2, 5], [-5, 0, 1, 2], [-5, 0, 1, 4, 5], [-5, 0, 1, 4], [-5, 0, 1, 5], [-5, 0, 1], [-5, 0, 2, 4, 5], [-5, 0, 2, 4], [-5, 0, 2, 5], [-5, 0, 2], [-5, 0, 4, 5], [-5, 0, 4], [-5, 0, 5], [-5, 0], [-5, 1, 2, 4, 5], [-5, 1, 2, 4], [-5, 1, 2, 5], [-5, 1, 2], [-5, 1, 4, 5], [-5, 1, 4], [-5, 1, 5], [-5, 1], [-5, 2, 4, 5], [-5, 2, 4], [-5, 2, 5], [-5, 2], [-5, 4, 5], [-5, 4], [-5, 5], [-5], [-4, -3, -2, -1, 0, 1, 2, 4, 5], [-4, -3, -2, -1, 0, 1, 2, 4], [-4, -3, -2, -1, 0, 1, 2, 5], [-4, -3, -2, -1, 0, 1, 2], [-4, -3, -2, -1, 0, 1, 4, 5], [-4, -3, -2, -1, 0, 1, 4], [-4, -3, -2, -1, 0, 1, 5], [-4, -3, -2, -1, 0, 1], [-4, -3, -2, -1, 0, 2, 4, 5], [-4, -3, -2, -1, 0, 2, 4], [-4, -3, -2, -1, 0, 2, 5], [-4, -3, -2, -1, 0, 2], [-4, -3, -2, -1, 0, 4, 5], [-4, -3, -2, -1, 0, 4], [-4, -3, -2, -1, 0, 5], [-4, -3, -2, -1, 0], [-4, -3, -2, -1, 1, 2, 4, 5], [-4, -3, -2, -1, 1, 2, 4], [-4, -3, -2, -1, 1, 2, 5], [-4, -3, -2, -1, 1, 2], [-4, -3, -2, -1, 1, 4, 5], [-4, -3, -2, -1, 1, 4], [-4, -3, -2, -1, 1, 5], [-4, -3, -2, -1, 1], [-4, -3, -2, -1, 2, 4, 5], [-4, -3, -2, -1, 2, 4], [-4, -3, -2, -1, 2, 5], [-4, -3, -2, -1, 2], [-4, -3, -2, -1, 4, 5], [-4, -3, -2, -1, 4], [-4, -3, -2, -1, 5], [-4, -3, -2, -1], [-4, -3, -2, 0, 1, 2, 4, 5], [-4, -3, -2, 0, 1, 2, 4], [-4, -3, -2, 0, 1, 2, 5], [-4, -3, -2, 0, 1, 2], [-4, -3, -2, 0, 1, 4, 5], [-4, -3, -2, 0, 1, 4], [-4, -3, -2, 0, 1, 5], [-4, -3, -2, 0, 1], [-4, -3, -2, 0, 2, 4, 5], [-4, -3, -2, 0, 2, 4], [-4, -3, -2, 0, 2, 5], [-4, -3, -2, 0, 2], [-4, -3, -2, 0, 4, 5], [-4, -3, -2, 0, 4], [-4, -3, -2, 0, 5], [-4, -3, -2, 0], [-4, -3, -2, 1, 2, 4, 5], [-4, -3, -2, 1, 2, 4], [-4, -3, -2, 1, 2, 5], [-4, -3, -2, 1, 2], [-4, -3, -2, 1, 4, 5], [-4, -3, -2, 1, 4], [-4, -3, -2, 1, 5], [-4, -3, -2, 1], [-4, -3, -2, 2, 4, 5], [-4, -3, -2, 2, 4], [-4, -3, -2, 2, 5], [-4, -3, -2, 2], [-4, -3, -2, 4, 5], [-4, -3, -2, 4], [-4, -3, -2, 5], [-4, -3, -2], [-4, -3, -1, 0, 1, 2, 4, 5], [-4, -3, -1, 0, 1, 2, 4], [-4, -3, -1, 0, 1, 2, 5], [-4, -3, -1, 0, 1, 2], [-4, -3, -1, 0, 1, 4, 5], [-4, -3, -1, 0, 1, 4], [-4, -3, -1, 0, 1, 5], [-4, -3, -1, 0, 1], [-4, -3, -1, 0, 2, 4, 5], [-4, -3, -1, 0, 2, 4], [-4, -3, -1, 0, 2, 5], [-4, -3, -1, 0, 2], [-4, -3, -1, 0, 4, 5], [-4, -3, -1, 0, 4], [-4, -3, -1, 0, 5], [-4, -3, -1, 0], [-4, -3, -1, 1, 2, 4, 5], [-4, -3, -1, 1, 2, 4], [-4, -3, -1, 1, 2, 5], [-4, -3, -1, 1, 2], [-4, -3, -1, 1, 4, 5], [-4, -3, -1, 1, 4], [-4, -3, -1, 1, 5], [-4, -3, -1, 1], [-4, -3, -1, 2, 4, 5], [-4, -3, -1, 2, 4], [-4, -3, -1, 2, 5], [-4, -3, -1, 2], [-4, -3, -1, 4, 5], [-4, -3, -1, 4], [-4, -3, -1, 5], [-4, -3, -1], [-4, -3, 0, 1, 2, 4, 5], [-4, -3, 0, 1, 2, 4], [-4, -3, 0, 1, 2, 5], [-4, -3, 0, 1, 2], [-4, -3, 0, 1, 4, 5], [-4, -3, 0, 1, 4], [-4, -3, 0, 1, 5], [-4, -3, 0, 1], [-4, -3, 0, 2, 4, 5], [-4, -3, 0, 2, 4], [-4, -3, 0, 2, 5], [-4, -3, 0, 2], [-4, -3, 0, 4, 5], [-4, -3, 0, 4], [-4, -3, 0, 5], [-4, -3, 0], [-4, -3, 1, 2, 4, 5], [-4, -3, 1, 2, 4], [-4, -3, 1, 2, 5], [-4, -3, 1, 2], [-4, -3, 1, 4, 5], [-4, -3, 1, 4], [-4, -3, 1, 5], [-4, -3, 1], [-4, -3, 2, 4, 5], [-4, -3, 2, 4], [-4, -3, 2, 5], [-4, -3, 2], [-4, -3, 4, 5], [-4, -3, 4], [-4, -3, 5], [-4, -3], [-4, -2, -1, 0, 1, 2, 4, 5], [-4, -2, -1, 0, 1, 2, 4], [-4, -2, -1, 0, 1, 2, 5], [-4, -2, -1, 0, 1, 2], [-4, -2, -1, 0, 1, 4, 5], [-4, -2, -1, 0, 1, 4], [-4, -2, -1, 0, 1, 5], [-4, -2, -1, 0, 1], [-4, -2, -1, 0, 2, 4, 5], [-4, -2, -1, 0, 2, 4], [-4, -2, -1, 0, 2, 5], [-4, -2, -1, 0, 2], [-4, -2, -1, 0, 4, 5], [-4, -2, -1, 0, 4], [-4, -2, -1, 0, 5], [-4, -2, -1, 0], [-4, -2, -1, 1, 2, 4, 5], [-4, -2, -1, 1, 2, 4], [-4, -2, -1, 1, 2, 5], [-4, -2, -1, 1, 2], [-4, -2, -1, 1, 4, 5], [-4, -2, -1, 1, 4], [-4, -2, -1, 1, 5], [-4, -2, -1, 1], [-4, -2, -1, 2, 4, 5], [-4, -2, -1, 2, 4], [-4, -2, -1, 2, 5], [-4, -2, -1, 2], [-4, -2, -1, 4, 5], [-4, -2, -1, 4], [-4, -2, -1, 5], [-4, -2, -1], [-4, -2, 0, 1, 2, 4, 5], [-4, -2, 0, 1, 2, 4], [-4, -2, 0, 1, 2, 5], [-4, -2, 0, 1, 2], [-4, -2, 0, 1, 4, 5], [-4, -2, 0, 1, 4], [-4, -2, 0, 1, 5], [-4, -2, 0, 1], [-4, -2, 0, 2, 4, 5], [-4, -2, 0, 2, 4], [-4, -2, 0, 2, 5], [-4, -2, 0, 2], [-4, -2, 0, 4, 5], [-4, -2, 0, 4], [-4, -2, 0, 5], [-4, -2, 0], [-4, -2, 1, 2, 4, 5], [-4, -2, 1, 2, 4], [-4, -2, 1, 2, 5], [-4, -2, 1, 2], [-4, -2, 1, 4, 5], [-4, -2, 1, 4], [-4, -2, 1, 5], [-4, -2, 1], [-4, -2, 2, 4, 5], [-4, -2, 2, 4], [-4, -2, 2, 5], [-4, -2, 2], [-4, -2, 4, 5], [-4, -2, 4], [-4, -2, 5], [-4, -2], [-4, -1, 0, 1, 2, 4, 5], [-4, -1, 0, 1, 2, 4], [-4, -1, 0, 1, 2, 5], [-4, -1, 0, 1, 2], [-4, -1, 0, 1, 4, 5], [-4, -1, 0, 1, 4], [-4, -1, 0, 1, 5], [-4, -1, 0, 1], [-4, -1, 0, 2, 4, 5], [-4, -1, 0, 2, 4], [-4, -1, 0, 2, 5], [-4, -1, 0, 2], [-4, -1, 0, 4, 5], [-4, -1, 0, 4], [-4, -1, 0, 5], [-4, -1, 0], [-4, -1, 1, 2, 4, 5], [-4, -1, 1, 2, 4], [-4, -1, 1, 2, 5], [-4, -1, 1, 2], [-4, -1, 1, 4, 5], [-4, -1, 1, 4], [-4, -1, 1, 5], [-4, -1, 1], [-4, -1, 2, 4, 5], [-4, -1, 2, 4], [-4, -1, 2, 5], [-4, -1, 2], [-4, -1, 4, 5], [-4, -1, 4], [-4, -1, 5], [-4, -1], [-4, 0, 1, 2, 4, 5], [-4, 0, 1, 2, 4], [-4, 0, 1, 2, 5], [-4, 0, 1, 2], [-4, 0, 1, 4, 5], [-4, 0, 1, 4], [-4, 0, 1, 5], [-4, 0, 1], [-4, 0, 2, 4, 5], [-4, 0, 2, 4], [-4, 0, 2, 5], [-4, 0, 2], [-4, 0, 4, 5], [-4, 0, 4], [-4, 0, 5], [-4, 0], [-4, 1, 2, 4, 5], [-4, 1, 2, 4], [-4, 1, 2, 5], [-4, 1, 2], [-4, 1, 4, 5], [-4, 1, 4], [-4, 1, 5], [-4, 1], [-4, 2, 4, 5], [-4, 2, 4], [-4, 2, 5], [-4, 2], [-4, 4, 5], [-4, 4], [-4, 5], [-4], [-3, -2, -1, 0, 1, 2, 4, 5], [-3, -2, -1, 0, 1, 2, 4], [-3, -2, -1, 0, 1, 2, 5], [-3, -2, -1, 0, 1, 2], [-3, -2, -1, 0, 1, 4, 5], [-3, -2, -1, 0, 1, 4], [-3, -2, -1, 0, 1, 5], [-3, -2, -1, 0, 1], [-3, -2, -1, 0, 2, 4, 5], [-3, -2, -1, 0, 2, 4], [-3, -2, -1, 0, 2, 5], [-3, -2, -1, 0, 2], [-3, -2, -1, 0, 4, 5], [-3, -2, -1, 0, 4], [-3, -2, -1, 0, 5], [-3, -2, -1, 0], [-3, -2, -1, 1, 2, 4, 5], [-3, -2, -1, 1, 2, 4], [-3, -2, -1, 1, 2, 5], [-3, -2, -1, 1, 2], [-3, -2, -1, 1, 4, 5], [-3, -2, -1, 1, 4], [-3, -2, -1, 1, 5], [-3, -2, -1, 1], [-3, -2, -1, 2, 4, 5], [-3, -2, -1, 2, 4], [-3, -2, -1, 2, 5], [-3, -2, -1, 2], [-3, -2, -1, 4, 5], [-3, -2, -1, 4], [-3, -2, -1, 5], [-3, -2, -1], [-3, -2, 0, 1, 2, 4, 5], [-3, -2, 0, 1, 2, 4], [-3, -2, 0, 1, 2, 5], [-3, -2, 0, 1, 2], [-3, -2, 0, 1, 4, 5], [-3, -2, 0, 1, 4], [-3, -2, 0, 1, 5], [-3, -2, 0, 1], [-3, -2, 0, 2, 4, 5], [-3, -2, 0, 2, 4], [-3, -2, 0, 2, 5], [-3, -2, 0, 2], [-3, -2, 0, 4, 5], [-3, -2, 0, 4], [-3, -2, 0, 5], [-3, -2, 0], [-3, -2, 1, 2, 4, 5], [-3, -2, 1, 2, 4], [-3, -2, 1, 2, 5], [-3, -2, 1, 2], [-3, -2, 1, 4, 5], [-3, -2, 1, 4], [-3, -2, 1, 5], [-3, -2, 1], [-3, -2, 2, 4, 5], [-3, -2, 2, 4], [-3, -2, 2, 5], [-3, -2, 2], [-3, -2, 4, 5], [-3, -2, 4], [-3, -2, 5], [-3, -2], [-3, -1, 0, 1, 2, 4, 5], [-3, -1, 0, 1, 2, 4], [-3, -1, 0, 1, 2, 5], [-3, -1, 0, 1, 2], [-3, -1, 0, 1, 4, 5], [-3, -1, 0, 1, 4], [-3, -1, 0, 1, 5], [-3, -1, 0, 1], [-3, -1, 0, 2, 4, 5], [-3, -1, 0, 2, 4], [-3, -1, 0, 2, 5], [-3, -1, 0, 2], [-3, -1, 0, 4, 5], [-3, -1, 0, 4], [-3, -1, 0, 5], [-3, -1, 0], [-3, -1, 1, 2, 4, 5], [-3, -1, 1, 2, 4], [-3, -1, 1, 2, 5], [-3, -1, 1, 2], [-3, -1, 1, 4, 5], [-3, -1, 1, 4], [-3, -1, 1, 5], [-3, -1, 1], [-3, -1, 2, 4, 5], [-3, -1, 2, 4], [-3, -1, 2, 5], [-3, -1, 2], [-3, -1, 4, 5], [-3, -1, 4], [-3, -1, 5], [-3, -1], [-3, 0, 1, 2, 4, 5], [-3, 0, 1, 2, 4], [-3, 0, 1, 2, 5], [-3, 0, 1, 2], [-3, 0, 1, 4, 5], [-3, 0, 1, 4], [-3, 0, 1, 5], [-3, 0, 1], [-3, 0, 2, 4, 5], [-3, 0, 2, 4], [-3, 0, 2, 5], [-3, 0, 2], [-3, 0, 4, 5], [-3, 0, 4], [-3, 0, 5], [-3, 0], [-3, 1, 2, 4, 5], [-3, 1, 2, 4], [-3, 1, 2, 5], [-3, 1, 2], [-3, 1, 4, 5], [-3, 1, 4], [-3, 1, 5], [-3, 1], [-3, 2, 4, 5], [-3, 2, 4], [-3, 2, 5], [-3, 2], [-3, 4, 5], [-3, 4], [-3, 5], [-3], [-2, -1, 0, 1, 2, 4, 5], [-2, -1, 0, 1, 2, 4], [-2, -1, 0, 1, 2, 5], [-2, -1, 0, 1, 2], [-2, -1, 0, 1, 4, 5], [-2, -1, 0, 1, 4], [-2, -1, 0, 1, 5], [-2, -1, 0, 1], [-2, -1, 0, 2, 4, 5], [-2, -1, 0, 2, 4], [-2, -1, 0, 2, 5], [-2, -1, 0, 2], [-2, -1, 0, 4, 5], [-2, -1, 0, 4], [-2, -1, 0, 5], [-2, -1, 0], [-2, -1, 1, 2, 4, 5], [-2, -1, 1, 2, 4], [-2, -1, 1, 2, 5], [-2, -1, 1, 2], [-2, -1, 1, 4, 5], [-2, -1, 1, 4], [-2, -1, 1, 5], [-2, -1, 1], [-2, -1, 2, 4, 5], [-2, -1, 2, 4], [-2, -1, 2, 5], [-2, -1, 2], [-2, -1, 4, 5], [-2, -1, 4], [-2, -1, 5], [-2, -1], [-2, 0, 1, 2, 4, 5], [-2, 0, 1, 2, 4], [-2, 0, 1, 2, 5], [-2, 0, 1, 2], [-2, 0, 1, 4, 5], [-2, 0, 1, 4], [-2, 0, 1, 5], [-2, 0, 1], [-2, 0, 2, 4, 5], [-2, 0, 2, 4], [-2, 0, 2, 5], [-2, 0, 2], [-2, 0, 4, 5], [-2, 0, 4], [-2, 0, 5], [-2, 0], [-2, 1, 2, 4, 5], [-2, 1, 2, 4], [-2, 1, 2, 5], [-2, 1, 2], [-2, 1, 4, 5], [-2, 1, 4], [-2, 1, 5], [-2, 1], [-2, 2, 4, 5], [-2, 2, 4], [-2, 2, 5], [-2, 2], [-2, 4, 5], [-2, 4], [-2, 5], [-2], [-1, 0, 1, 2, 4, 5], [-1, 0, 1, 2, 4], [-1, 0, 1, 2, 5], [-1, 0, 1, 2], [-1, 0, 1, 4, 5], [-1, 0, 1, 4], [-1, 0, 1, 5], [-1, 0, 1], [-1, 0, 2, 4, 5], [-1, 0, 2, 4], [-1, 0, 2, 5], [-1, 0, 2], [-1, 0, 4, 5], [-1, 0, 4], [-1, 0, 5], [-1, 0], [-1, 1, 2, 4, 5], [-1, 1, 2, 4], [-1, 1, 2, 5], [-1, 1, 2], [-1, 1, 4, 5], [-1, 1, 4], [-1, 1, 5], [-1, 1], [-1, 2, 4, 5], [-1, 2, 4], [-1, 2, 5], [-1, 2], [-1, 4, 5], [-1, 4], [-1, 5], [-1], [0, 1, 2, 4, 5], [0, 1, 2, 4], [0, 1, 2, 5], [0, 1, 2], [0, 1, 4, 5], [0, 1, 4], [0, 1, 5], [0, 1], [0, 2, 4, 5], [0, 2, 4], [0, 2, 5], [0, 2], [0, 4, 5], [0, 4], [0, 5], [0], [1, 2, 4, 5], [1, 2, 4], [1, 2, 5], [1, 2], [1, 4, 5], [1, 4], [1, 5], [1], [2, 4, 5], [2, 4], [2, 5], [2], [4, 5], [4], [5], []]},
    {""input"": [[-521,-34,3,434,101,0,1,2]], ""output"": [[-521, -34, 3, 434, 101, 0, 1, 2], [-521, -34, 3, 434, 101, 0, 1], [-521, -34, 3, 434, 101, 0, 2], [-521, -34, 3, 434, 101, 0], [-521, -34, 3, 434, 101, 1, 2], [-521, -34, 3, 434, 101, 1], [-521, -34, 3, 434, 101, 2], [-521, -34, 3, 434, 101], [-521, -34, 3, 434, 0, 1, 2], [-521, -34, 3, 434, 0, 1], [-521, -34, 3, 434, 0, 2], [-521, -34, 3, 434, 0], [-521, -34, 3, 434, 1, 2], [-521, -34, 3, 434, 1], [-521, -34, 3, 434, 2], [-521, -34, 3, 434], [-521, -34, 3, 101, 0, 1, 2], [-521, -34, 3, 101, 0, 1], [-521, -34, 3, 101, 0, 2], [-521, -34, 3, 101, 0], [-521, -34, 3, 101, 1, 2], [-521, -34, 3, 101, 1], [-521, -34, 3, 101, 2], [-521, -34, 3, 101], [-521, -34, 3, 0, 1, 2], [-521, -34, 3, 0, 1], [-521, -34, 3, 0, 2], [-521, -34, 3, 0], [-521, -34, 3, 1, 2], [-521, -34, 3, 1], [-521, -34, 3, 2], [-521, -34, 3], [-521, -34, 434, 101, 0, 1, 2], [-521, -34, 434, 101, 0, 1], [-521, -34, 434, 101, 0, 2], [-521, -34, 434, 101, 0], [-521, -34, 434, 101, 1, 2], [-521, -34, 434, 101, 1], [-521, -34, 434, 101, 2], [-521, -34, 434, 101], [-521, -34, 434, 0, 1, 2], [-521, -34, 434, 0, 1], [-521, -34, 434, 0, 2], [-521, -34, 434, 0], [-521, -34, 434, 1, 2], [-521, -34, 434, 1], [-521, -34, 434, 2], [-521, -34, 434], [-521, -34, 101, 0, 1, 2], [-521, -34, 101, 0, 1], [-521, -34, 101, 0, 2], [-521, -34, 101, 0], [-521, -34, 101, 1, 2], [-521, -34, 101, 1], [-521, -34, 101, 2], [-521, -34, 101], [-521, -34, 0, 1, 2], [-521, -34, 0, 1], [-521, -34, 0, 2], [-521, -34, 0], [-521, -34, 1, 2], [-521, -34, 1], [-521, -34, 2], [-521, -34], [-521, 3, 434, 101, 0, 1, 2], [-521, 3, 434, 101, 0, 1], [-521, 3, 434, 101, 0, 2], [-521, 3, 434, 101, 0], [-521, 3, 434, 101, 1, 2], [-521, 3, 434, 101, 1], [-521, 3, 434, 101, 2], [-521, 3, 434, 101], [-521, 3, 434, 0, 1, 2], [-521, 3, 434, 0, 1], [-521, 3, 434, 0, 2], [-521, 3, 434, 0], [-521, 3, 434, 1, 2], [-521, 3, 434, 1], [-521, 3, 434, 2], [-521, 3, 434], [-521, 3, 101, 0, 1, 2], [-521, 3, 101, 0, 1], [-521, 3, 101, 0, 2], [-521, 3, 101, 0], [-521, 3, 101, 1, 2], [-521, 3, 101, 1], [-521, 3, 101, 2], [-521, 3, 101], [-521, 3, 0, 1, 2], [-521, 3, 0, 1], [-521, 3, 0, 2], [-521, 3, 0], [-521, 3, 1, 2], [-521, 3, 1], [-521, 3, 2], [-521, 3], [-521, 434, 101, 0, 1, 2], [-521, 434, 101, 0, 1], [-521, 434, 101, 0, 2], [-521, 434, 101, 0], [-521, 434, 101, 1, 2], [-521, 434, 101, 1], [-521, 434, 101, 2], [-521, 434, 101], [-521, 434, 0, 1, 2], [-521, 434, 0, 1], [-521, 434, 0, 2], [-521, 434, 0], [-521, 434, 1, 2], [-521, 434, 1], [-521, 434, 2], [-521, 434], [-521, 101, 0, 1, 2], [-521, 101, 0, 1], [-521, 101, 0, 2], [-521, 101, 0], [-521, 101, 1, 2], [-521, 101, 1], [-521, 101, 2], [-521, 101], [-521, 0, 1, 2], [-521, 0, 1], [-521, 0, 2], [-521, 0], [-521, 1, 2], [-521, 1], [-521, 2], [-521], [-34, 3, 434, 101, 0, 1, 2], [-34, 3, 434, 101, 0, 1], [-34, 3, 434, 101, 0, 2], [-34, 3, 434, 101, 0], [-34, 3, 434, 101, 1, 2], [-34, 3, 434, 101, 1], [-34, 3, 434, 101, 2], [-34, 3, 434, 101], [-34, 3, 434, 0, 1, 2], [-34, 3, 434, 0, 1], [-34, 3, 434, 0, 2], [-34, 3, 434, 0], [-34, 3, 434, 1, 2], [-34, 3, 434, 1], [-34, 3, 434, 2], [-34, 3, 434], [-34, 3, 101, 0, 1, 2], [-34, 3, 101, 0, 1], [-34, 3, 101, 0, 2], [-34, 3, 101, 0], [-34, 3, 101, 1, 2], [-34, 3, 101, 1], [-34, 3, 101, 2], [-34, 3, 101], [-34, 3, 0, 1, 2], [-34, 3, 0, 1], [-34, 3, 0, 2], [-34, 3, 0], [-34, 3, 1, 2], [-34, 3, 1], [-34, 3, 2], [-34, 3], [-34, 434, 101, 0, 1, 2], [-34, 434, 101, 0, 1], [-34, 434, 101, 0, 2], [-34, 434, 101, 0], [-34, 434, 101, 1, 2], [-34, 434, 101, 1], [-34, 434, 101, 2], [-34, 434, 101], [-34, 434, 0, 1, 2], [-34, 434, 0, 1], [-34, 434, 0, 2], [-34, 434, 0], [-34, 434, 1, 2], [-34, 434, 1], [-34, 434, 2], [-34, 434], [-34, 101, 0, 1, 2], [-34, 101, 0, 1], [-34, 101, 0, 2], [-34, 101, 0], [-34, 101, 1, 2], [-34, 101, 1], [-34, 101, 2], [-34, 101], [-34, 0, 1, 2], [-34, 0, 1], [-34, 0, 2], [-34, 0], [-34, 1, 2], [-34, 1], [-34, 2], [-34], [3, 434, 101, 0, 1, 2], [3, 434, 101, 0, 1], [3, 434, 101, 0, 2], [3, 434, 101, 0], [3, 434, 101, 1, 2], [3, 434, 101, 1], [3, 434, 101, 2], [3, 434, 101], [3, 434, 0, 1, 2], [3, 434, 0, 1], [3, 434, 0, 2], [3, 434, 0], [3, 434, 1, 2], [3, 434, 1], [3, 434, 2], [3, 434], [3, 101, 0, 1, 2], [3, 101, 0, 1], [3, 101, 0, 2], [3, 101, 0], [3, 101, 1, 2], [3, 101, 1], [3, 101, 2], [3, 101], [3, 0, 1, 2], [3, 0, 1], [3, 0, 2], [3, 0], [3, 1, 2], [3, 1], [3, 2], [3], [434, 101, 0, 1, 2], [434, 101, 0, 1], [434, 101, 0, 2], [434, 101, 0], [434, 101, 1, 2], [434, 101, 1], [434, 101, 2], [434, 101], [434, 0, 1, 2], [434, 0, 1], [434, 0, 2], [434, 0], [434, 1, 2], [434, 1], [434, 2], [434], [101, 0, 1, 2], [101, 0, 1], [101, 0, 2], [101, 0], [101, 1, 2], [101, 1], [101, 2], [101], [0, 1, 2], [0, 1], [0, 2], [0], [1, 2], [1], [2], []]}
]

for (let i = 0; i < params.length; i++) {
    let test = params[i];
    let result = subsets(test['input'][0]);
    let result_set = new Set(result.map(lst => JSON.stringify(lst)));
    let output_set = new Set(test['output'].map(lst => JSON.stringify(lst)));
    if (result_set.size === output_set.size && 
        [...result_set].every(elem => output_set.has(elem))) {
        console.log(""\u2705 Test passed."")
    } else {
        console.log(`\u274C Test failed. Input: ${JSON.stringify(test['input'])} Expected output: ${JSON.stringify(test['output'])} but got ${JSON.stringify(result)}`)
    }
}",,
63b5985b8ad4593d6b7b0231,combination-sum,"params = [    
    {        
        ""input"": [[2,3,6,7], 7],
        ""output"": [[2,2,3],[7]]
    },
    {
        ""input"": [[2,3,5], 8],
        ""output"": [[2,2,2,2],[2,3,3],[3,5]]
    },
    {
        ""input"": [[2], 1],
        ""output"": []
    },
    {
        ""input"": [[2,3,5], 1],
        ""output"": []
    },
    {
        ""input"": [[2,3,5,7], 5],
        ""output"": [[2,3],[5]]
    },
    {
        ""input"": [[2,3,5,7,10], 15],
        ""output"": [[2, 2, 2, 2, 2, 2, 3], [2, 2, 2, 2, 2, 5], [2, 2, 2, 2, 7], [2, 2, 2, 3, 3, 3], [2, 2, 3, 3, 5], [2, 3, 3, 7], [2, 3, 5, 5], [2, 3, 10], [3, 3, 3, 3, 3], [3, 5, 7], [5, 5, 5], [5, 10]]
    },
    {
        ""input"": [[2,3,5,7,10], 20],
        ""output"": [[2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 3, 3], [2, 2, 2, 2, 2, 2, 3, 5], [2, 2, 2, 2, 2, 3, 7], [2, 2, 2, 2, 2, 5, 5], [2, 2, 2, 2, 2, 10], [2, 2, 2, 2, 3, 3, 3, 3], [2, 2, 2, 2, 5, 7], [2, 2, 2, 3, 3, 3, 5], [2, 2, 2, 7, 7], [2, 2, 3, 3, 3, 7], [2, 2, 3, 3, 5, 5], [2, 2, 3, 3, 10], [2, 3, 3, 3, 3, 3, 3], [2, 3, 3, 5, 7], [2, 3, 5, 5, 5], [2, 3, 5, 10], [3, 3, 3, 3, 3, 5], [3, 3, 7, 7], [3, 5, 5, 7], [3, 7, 10], [5, 5, 5, 5], [5, 5, 10], [10, 10]]
    },
    {
        ""input"": [[2,3,5,7,10], 3],
        ""output"": [[3]]
    },
    {
        ""input"": [[2,3,5,7,10], 0],
        ""output"": [[]]
    }
]

s = Solution()
for test in params:
    result = s.combinationSum(test['input'][0], test['input'][1])
    result_set = set([tuple(lst) for lst in result])
    output_set = set([tuple(lst) for lst in test['output']])
    if result_set == output_set:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input: {test['input']} Expected output: {test['output']} but got {result}"")","let params = [    
    {        
        ""input"": [[2,3,6,7], 7],
        ""output"": [[2,2,3],[7]]
    },
    {
        ""input"": [[2,3,5], 8],
        ""output"": [[2,2,2,2],[2,3,3],[3,5]]
    },
    {
        ""input"": [[2], 1],
        ""output"": []
    },
    {
        ""input"": [[2,3,5], 1],
        ""output"": []
    },
    {
        ""input"": [[2,3,5,7], 5],
        ""output"": [[2,3],[5]]
    },
    {
        ""input"": [[2,3,5,7,10], 15],
        ""output"": [[2, 2, 2, 2, 2, 2, 3], [2, 2, 2, 2, 2, 5], [2, 2, 2, 2, 7], [2, 2, 2, 3, 3, 3], [2, 2, 3, 3, 5], [2, 3, 3, 7], [2, 3, 5, 5], [2, 3, 10], [3, 3, 3, 3, 3], [3, 5, 7], [5, 5, 5], [5, 10]]
    },
    {
        ""input"": [[2,3,5,7,10], 20],
        ""output"": [[2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 3, 3], [2, 2, 2, 2, 2, 2, 3, 5], [2, 2, 2, 2, 2, 3, 7], [2, 2, 2, 2, 2, 5, 5], [2, 2, 2, 2, 2, 10], [2, 2, 2, 2, 3, 3, 3, 3], [2, 2, 2, 2, 5, 7], [2, 2, 2, 3, 3, 3, 5], [2, 2, 2, 7, 7], [2, 2, 3, 3, 3, 7], [2, 2, 3, 3, 5, 5], [2, 2, 3, 3, 10], [2, 3, 3, 3, 3, 3, 3], [2, 3, 3, 5, 7], [2, 3, 5, 5, 5], [2, 3, 5, 10], [3, 3, 3, 3, 3, 5], [3, 3, 7, 7], [3, 5, 5, 7], [3, 7, 10], [5, 5, 5, 5], [5, 5, 10], [10, 10]]
    },
    {
        ""input"": [[2,3,5,7,10], 3],
        ""output"": [[3]]
    },
    {
        ""input"": [[2,3,5,7,10], 0],
        ""output"": [[]]
    }
]

for (const test of params) {
    const result = combinationSum(test['input'][0], test['input'][1]);
    const resultSet = new Set(result.map(lst => JSON.stringify(lst)));
    const outputSet = new Set(test['output'].map(lst => JSON.stringify(lst)));
    if (resultSet.size === outputSet.size && [...resultSet].every(e => outputSet.has(e))) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. Input: ${JSON.stringify(test['input'])} Expected output: ${JSON.stringify(test['output'])} but got ${JSON.stringify(result)}`);
    }
}",,
63b5985c8ad4593d6b7b0232,permutations,"params = [    
    {        
        'input': [1, 2, 3],
        'output': [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]
    },
    {
        'input': [0, 1],
        'output': [[0, 1], [1, 0]]
    },
    {
        'input': [1],
        'output': [[1]]
    },
    {
        'input': [],
        'output': []
    },
    {
        'input': [1, 2, 3, 4, 5, 6],
        'output': [[6, 5, 4, 3, 2, 1], [5, 6, 4, 3, 2, 1], [4, 6, 5, 3, 2, 1], [6, 4, 5, 3, 2, 1], [5, 4, 6, 3, 2, 1], [4, 5, 6, 3, 2, 1], [3, 6, 5, 4, 2, 1], [6, 3, 5, 4, 2, 1], [5, 3, 6, 4, 2, 1], [3, 5, 6, 4, 2, 1], [6, 5, 3, 4, 2, 1], [5, 6, 3, 4, 2, 1], [4, 3, 6, 5, 2, 1], [3, 4, 6, 5, 2, 1], [6, 4, 3, 5, 2, 1], [4, 6, 3, 5, 2, 1], [3, 6, 4, 5, 2, 1], [6, 3, 4, 5, 2, 1], [5, 4, 3, 6, 2, 1], [4, 5, 3, 6, 2, 1], [3, 5, 4, 6, 2, 1], [5, 3, 4, 6, 2, 1], [4, 3, 5, 6, 2, 1], [3, 4, 5, 6, 2, 1], [2, 6, 5, 4, 3, 1], [6, 2, 5, 4, 3, 1], [5, 2, 6, 4, 3, 1], [2, 5, 6, 4, 3, 1], [6, 5, 2, 4, 3, 1], [5, 6, 2, 4, 3, 1], [4, 2, 6, 5, 3, 1], [2, 4, 6, 5, 3, 1], [6, 4, 2, 5, 3, 1], [4, 6, 2, 5, 3, 1], [2, 6, 4, 5, 3, 1], [6, 2, 4, 5, 3, 1], [5, 4, 2, 6, 3, 1], [4, 5, 2, 6, 3, 1], [2, 5, 4, 6, 3, 1], [5, 2, 4, 6, 3, 1], [4, 2, 5, 6, 3, 1], [2, 4, 5, 6, 3, 1], [6, 5, 4, 2, 3, 1], [5, 6, 4, 2, 3, 1], [4, 6, 5, 2, 3, 1], [6, 4, 5, 2, 3, 1], [5, 4, 6, 2, 3, 1], [4, 5, 6, 2, 3, 1], [3, 2, 6, 5, 4, 1], [2, 3, 6, 5, 4, 1], [6, 3, 2, 5, 4, 1], [3, 6, 2, 5, 4, 1], [2, 6, 3, 5, 4, 1], [6, 2, 3, 5, 4, 1], [5, 3, 2, 6, 4, 1], [3, 5, 2, 6, 4, 1], [2, 5, 3, 6, 4, 1], [5, 2, 3, 6, 4, 1], [3, 2, 5, 6, 4, 1], [2, 3, 5, 6, 4, 1], [6, 5, 3, 2, 4, 1], [5, 6, 3, 2, 4, 1], [3, 6, 5, 2, 4, 1], [6, 3, 5, 2, 4, 1], [5, 3, 6, 2, 4, 1], [3, 5, 6, 2, 4, 1], [2, 6, 5, 3, 4, 1], [6, 2, 5, 3, 4, 1], [5, 2, 6, 3, 4, 1], [2, 5, 6, 3, 4, 1], [6, 5, 2, 3, 4, 1], [5, 6, 2, 3, 4, 1], [4, 3, 2, 6, 5, 1], [3, 4, 2, 6, 5, 1], [2, 4, 3, 6, 5, 1], [4, 2, 3, 6, 5, 1], [3, 2, 4, 6, 5, 1], [2, 3, 4, 6, 5, 1], [6, 4, 3, 2, 5, 1], [4, 6, 3, 2, 5, 1], [3, 6, 4, 2, 5, 1], [6, 3, 4, 2, 5, 1], [4, 3, 6, 2, 5, 1], [3, 4, 6, 2, 5, 1], [2, 6, 4, 3, 5, 1], [6, 2, 4, 3, 5, 1], [4, 2, 6, 3, 5, 1], [2, 4, 6, 3, 5, 1], [6, 4, 2, 3, 5, 1], [4, 6, 2, 3, 5, 1], [3, 2, 6, 4, 5, 1], [2, 3, 6, 4, 5, 1], [6, 3, 2, 4, 5, 1], [3, 6, 2, 4, 5, 1], [2, 6, 3, 4, 5, 1], [6, 2, 3, 4, 5, 1], [5, 4, 3, 2, 6, 1], [4, 5, 3, 2, 6, 1], [3, 5, 4, 2, 6, 1], [5, 3, 4, 2, 6, 1], [4, 3, 5, 2, 6, 1], [3, 4, 5, 2, 6, 1], [2, 5, 4, 3, 6, 1], [5, 2, 4, 3, 6, 1], [4, 2, 5, 3, 6, 1], [2, 4, 5, 3, 6, 1], [5, 4, 2, 3, 6, 1], [4, 5, 2, 3, 6, 1], [3, 2, 5, 4, 6, 1], [2, 3, 5, 4, 6, 1], [5, 3, 2, 4, 6, 1], [3, 5, 2, 4, 6, 1], [2, 5, 3, 4, 6, 1], [5, 2, 3, 4, 6, 1], [4, 3, 2, 5, 6, 1], [3, 4, 2, 5, 6, 1], [2, 4, 3, 5, 6, 1], [4, 2, 3, 5, 6, 1], [3, 2, 4, 5, 6, 1], [2, 3, 4, 5, 6, 1], [1, 6, 5, 4, 3, 2], [6, 1, 5, 4, 3, 2], [5, 1, 6, 4, 3, 2], [1, 5, 6, 4, 3, 2], [6, 5, 1, 4, 3, 2], [5, 6, 1, 4, 3, 2], [4, 1, 6, 5, 3, 2], [1, 4, 6, 5, 3, 2], [6, 4, 1, 5, 3, 2], [4, 6, 1, 5, 3, 2], [1, 6, 4, 5, 3, 2], [6, 1, 4, 5, 3, 2], [5, 4, 1, 6, 3, 2], [4, 5, 1, 6, 3, 2], [1, 5, 4, 6, 3, 2], [5, 1, 4, 6, 3, 2], [4, 1, 5, 6, 3, 2], [1, 4, 5, 6, 3, 2], [6, 5, 4, 1, 3, 2], [5, 6, 4, 1, 3, 2], [4, 6, 5, 1, 3, 2], [6, 4, 5, 1, 3, 2], [5, 4, 6, 1, 3, 2], [4, 5, 6, 1, 3, 2], [3, 1, 6, 5, 4, 2], [1, 3, 6, 5, 4, 2], [6, 3, 1, 5, 4, 2], [3, 6, 1, 5, 4, 2], [1, 6, 3, 5, 4, 2], [6, 1, 3, 5, 4, 2], [5, 3, 1, 6, 4, 2], [3, 5, 1, 6, 4, 2], [1, 5, 3, 6, 4, 2], [5, 1, 3, 6, 4, 2], [3, 1, 5, 6, 4, 2], [1, 3, 5, 6, 4, 2], [6, 5, 3, 1, 4, 2], [5, 6, 3, 1, 4, 2], [3, 6, 5, 1, 4, 2], [6, 3, 5, 1, 4, 2], [5, 3, 6, 1, 4, 2], [3, 5, 6, 1, 4, 2], [1, 6, 5, 3, 4, 2], [6, 1, 5, 3, 4, 2], [5, 1, 6, 3, 4, 2], [1, 5, 6, 3, 4, 2], [6, 5, 1, 3, 4, 2], [5, 6, 1, 3, 4, 2], [4, 3, 1, 6, 5, 2], [3, 4, 1, 6, 5, 2], [1, 4, 3, 6, 5, 2], [4, 1, 3, 6, 5, 2], [3, 1, 4, 6, 5, 2], [1, 3, 4, 6, 5, 2], [6, 4, 3, 1, 5, 2], [4, 6, 3, 1, 5, 2], [3, 6, 4, 1, 5, 2], [6, 3, 4, 1, 5, 2], [4, 3, 6, 1, 5, 2], [3, 4, 6, 1, 5, 2], [1, 6, 4, 3, 5, 2], [6, 1, 4, 3, 5, 2], [4, 1, 6, 3, 5, 2], [1, 4, 6, 3, 5, 2], [6, 4, 1, 3, 5, 2], [4, 6, 1, 3, 5, 2], [3, 1, 6, 4, 5, 2], [1, 3, 6, 4, 5, 2], [6, 3, 1, 4, 5, 2], [3, 6, 1, 4, 5, 2], [1, 6, 3, 4, 5, 2], [6, 1, 3, 4, 5, 2], [5, 4, 3, 1, 6, 2], [4, 5, 3, 1, 6, 2], [3, 5, 4, 1, 6, 2], [5, 3, 4, 1, 6, 2], [4, 3, 5, 1, 6, 2], [3, 4, 5, 1, 6, 2], [1, 5, 4, 3, 6, 2], [5, 1, 4, 3, 6, 2], [4, 1, 5, 3, 6, 2], [1, 4, 5, 3, 6, 2], [5, 4, 1, 3, 6, 2], [4, 5, 1, 3, 6, 2], [3, 1, 5, 4, 6, 2], [1, 3, 5, 4, 6, 2], [5, 3, 1, 4, 6, 2], [3, 5, 1, 4, 6, 2], [1, 5, 3, 4, 6, 2], [5, 1, 3, 4, 6, 2], [4, 3, 1, 5, 6, 2], [3, 4, 1, 5, 6, 2], [1, 4, 3, 5, 6, 2], [4, 1, 3, 5, 6, 2], [3, 1, 4, 5, 6, 2], [1, 3, 4, 5, 6, 2], [6, 5, 4, 3, 1, 2], [5, 6, 4, 3, 1, 2], [4, 6, 5, 3, 1, 2], [6, 4, 5, 3, 1, 2], [5, 4, 6, 3, 1, 2], [4, 5, 6, 3, 1, 2], [3, 6, 5, 4, 1, 2], [6, 3, 5, 4, 1, 2], [5, 3, 6, 4, 1, 2], [3, 5, 6, 4, 1, 2], [6, 5, 3, 4, 1, 2], [5, 6, 3, 4, 1, 2], [4, 3, 6, 5, 1, 2], [3, 4, 6, 5, 1, 2], [6, 4, 3, 5, 1, 2], [4, 6, 3, 5, 1, 2], [3, 6, 4, 5, 1, 2], [6, 3, 4, 5, 1, 2], [5, 4, 3, 6, 1, 2], [4, 5, 3, 6, 1, 2], [3, 5, 4, 6, 1, 2], [5, 3, 4, 6, 1, 2], [4, 3, 5, 6, 1, 2], [3, 4, 5, 6, 1, 2], [2, 1, 6, 5, 4, 3], [1, 2, 6, 5, 4, 3], [6, 2, 1, 5, 4, 3], [2, 6, 1, 5, 4, 3], [1, 6, 2, 5, 4, 3], [6, 1, 2, 5, 4, 3], [5, 2, 1, 6, 4, 3], [2, 5, 1, 6, 4, 3], [1, 5, 2, 6, 4, 3], [5, 1, 2, 6, 4, 3], [2, 1, 5, 6, 4, 3], [1, 2, 5, 6, 4, 3], [6, 5, 2, 1, 4, 3], [5, 6, 2, 1, 4, 3], [2, 6, 5, 1, 4, 3], [6, 2, 5, 1, 4, 3], [5, 2, 6, 1, 4, 3], [2, 5, 6, 1, 4, 3], [1, 6, 5, 2, 4, 3], [6, 1, 5, 2, 4, 3], [5, 1, 6, 2, 4, 3], [1, 5, 6, 2, 4, 3], [6, 5, 1, 2, 4, 3], [5, 6, 1, 2, 4, 3], [4, 2, 1, 6, 5, 3], [2, 4, 1, 6, 5, 3], [1, 4, 2, 6, 5, 3], [4, 1, 2, 6, 5, 3], [2, 1, 4, 6, 5, 3], [1, 2, 4, 6, 5, 3], [6, 4, 2, 1, 5, 3], [4, 6, 2, 1, 5, 3], [2, 6, 4, 1, 5, 3], [6, 2, 4, 1, 5, 3], [4, 2, 6, 1, 5, 3], [2, 4, 6, 1, 5, 3], [1, 6, 4, 2, 5, 3], [6, 1, 4, 2, 5, 3], [4, 1, 6, 2, 5, 3], [1, 4, 6, 2, 5, 3], [6, 4, 1, 2, 5, 3], [4, 6, 1, 2, 5, 3], [2, 1, 6, 4, 5, 3], [1, 2, 6, 4, 5, 3], [6, 2, 1, 4, 5, 3], [2, 6, 1, 4, 5, 3], [1, 6, 2, 4, 5, 3], [6, 1, 2, 4, 5, 3], [5, 4, 2, 1, 6, 3], [4, 5, 2, 1, 6, 3], [2, 5, 4, 1, 6, 3], [5, 2, 4, 1, 6, 3], [4, 2, 5, 1, 6, 3], [2, 4, 5, 1, 6, 3], [1, 5, 4, 2, 6, 3], [5, 1, 4, 2, 6, 3], [4, 1, 5, 2, 6, 3], [1, 4, 5, 2, 6, 3], [5, 4, 1, 2, 6, 3], [4, 5, 1, 2, 6, 3], [2, 1, 5, 4, 6, 3], [1, 2, 5, 4, 6, 3], [5, 2, 1, 4, 6, 3], [2, 5, 1, 4, 6, 3], [1, 5, 2, 4, 6, 3], [5, 1, 2, 4, 6, 3], [4, 2, 1, 5, 6, 3], [2, 4, 1, 5, 6, 3], [1, 4, 2, 5, 6, 3], [4, 1, 2, 5, 6, 3], [2, 1, 4, 5, 6, 3], [1, 2, 4, 5, 6, 3], [6, 5, 4, 2, 1, 3], [5, 6, 4, 2, 1, 3], [4, 6, 5, 2, 1, 3], [6, 4, 5, 2, 1, 3], [5, 4, 6, 2, 1, 3], [4, 5, 6, 2, 1, 3], [2, 6, 5, 4, 1, 3], [6, 2, 5, 4, 1, 3], [5, 2, 6, 4, 1, 3], [2, 5, 6, 4, 1, 3], [6, 5, 2, 4, 1, 3], [5, 6, 2, 4, 1, 3], [4, 2, 6, 5, 1, 3], [2, 4, 6, 5, 1, 3], [6, 4, 2, 5, 1, 3], [4, 6, 2, 5, 1, 3], [2, 6, 4, 5, 1, 3], [6, 2, 4, 5, 1, 3], [5, 4, 2, 6, 1, 3], [4, 5, 2, 6, 1, 3], [2, 5, 4, 6, 1, 3], [5, 2, 4, 6, 1, 3], [4, 2, 5, 6, 1, 3], [2, 4, 5, 6, 1, 3], [1, 6, 5, 4, 2, 3], [6, 1, 5, 4, 2, 3], [5, 1, 6, 4, 2, 3], [1, 5, 6, 4, 2, 3], [6, 5, 1, 4, 2, 3], [5, 6, 1, 4, 2, 3], [4, 1, 6, 5, 2, 3], [1, 4, 6, 5, 2, 3], [6, 4, 1, 5, 2, 3], [4, 6, 1, 5, 2, 3], [1, 6, 4, 5, 2, 3], [6, 1, 4, 5, 2, 3], [5, 4, 1, 6, 2, 3], [4, 5, 1, 6, 2, 3], [1, 5, 4, 6, 2, 3], [5, 1, 4, 6, 2, 3], [4, 1, 5, 6, 2, 3], [1, 4, 5, 6, 2, 3], [6, 5, 4, 1, 2, 3], [5, 6, 4, 1, 2, 3], [4, 6, 5, 1, 2, 3], [6, 4, 5, 1, 2, 3], [5, 4, 6, 1, 2, 3], [4, 5, 6, 1, 2, 3], [3, 2, 1, 6, 5, 4], [2, 3, 1, 6, 5, 4], [1, 3, 2, 6, 5, 4], [3, 1, 2, 6, 5, 4], [2, 1, 3, 6, 5, 4], [1, 2, 3, 6, 5, 4], [6, 3, 2, 1, 5, 4], [3, 6, 2, 1, 5, 4], [2, 6, 3, 1, 5, 4], [6, 2, 3, 1, 5, 4], [3, 2, 6, 1, 5, 4], [2, 3, 6, 1, 5, 4], [1, 6, 3, 2, 5, 4], [6, 1, 3, 2, 5, 4], [3, 1, 6, 2, 5, 4], [1, 3, 6, 2, 5, 4], [6, 3, 1, 2, 5, 4], [3, 6, 1, 2, 5, 4], [2, 1, 6, 3, 5, 4], [1, 2, 6, 3, 5, 4], [6, 2, 1, 3, 5, 4], [2, 6, 1, 3, 5, 4], [1, 6, 2, 3, 5, 4], [6, 1, 2, 3, 5, 4], [5, 3, 2, 1, 6, 4], [3, 5, 2, 1, 6, 4], [2, 5, 3, 1, 6, 4], [5, 2, 3, 1, 6, 4], [3, 2, 5, 1, 6, 4], [2, 3, 5, 1, 6, 4], [1, 5, 3, 2, 6, 4], [5, 1, 3, 2, 6, 4], [3, 1, 5, 2, 6, 4], [1, 3, 5, 2, 6, 4], [5, 3, 1, 2, 6, 4], [3, 5, 1, 2, 6, 4], [2, 1, 5, 3, 6, 4], [1, 2, 5, 3, 6, 4], [5, 2, 1, 3, 6, 4], [2, 5, 1, 3, 6, 4], [1, 5, 2, 3, 6, 4], [5, 1, 2, 3, 6, 4], [3, 2, 1, 5, 6, 4], [2, 3, 1, 5, 6, 4], [1, 3, 2, 5, 6, 4], [3, 1, 2, 5, 6, 4], [2, 1, 3, 5, 6, 4], [1, 2, 3, 5, 6, 4], [6, 5, 3, 2, 1, 4], [5, 6, 3, 2, 1, 4], [3, 6, 5, 2, 1, 4], [6, 3, 5, 2, 1, 4], [5, 3, 6, 2, 1, 4], [3, 5, 6, 2, 1, 4], [2, 6, 5, 3, 1, 4], [6, 2, 5, 3, 1, 4], [5, 2, 6, 3, 1, 4], [2, 5, 6, 3, 1, 4], [6, 5, 2, 3, 1, 4], [5, 6, 2, 3, 1, 4], [3, 2, 6, 5, 1, 4], [2, 3, 6, 5, 1, 4], [6, 3, 2, 5, 1, 4], [3, 6, 2, 5, 1, 4], [2, 6, 3, 5, 1, 4], [6, 2, 3, 5, 1, 4], [5, 3, 2, 6, 1, 4], [3, 5, 2, 6, 1, 4], [2, 5, 3, 6, 1, 4], [5, 2, 3, 6, 1, 4], [3, 2, 5, 6, 1, 4], [2, 3, 5, 6, 1, 4], [1, 6, 5, 3, 2, 4], [6, 1, 5, 3, 2, 4], [5, 1, 6, 3, 2, 4], [1, 5, 6, 3, 2, 4], [6, 5, 1, 3, 2, 4], [5, 6, 1, 3, 2, 4], [3, 1, 6, 5, 2, 4], [1, 3, 6, 5, 2, 4], [6, 3, 1, 5, 2, 4], [3, 6, 1, 5, 2, 4], [1, 6, 3, 5, 2, 4], [6, 1, 3, 5, 2, 4], [5, 3, 1, 6, 2, 4], [3, 5, 1, 6, 2, 4], [1, 5, 3, 6, 2, 4], [5, 1, 3, 6, 2, 4], [3, 1, 5, 6, 2, 4], [1, 3, 5, 6, 2, 4], [6, 5, 3, 1, 2, 4], [5, 6, 3, 1, 2, 4], [3, 6, 5, 1, 2, 4], [6, 3, 5, 1, 2, 4], [5, 3, 6, 1, 2, 4], [3, 5, 6, 1, 2, 4], [2, 1, 6, 5, 3, 4], [1, 2, 6, 5, 3, 4], [6, 2, 1, 5, 3, 4], [2, 6, 1, 5, 3, 4], [1, 6, 2, 5, 3, 4], [6, 1, 2, 5, 3, 4], [5, 2, 1, 6, 3, 4], [2, 5, 1, 6, 3, 4], [1, 5, 2, 6, 3, 4], [5, 1, 2, 6, 3, 4], [2, 1, 5, 6, 3, 4], [1, 2, 5, 6, 3, 4], [6, 5, 2, 1, 3, 4], [5, 6, 2, 1, 3, 4], [2, 6, 5, 1, 3, 4], [6, 2, 5, 1, 3, 4], [5, 2, 6, 1, 3, 4], [2, 5, 6, 1, 3, 4], [1, 6, 5, 2, 3, 4], [6, 1, 5, 2, 3, 4], [5, 1, 6, 2, 3, 4], [1, 5, 6, 2, 3, 4], [6, 5, 1, 2, 3, 4], [5, 6, 1, 2, 3, 4], [4, 3, 2, 1, 6, 5], [3, 4, 2, 1, 6, 5], [2, 4, 3, 1, 6, 5], [4, 2, 3, 1, 6, 5], [3, 2, 4, 1, 6, 5], [2, 3, 4, 1, 6, 5], [1, 4, 3, 2, 6, 5], [4, 1, 3, 2, 6, 5], [3, 1, 4, 2, 6, 5], [1, 3, 4, 2, 6, 5], [4, 3, 1, 2, 6, 5], [3, 4, 1, 2, 6, 5], [2, 1, 4, 3, 6, 5], [1, 2, 4, 3, 6, 5], [4, 2, 1, 3, 6, 5], [2, 4, 1, 3, 6, 5], [1, 4, 2, 3, 6, 5], [4, 1, 2, 3, 6, 5], [3, 2, 1, 4, 6, 5], [2, 3, 1, 4, 6, 5], [1, 3, 2, 4, 6, 5], [3, 1, 2, 4, 6, 5], [2, 1, 3, 4, 6, 5], [1, 2, 3, 4, 6, 5], [6, 4, 3, 2, 1, 5], [4, 6, 3, 2, 1, 5], [3, 6, 4, 2, 1, 5], [6, 3, 4, 2, 1, 5], [4, 3, 6, 2, 1, 5], [3, 4, 6, 2, 1, 5], [2, 6, 4, 3, 1, 5], [6, 2, 4, 3, 1, 5], [4, 2, 6, 3, 1, 5], [2, 4, 6, 3, 1, 5], [6, 4, 2, 3, 1, 5], [4, 6, 2, 3, 1, 5], [3, 2, 6, 4, 1, 5], [2, 3, 6, 4, 1, 5], [6, 3, 2, 4, 1, 5], [3, 6, 2, 4, 1, 5], [2, 6, 3, 4, 1, 5], [6, 2, 3, 4, 1, 5], [4, 3, 2, 6, 1, 5], [3, 4, 2, 6, 1, 5], [2, 4, 3, 6, 1, 5], [4, 2, 3, 6, 1, 5], [3, 2, 4, 6, 1, 5], [2, 3, 4, 6, 1, 5], [1, 6, 4, 3, 2, 5], [6, 1, 4, 3, 2, 5], [4, 1, 6, 3, 2, 5], [1, 4, 6, 3, 2, 5], [6, 4, 1, 3, 2, 5], [4, 6, 1, 3, 2, 5], [3, 1, 6, 4, 2, 5], [1, 3, 6, 4, 2, 5], [6, 3, 1, 4, 2, 5], [3, 6, 1, 4, 2, 5], [1, 6, 3, 4, 2, 5], [6, 1, 3, 4, 2, 5], [4, 3, 1, 6, 2, 5], [3, 4, 1, 6, 2, 5], [1, 4, 3, 6, 2, 5], [4, 1, 3, 6, 2, 5], [3, 1, 4, 6, 2, 5], [1, 3, 4, 6, 2, 5], [6, 4, 3, 1, 2, 5], [4, 6, 3, 1, 2, 5], [3, 6, 4, 1, 2, 5], [6, 3, 4, 1, 2, 5], [4, 3, 6, 1, 2, 5], [3, 4, 6, 1, 2, 5], [2, 1, 6, 4, 3, 5], [1, 2, 6, 4, 3, 5], [6, 2, 1, 4, 3, 5], [2, 6, 1, 4, 3, 5], [1, 6, 2, 4, 3, 5], [6, 1, 2, 4, 3, 5], [4, 2, 1, 6, 3, 5], [2, 4, 1, 6, 3, 5], [1, 4, 2, 6, 3, 5], [4, 1, 2, 6, 3, 5], [2, 1, 4, 6, 3, 5], [1, 2, 4, 6, 3, 5], [6, 4, 2, 1, 3, 5], [4, 6, 2, 1, 3, 5], [2, 6, 4, 1, 3, 5], [6, 2, 4, 1, 3, 5], [4, 2, 6, 1, 3, 5], [2, 4, 6, 1, 3, 5], [1, 6, 4, 2, 3, 5], [6, 1, 4, 2, 3, 5], [4, 1, 6, 2, 3, 5], [1, 4, 6, 2, 3, 5], [6, 4, 1, 2, 3, 5], [4, 6, 1, 2, 3, 5], [3, 2, 1, 6, 4, 5], [2, 3, 1, 6, 4, 5], [1, 3, 2, 6, 4, 5], [3, 1, 2, 6, 4, 5], [2, 1, 3, 6, 4, 5], [1, 2, 3, 6, 4, 5], [6, 3, 2, 1, 4, 5], [3, 6, 2, 1, 4, 5], [2, 6, 3, 1, 4, 5], [6, 2, 3, 1, 4, 5], [3, 2, 6, 1, 4, 5], [2, 3, 6, 1, 4, 5], [1, 6, 3, 2, 4, 5], [6, 1, 3, 2, 4, 5], [3, 1, 6, 2, 4, 5], [1, 3, 6, 2, 4, 5], [6, 3, 1, 2, 4, 5], [3, 6, 1, 2, 4, 5], [2, 1, 6, 3, 4, 5], [1, 2, 6, 3, 4, 5], [6, 2, 1, 3, 4, 5], [2, 6, 1, 3, 4, 5], [1, 6, 2, 3, 4, 5], [6, 1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 6], [4, 5, 3, 2, 1, 6], [3, 5, 4, 2, 1, 6], [5, 3, 4, 2, 1, 6], [4, 3, 5, 2, 1, 6], [3, 4, 5, 2, 1, 6], [2, 5, 4, 3, 1, 6], [5, 2, 4, 3, 1, 6], [4, 2, 5, 3, 1, 6], [2, 4, 5, 3, 1, 6], [5, 4, 2, 3, 1, 6], [4, 5, 2, 3, 1, 6], [3, 2, 5, 4, 1, 6], [2, 3, 5, 4, 1, 6], [5, 3, 2, 4, 1, 6], [3, 5, 2, 4, 1, 6], [2, 5, 3, 4, 1, 6], [5, 2, 3, 4, 1, 6], [4, 3, 2, 5, 1, 6], [3, 4, 2, 5, 1, 6], [2, 4, 3, 5, 1, 6], [4, 2, 3, 5, 1, 6], [3, 2, 4, 5, 1, 6], [2, 3, 4, 5, 1, 6], [1, 5, 4, 3, 2, 6], [5, 1, 4, 3, 2, 6], [4, 1, 5, 3, 2, 6], [1, 4, 5, 3, 2, 6], [5, 4, 1, 3, 2, 6], [4, 5, 1, 3, 2, 6], [3, 1, 5, 4, 2, 6], [1, 3, 5, 4, 2, 6], [5, 3, 1, 4, 2, 6], [3, 5, 1, 4, 2, 6], [1, 5, 3, 4, 2, 6], [5, 1, 3, 4, 2, 6], [4, 3, 1, 5, 2, 6], [3, 4, 1, 5, 2, 6], [1, 4, 3, 5, 2, 6], [4, 1, 3, 5, 2, 6], [3, 1, 4, 5, 2, 6], [1, 3, 4, 5, 2, 6], [5, 4, 3, 1, 2, 6], [4, 5, 3, 1, 2, 6], [3, 5, 4, 1, 2, 6], [5, 3, 4, 1, 2, 6], [4, 3, 5, 1, 2, 6], [3, 4, 5, 1, 2, 6], [2, 1, 5, 4, 3, 6], [1, 2, 5, 4, 3, 6], [5, 2, 1, 4, 3, 6], [2, 5, 1, 4, 3, 6], [1, 5, 2, 4, 3, 6], [5, 1, 2, 4, 3, 6], [4, 2, 1, 5, 3, 6], [2, 4, 1, 5, 3, 6], [1, 4, 2, 5, 3, 6], [4, 1, 2, 5, 3, 6], [2, 1, 4, 5, 3, 6], [1, 2, 4, 5, 3, 6], [5, 4, 2, 1, 3, 6], [4, 5, 2, 1, 3, 6], [2, 5, 4, 1, 3, 6], [5, 2, 4, 1, 3, 6], [4, 2, 5, 1, 3, 6], [2, 4, 5, 1, 3, 6], [1, 5, 4, 2, 3, 6], [5, 1, 4, 2, 3, 6], [4, 1, 5, 2, 3, 6], [1, 4, 5, 2, 3, 6], [5, 4, 1, 2, 3, 6], [4, 5, 1, 2, 3, 6], [3, 2, 1, 5, 4, 6], [2, 3, 1, 5, 4, 6], [1, 3, 2, 5, 4, 6], [3, 1, 2, 5, 4, 6], [2, 1, 3, 5, 4, 6], [1, 2, 3, 5, 4, 6], [5, 3, 2, 1, 4, 6], [3, 5, 2, 1, 4, 6], [2, 5, 3, 1, 4, 6], [5, 2, 3, 1, 4, 6], [3, 2, 5, 1, 4, 6], [2, 3, 5, 1, 4, 6], [1, 5, 3, 2, 4, 6], [5, 1, 3, 2, 4, 6], [3, 1, 5, 2, 4, 6], [1, 3, 5, 2, 4, 6], [5, 3, 1, 2, 4, 6], [3, 5, 1, 2, 4, 6], [2, 1, 5, 3, 4, 6], [1, 2, 5, 3, 4, 6], [5, 2, 1, 3, 4, 6], [2, 5, 1, 3, 4, 6], [1, 5, 2, 3, 4, 6], [5, 1, 2, 3, 4, 6], [4, 3, 2, 1, 5, 6], [3, 4, 2, 1, 5, 6], [2, 4, 3, 1, 5, 6], [4, 2, 3, 1, 5, 6], [3, 2, 4, 1, 5, 6], [2, 3, 4, 1, 5, 6], [1, 4, 3, 2, 5, 6], [4, 1, 3, 2, 5, 6], [3, 1, 4, 2, 5, 6], [1, 3, 4, 2, 5, 6], [4, 3, 1, 2, 5, 6], [3, 4, 1, 2, 5, 6], [2, 1, 4, 3, 5, 6], [1, 2, 4, 3, 5, 6], [4, 2, 1, 3, 5, 6], [2, 4, 1, 3, 5, 6], [1, 4, 2, 3, 5, 6], [4, 1, 2, 3, 5, 6], [3, 2, 1, 4, 5, 6], [2, 3, 1, 4, 5, 6], [1, 3, 2, 4, 5, 6], [3, 1, 2, 4, 5, 6], [2, 1, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]]
    },
    {
        'input': [100, -123, 343, 2, 3],
        'output': [[3, 2, 343, -123, 100], [2, 3, 343, -123, 100], [343, 3, 2, -123, 100], [3, 343, 2, -123, 100], [2, 343, 3, -123, 100], [343, 2, 3, -123, 100], [-123, 3, 2, 343, 100], [3, -123, 2, 343, 100], [2, -123, 3, 343, 100], [-123, 2, 3, 343, 100], [3, 2, -123, 343, 100], [2, 3, -123, 343, 100], [343, -123, 3, 2, 100], [-123, 343, 3, 2, 100], [3, 343, -123, 2, 100], [343, 3, -123, 2, 100], [-123, 3, 343, 2, 100], [3, -123, 343, 2, 100], [2, 343, -123, 3, 100], [343, 2, -123, 3, 100], [-123, 2, 343, 3, 100], [2, -123, 343, 3, 100], [343, -123, 2, 3, 100], [-123, 343, 2, 3, 100], [100, 3, 2, 343, -123], [3, 100, 2, 343, -123], [2, 100, 3, 343, -123], [100, 2, 3, 343, -123], [3, 2, 100, 343, -123], [2, 3, 100, 343, -123], [343, 100, 3, 2, -123], [100, 343, 3, 2, -123], [3, 343, 100, 2, -123], [343, 3, 100, 2, -123], [100, 3, 343, 2, -123], [3, 100, 343, 2, -123], [2, 343, 100, 3, -123], [343, 2, 100, 3, -123], [100, 2, 343, 3, -123], [2, 100, 343, 3, -123], [343, 100, 2, 3, -123], [100, 343, 2, 3, -123], [3, 2, 343, 100, -123], [2, 3, 343, 100, -123], [343, 3, 2, 100, -123], [3, 343, 2, 100, -123], [2, 343, 3, 100, -123], [343, 2, 3, 100, -123], [-123, 100, 3, 2, 343], [100, -123, 3, 2, 343], [3, -123, 100, 2, 343], [-123, 3, 100, 2, 343], [100, 3, -123, 2, 343], [3, 100, -123, 2, 343], [2, -123, 100, 3, 343], [-123, 2, 100, 3, 343], [100, 2, -123, 3, 343], [2, 100, -123, 3, 343], [-123, 100, 2, 3, 343], [100, -123, 2, 3, 343], [3, 2, -123, 100, 343], [2, 3, -123, 100, 343], [-123, 3, 2, 100, 343], [3, -123, 2, 100, 343], [2, -123, 3, 100, 343], [-123, 2, 3, 100, 343], [100, 3, 2, -123, 343], [3, 100, 2, -123, 343], [2, 100, 3, -123, 343], [100, 2, 3, -123, 343], [3, 2, 100, -123, 343], [2, 3, 100, -123, 343], [343, -123, 100, 3, 2], [-123, 343, 100, 3, 2], [100, 343, -123, 3, 2], [343, 100, -123, 3, 2], [-123, 100, 343, 3, 2], [100, -123, 343, 3, 2], [3, 343, -123, 100, 2], [343, 3, -123, 100, 2], [-123, 3, 343, 100, 2], [3, -123, 343, 100, 2], [343, -123, 3, 100, 2], [-123, 343, 3, 100, 2], [100, 3, 343, -123, 2], [3, 100, 343, -123, 2], [343, 100, 3, -123, 2], [100, 343, 3, -123, 2], [3, 343, 100, -123, 2], [343, 3, 100, -123, 2], [-123, 100, 3, 343, 2], [100, -123, 3, 343, 2], [3, -123, 100, 343, 2], [-123, 3, 100, 343, 2], [100, 3, -123, 343, 2], [3, 100, -123, 343, 2], [2, 343, -123, 100, 3], [343, 2, -123, 100, 3], [-123, 2, 343, 100, 3], [2, -123, 343, 100, 3], [343, -123, 2, 100, 3], [-123, 343, 2, 100, 3], [100, 2, 343, -123, 3], [2, 100, 343, -123, 3], [343, 100, 2, -123, 3], [100, 343, 2, -123, 3], [2, 343, 100, -123, 3], [343, 2, 100, -123, 3], [-123, 100, 2, 343, 3], [100, -123, 2, 343, 3], [2, -123, 100, 343, 3], [-123, 2, 100, 343, 3], [100, 2, -123, 343, 3], [2, 100, -123, 343, 3], [343, -123, 100, 2, 3], [-123, 343, 100, 2, 3], [100, 343, -123, 2, 3], [343, 100, -123, 2, 3], [-123, 100, 343, 2, 3], [100, -123, 343, 2, 3]]
    },
    {
        'input': [100, -123, 343, 2],
        'output': [[2, 343, -123, 100], [343, 2, -123, 100], [-123, 2, 343, 100], [2, -123, 343, 100], [343, -123, 2, 100], [-123, 343, 2, 100], [100, 2, 343, -123], [2, 100, 343, -123], [343, 100, 2, -123], [100, 343, 2, -123], [2, 343, 100, -123], [343, 2, 100, -123], [-123, 100, 2, 343], [100, -123, 2, 343], [2, -123, 100, 343], [-123, 2, 100, 343], [100, 2, -123, 343], [2, 100, -123, 343], [343, -123, 100, 2], [-123, 343, 100, 2], [100, 343, -123, 2], [343, 100, -123, 2], [-123, 100, 343, 2], [100, -123, 343, 2]]
    }
]

s = Solution()
for test in params:
    result = s.permute(test['input'])
    result_set = set([tuple(lst) for lst in result])
    output_set = set([tuple(lst) for lst in test['output']])
    if result_set == output_set:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input: {test['input']} Expected output: {test['output']} but got {result}"")","let params = [    
    {        
        'input': [1, 2, 3],
        'output': [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]
    },
    {
        'input': [0, 1],
        'output': [[0, 1], [1, 0]]
    },
    {
        'input': [1],
        'output': [[1]]
    },
    {
        'input': [],
        'output': [[]]
    },
    {
        'input': [1, 2, 3, 4, 5, 6],
        'output': [[6, 5, 4, 3, 2, 1], [5, 6, 4, 3, 2, 1], [4, 6, 5, 3, 2, 1], [6, 4, 5, 3, 2, 1], [5, 4, 6, 3, 2, 1], [4, 5, 6, 3, 2, 1], [3, 6, 5, 4, 2, 1], [6, 3, 5, 4, 2, 1], [5, 3, 6, 4, 2, 1], [3, 5, 6, 4, 2, 1], [6, 5, 3, 4, 2, 1], [5, 6, 3, 4, 2, 1], [4, 3, 6, 5, 2, 1], [3, 4, 6, 5, 2, 1], [6, 4, 3, 5, 2, 1], [4, 6, 3, 5, 2, 1], [3, 6, 4, 5, 2, 1], [6, 3, 4, 5, 2, 1], [5, 4, 3, 6, 2, 1], [4, 5, 3, 6, 2, 1], [3, 5, 4, 6, 2, 1], [5, 3, 4, 6, 2, 1], [4, 3, 5, 6, 2, 1], [3, 4, 5, 6, 2, 1], [2, 6, 5, 4, 3, 1], [6, 2, 5, 4, 3, 1], [5, 2, 6, 4, 3, 1], [2, 5, 6, 4, 3, 1], [6, 5, 2, 4, 3, 1], [5, 6, 2, 4, 3, 1], [4, 2, 6, 5, 3, 1], [2, 4, 6, 5, 3, 1], [6, 4, 2, 5, 3, 1], [4, 6, 2, 5, 3, 1], [2, 6, 4, 5, 3, 1], [6, 2, 4, 5, 3, 1], [5, 4, 2, 6, 3, 1], [4, 5, 2, 6, 3, 1], [2, 5, 4, 6, 3, 1], [5, 2, 4, 6, 3, 1], [4, 2, 5, 6, 3, 1], [2, 4, 5, 6, 3, 1], [6, 5, 4, 2, 3, 1], [5, 6, 4, 2, 3, 1], [4, 6, 5, 2, 3, 1], [6, 4, 5, 2, 3, 1], [5, 4, 6, 2, 3, 1], [4, 5, 6, 2, 3, 1], [3, 2, 6, 5, 4, 1], [2, 3, 6, 5, 4, 1], [6, 3, 2, 5, 4, 1], [3, 6, 2, 5, 4, 1], [2, 6, 3, 5, 4, 1], [6, 2, 3, 5, 4, 1], [5, 3, 2, 6, 4, 1], [3, 5, 2, 6, 4, 1], [2, 5, 3, 6, 4, 1], [5, 2, 3, 6, 4, 1], [3, 2, 5, 6, 4, 1], [2, 3, 5, 6, 4, 1], [6, 5, 3, 2, 4, 1], [5, 6, 3, 2, 4, 1], [3, 6, 5, 2, 4, 1], [6, 3, 5, 2, 4, 1], [5, 3, 6, 2, 4, 1], [3, 5, 6, 2, 4, 1], [2, 6, 5, 3, 4, 1], [6, 2, 5, 3, 4, 1], [5, 2, 6, 3, 4, 1], [2, 5, 6, 3, 4, 1], [6, 5, 2, 3, 4, 1], [5, 6, 2, 3, 4, 1], [4, 3, 2, 6, 5, 1], [3, 4, 2, 6, 5, 1], [2, 4, 3, 6, 5, 1], [4, 2, 3, 6, 5, 1], [3, 2, 4, 6, 5, 1], [2, 3, 4, 6, 5, 1], [6, 4, 3, 2, 5, 1], [4, 6, 3, 2, 5, 1], [3, 6, 4, 2, 5, 1], [6, 3, 4, 2, 5, 1], [4, 3, 6, 2, 5, 1], [3, 4, 6, 2, 5, 1], [2, 6, 4, 3, 5, 1], [6, 2, 4, 3, 5, 1], [4, 2, 6, 3, 5, 1], [2, 4, 6, 3, 5, 1], [6, 4, 2, 3, 5, 1], [4, 6, 2, 3, 5, 1], [3, 2, 6, 4, 5, 1], [2, 3, 6, 4, 5, 1], [6, 3, 2, 4, 5, 1], [3, 6, 2, 4, 5, 1], [2, 6, 3, 4, 5, 1], [6, 2, 3, 4, 5, 1], [5, 4, 3, 2, 6, 1], [4, 5, 3, 2, 6, 1], [3, 5, 4, 2, 6, 1], [5, 3, 4, 2, 6, 1], [4, 3, 5, 2, 6, 1], [3, 4, 5, 2, 6, 1], [2, 5, 4, 3, 6, 1], [5, 2, 4, 3, 6, 1], [4, 2, 5, 3, 6, 1], [2, 4, 5, 3, 6, 1], [5, 4, 2, 3, 6, 1], [4, 5, 2, 3, 6, 1], [3, 2, 5, 4, 6, 1], [2, 3, 5, 4, 6, 1], [5, 3, 2, 4, 6, 1], [3, 5, 2, 4, 6, 1], [2, 5, 3, 4, 6, 1], [5, 2, 3, 4, 6, 1], [4, 3, 2, 5, 6, 1], [3, 4, 2, 5, 6, 1], [2, 4, 3, 5, 6, 1], [4, 2, 3, 5, 6, 1], [3, 2, 4, 5, 6, 1], [2, 3, 4, 5, 6, 1], [1, 6, 5, 4, 3, 2], [6, 1, 5, 4, 3, 2], [5, 1, 6, 4, 3, 2], [1, 5, 6, 4, 3, 2], [6, 5, 1, 4, 3, 2], [5, 6, 1, 4, 3, 2], [4, 1, 6, 5, 3, 2], [1, 4, 6, 5, 3, 2], [6, 4, 1, 5, 3, 2], [4, 6, 1, 5, 3, 2], [1, 6, 4, 5, 3, 2], [6, 1, 4, 5, 3, 2], [5, 4, 1, 6, 3, 2], [4, 5, 1, 6, 3, 2], [1, 5, 4, 6, 3, 2], [5, 1, 4, 6, 3, 2], [4, 1, 5, 6, 3, 2], [1, 4, 5, 6, 3, 2], [6, 5, 4, 1, 3, 2], [5, 6, 4, 1, 3, 2], [4, 6, 5, 1, 3, 2], [6, 4, 5, 1, 3, 2], [5, 4, 6, 1, 3, 2], [4, 5, 6, 1, 3, 2], [3, 1, 6, 5, 4, 2], [1, 3, 6, 5, 4, 2], [6, 3, 1, 5, 4, 2], [3, 6, 1, 5, 4, 2], [1, 6, 3, 5, 4, 2], [6, 1, 3, 5, 4, 2], [5, 3, 1, 6, 4, 2], [3, 5, 1, 6, 4, 2], [1, 5, 3, 6, 4, 2], [5, 1, 3, 6, 4, 2], [3, 1, 5, 6, 4, 2], [1, 3, 5, 6, 4, 2], [6, 5, 3, 1, 4, 2], [5, 6, 3, 1, 4, 2], [3, 6, 5, 1, 4, 2], [6, 3, 5, 1, 4, 2], [5, 3, 6, 1, 4, 2], [3, 5, 6, 1, 4, 2], [1, 6, 5, 3, 4, 2], [6, 1, 5, 3, 4, 2], [5, 1, 6, 3, 4, 2], [1, 5, 6, 3, 4, 2], [6, 5, 1, 3, 4, 2], [5, 6, 1, 3, 4, 2], [4, 3, 1, 6, 5, 2], [3, 4, 1, 6, 5, 2], [1, 4, 3, 6, 5, 2], [4, 1, 3, 6, 5, 2], [3, 1, 4, 6, 5, 2], [1, 3, 4, 6, 5, 2], [6, 4, 3, 1, 5, 2], [4, 6, 3, 1, 5, 2], [3, 6, 4, 1, 5, 2], [6, 3, 4, 1, 5, 2], [4, 3, 6, 1, 5, 2], [3, 4, 6, 1, 5, 2], [1, 6, 4, 3, 5, 2], [6, 1, 4, 3, 5, 2], [4, 1, 6, 3, 5, 2], [1, 4, 6, 3, 5, 2], [6, 4, 1, 3, 5, 2], [4, 6, 1, 3, 5, 2], [3, 1, 6, 4, 5, 2], [1, 3, 6, 4, 5, 2], [6, 3, 1, 4, 5, 2], [3, 6, 1, 4, 5, 2], [1, 6, 3, 4, 5, 2], [6, 1, 3, 4, 5, 2], [5, 4, 3, 1, 6, 2], [4, 5, 3, 1, 6, 2], [3, 5, 4, 1, 6, 2], [5, 3, 4, 1, 6, 2], [4, 3, 5, 1, 6, 2], [3, 4, 5, 1, 6, 2], [1, 5, 4, 3, 6, 2], [5, 1, 4, 3, 6, 2], [4, 1, 5, 3, 6, 2], [1, 4, 5, 3, 6, 2], [5, 4, 1, 3, 6, 2], [4, 5, 1, 3, 6, 2], [3, 1, 5, 4, 6, 2], [1, 3, 5, 4, 6, 2], [5, 3, 1, 4, 6, 2], [3, 5, 1, 4, 6, 2], [1, 5, 3, 4, 6, 2], [5, 1, 3, 4, 6, 2], [4, 3, 1, 5, 6, 2], [3, 4, 1, 5, 6, 2], [1, 4, 3, 5, 6, 2], [4, 1, 3, 5, 6, 2], [3, 1, 4, 5, 6, 2], [1, 3, 4, 5, 6, 2], [6, 5, 4, 3, 1, 2], [5, 6, 4, 3, 1, 2], [4, 6, 5, 3, 1, 2], [6, 4, 5, 3, 1, 2], [5, 4, 6, 3, 1, 2], [4, 5, 6, 3, 1, 2], [3, 6, 5, 4, 1, 2], [6, 3, 5, 4, 1, 2], [5, 3, 6, 4, 1, 2], [3, 5, 6, 4, 1, 2], [6, 5, 3, 4, 1, 2], [5, 6, 3, 4, 1, 2], [4, 3, 6, 5, 1, 2], [3, 4, 6, 5, 1, 2], [6, 4, 3, 5, 1, 2], [4, 6, 3, 5, 1, 2], [3, 6, 4, 5, 1, 2], [6, 3, 4, 5, 1, 2], [5, 4, 3, 6, 1, 2], [4, 5, 3, 6, 1, 2], [3, 5, 4, 6, 1, 2], [5, 3, 4, 6, 1, 2], [4, 3, 5, 6, 1, 2], [3, 4, 5, 6, 1, 2], [2, 1, 6, 5, 4, 3], [1, 2, 6, 5, 4, 3], [6, 2, 1, 5, 4, 3], [2, 6, 1, 5, 4, 3], [1, 6, 2, 5, 4, 3], [6, 1, 2, 5, 4, 3], [5, 2, 1, 6, 4, 3], [2, 5, 1, 6, 4, 3], [1, 5, 2, 6, 4, 3], [5, 1, 2, 6, 4, 3], [2, 1, 5, 6, 4, 3], [1, 2, 5, 6, 4, 3], [6, 5, 2, 1, 4, 3], [5, 6, 2, 1, 4, 3], [2, 6, 5, 1, 4, 3], [6, 2, 5, 1, 4, 3], [5, 2, 6, 1, 4, 3], [2, 5, 6, 1, 4, 3], [1, 6, 5, 2, 4, 3], [6, 1, 5, 2, 4, 3], [5, 1, 6, 2, 4, 3], [1, 5, 6, 2, 4, 3], [6, 5, 1, 2, 4, 3], [5, 6, 1, 2, 4, 3], [4, 2, 1, 6, 5, 3], [2, 4, 1, 6, 5, 3], [1, 4, 2, 6, 5, 3], [4, 1, 2, 6, 5, 3], [2, 1, 4, 6, 5, 3], [1, 2, 4, 6, 5, 3], [6, 4, 2, 1, 5, 3], [4, 6, 2, 1, 5, 3], [2, 6, 4, 1, 5, 3], [6, 2, 4, 1, 5, 3], [4, 2, 6, 1, 5, 3], [2, 4, 6, 1, 5, 3], [1, 6, 4, 2, 5, 3], [6, 1, 4, 2, 5, 3], [4, 1, 6, 2, 5, 3], [1, 4, 6, 2, 5, 3], [6, 4, 1, 2, 5, 3], [4, 6, 1, 2, 5, 3], [2, 1, 6, 4, 5, 3], [1, 2, 6, 4, 5, 3], [6, 2, 1, 4, 5, 3], [2, 6, 1, 4, 5, 3], [1, 6, 2, 4, 5, 3], [6, 1, 2, 4, 5, 3], [5, 4, 2, 1, 6, 3], [4, 5, 2, 1, 6, 3], [2, 5, 4, 1, 6, 3], [5, 2, 4, 1, 6, 3], [4, 2, 5, 1, 6, 3], [2, 4, 5, 1, 6, 3], [1, 5, 4, 2, 6, 3], [5, 1, 4, 2, 6, 3], [4, 1, 5, 2, 6, 3], [1, 4, 5, 2, 6, 3], [5, 4, 1, 2, 6, 3], [4, 5, 1, 2, 6, 3], [2, 1, 5, 4, 6, 3], [1, 2, 5, 4, 6, 3], [5, 2, 1, 4, 6, 3], [2, 5, 1, 4, 6, 3], [1, 5, 2, 4, 6, 3], [5, 1, 2, 4, 6, 3], [4, 2, 1, 5, 6, 3], [2, 4, 1, 5, 6, 3], [1, 4, 2, 5, 6, 3], [4, 1, 2, 5, 6, 3], [2, 1, 4, 5, 6, 3], [1, 2, 4, 5, 6, 3], [6, 5, 4, 2, 1, 3], [5, 6, 4, 2, 1, 3], [4, 6, 5, 2, 1, 3], [6, 4, 5, 2, 1, 3], [5, 4, 6, 2, 1, 3], [4, 5, 6, 2, 1, 3], [2, 6, 5, 4, 1, 3], [6, 2, 5, 4, 1, 3], [5, 2, 6, 4, 1, 3], [2, 5, 6, 4, 1, 3], [6, 5, 2, 4, 1, 3], [5, 6, 2, 4, 1, 3], [4, 2, 6, 5, 1, 3], [2, 4, 6, 5, 1, 3], [6, 4, 2, 5, 1, 3], [4, 6, 2, 5, 1, 3], [2, 6, 4, 5, 1, 3], [6, 2, 4, 5, 1, 3], [5, 4, 2, 6, 1, 3], [4, 5, 2, 6, 1, 3], [2, 5, 4, 6, 1, 3], [5, 2, 4, 6, 1, 3], [4, 2, 5, 6, 1, 3], [2, 4, 5, 6, 1, 3], [1, 6, 5, 4, 2, 3], [6, 1, 5, 4, 2, 3], [5, 1, 6, 4, 2, 3], [1, 5, 6, 4, 2, 3], [6, 5, 1, 4, 2, 3], [5, 6, 1, 4, 2, 3], [4, 1, 6, 5, 2, 3], [1, 4, 6, 5, 2, 3], [6, 4, 1, 5, 2, 3], [4, 6, 1, 5, 2, 3], [1, 6, 4, 5, 2, 3], [6, 1, 4, 5, 2, 3], [5, 4, 1, 6, 2, 3], [4, 5, 1, 6, 2, 3], [1, 5, 4, 6, 2, 3], [5, 1, 4, 6, 2, 3], [4, 1, 5, 6, 2, 3], [1, 4, 5, 6, 2, 3], [6, 5, 4, 1, 2, 3], [5, 6, 4, 1, 2, 3], [4, 6, 5, 1, 2, 3], [6, 4, 5, 1, 2, 3], [5, 4, 6, 1, 2, 3], [4, 5, 6, 1, 2, 3], [3, 2, 1, 6, 5, 4], [2, 3, 1, 6, 5, 4], [1, 3, 2, 6, 5, 4], [3, 1, 2, 6, 5, 4], [2, 1, 3, 6, 5, 4], [1, 2, 3, 6, 5, 4], [6, 3, 2, 1, 5, 4], [3, 6, 2, 1, 5, 4], [2, 6, 3, 1, 5, 4], [6, 2, 3, 1, 5, 4], [3, 2, 6, 1, 5, 4], [2, 3, 6, 1, 5, 4], [1, 6, 3, 2, 5, 4], [6, 1, 3, 2, 5, 4], [3, 1, 6, 2, 5, 4], [1, 3, 6, 2, 5, 4], [6, 3, 1, 2, 5, 4], [3, 6, 1, 2, 5, 4], [2, 1, 6, 3, 5, 4], [1, 2, 6, 3, 5, 4], [6, 2, 1, 3, 5, 4], [2, 6, 1, 3, 5, 4], [1, 6, 2, 3, 5, 4], [6, 1, 2, 3, 5, 4], [5, 3, 2, 1, 6, 4], [3, 5, 2, 1, 6, 4], [2, 5, 3, 1, 6, 4], [5, 2, 3, 1, 6, 4], [3, 2, 5, 1, 6, 4], [2, 3, 5, 1, 6, 4], [1, 5, 3, 2, 6, 4], [5, 1, 3, 2, 6, 4], [3, 1, 5, 2, 6, 4], [1, 3, 5, 2, 6, 4], [5, 3, 1, 2, 6, 4], [3, 5, 1, 2, 6, 4], [2, 1, 5, 3, 6, 4], [1, 2, 5, 3, 6, 4], [5, 2, 1, 3, 6, 4], [2, 5, 1, 3, 6, 4], [1, 5, 2, 3, 6, 4], [5, 1, 2, 3, 6, 4], [3, 2, 1, 5, 6, 4], [2, 3, 1, 5, 6, 4], [1, 3, 2, 5, 6, 4], [3, 1, 2, 5, 6, 4], [2, 1, 3, 5, 6, 4], [1, 2, 3, 5, 6, 4], [6, 5, 3, 2, 1, 4], [5, 6, 3, 2, 1, 4], [3, 6, 5, 2, 1, 4], [6, 3, 5, 2, 1, 4], [5, 3, 6, 2, 1, 4], [3, 5, 6, 2, 1, 4], [2, 6, 5, 3, 1, 4], [6, 2, 5, 3, 1, 4], [5, 2, 6, 3, 1, 4], [2, 5, 6, 3, 1, 4], [6, 5, 2, 3, 1, 4], [5, 6, 2, 3, 1, 4], [3, 2, 6, 5, 1, 4], [2, 3, 6, 5, 1, 4], [6, 3, 2, 5, 1, 4], [3, 6, 2, 5, 1, 4], [2, 6, 3, 5, 1, 4], [6, 2, 3, 5, 1, 4], [5, 3, 2, 6, 1, 4], [3, 5, 2, 6, 1, 4], [2, 5, 3, 6, 1, 4], [5, 2, 3, 6, 1, 4], [3, 2, 5, 6, 1, 4], [2, 3, 5, 6, 1, 4], [1, 6, 5, 3, 2, 4], [6, 1, 5, 3, 2, 4], [5, 1, 6, 3, 2, 4], [1, 5, 6, 3, 2, 4], [6, 5, 1, 3, 2, 4], [5, 6, 1, 3, 2, 4], [3, 1, 6, 5, 2, 4], [1, 3, 6, 5, 2, 4], [6, 3, 1, 5, 2, 4], [3, 6, 1, 5, 2, 4], [1, 6, 3, 5, 2, 4], [6, 1, 3, 5, 2, 4], [5, 3, 1, 6, 2, 4], [3, 5, 1, 6, 2, 4], [1, 5, 3, 6, 2, 4], [5, 1, 3, 6, 2, 4], [3, 1, 5, 6, 2, 4], [1, 3, 5, 6, 2, 4], [6, 5, 3, 1, 2, 4], [5, 6, 3, 1, 2, 4], [3, 6, 5, 1, 2, 4], [6, 3, 5, 1, 2, 4], [5, 3, 6, 1, 2, 4], [3, 5, 6, 1, 2, 4], [2, 1, 6, 5, 3, 4], [1, 2, 6, 5, 3, 4], [6, 2, 1, 5, 3, 4], [2, 6, 1, 5, 3, 4], [1, 6, 2, 5, 3, 4], [6, 1, 2, 5, 3, 4], [5, 2, 1, 6, 3, 4], [2, 5, 1, 6, 3, 4], [1, 5, 2, 6, 3, 4], [5, 1, 2, 6, 3, 4], [2, 1, 5, 6, 3, 4], [1, 2, 5, 6, 3, 4], [6, 5, 2, 1, 3, 4], [5, 6, 2, 1, 3, 4], [2, 6, 5, 1, 3, 4], [6, 2, 5, 1, 3, 4], [5, 2, 6, 1, 3, 4], [2, 5, 6, 1, 3, 4], [1, 6, 5, 2, 3, 4], [6, 1, 5, 2, 3, 4], [5, 1, 6, 2, 3, 4], [1, 5, 6, 2, 3, 4], [6, 5, 1, 2, 3, 4], [5, 6, 1, 2, 3, 4], [4, 3, 2, 1, 6, 5], [3, 4, 2, 1, 6, 5], [2, 4, 3, 1, 6, 5], [4, 2, 3, 1, 6, 5], [3, 2, 4, 1, 6, 5], [2, 3, 4, 1, 6, 5], [1, 4, 3, 2, 6, 5], [4, 1, 3, 2, 6, 5], [3, 1, 4, 2, 6, 5], [1, 3, 4, 2, 6, 5], [4, 3, 1, 2, 6, 5], [3, 4, 1, 2, 6, 5], [2, 1, 4, 3, 6, 5], [1, 2, 4, 3, 6, 5], [4, 2, 1, 3, 6, 5], [2, 4, 1, 3, 6, 5], [1, 4, 2, 3, 6, 5], [4, 1, 2, 3, 6, 5], [3, 2, 1, 4, 6, 5], [2, 3, 1, 4, 6, 5], [1, 3, 2, 4, 6, 5], [3, 1, 2, 4, 6, 5], [2, 1, 3, 4, 6, 5], [1, 2, 3, 4, 6, 5], [6, 4, 3, 2, 1, 5], [4, 6, 3, 2, 1, 5], [3, 6, 4, 2, 1, 5], [6, 3, 4, 2, 1, 5], [4, 3, 6, 2, 1, 5], [3, 4, 6, 2, 1, 5], [2, 6, 4, 3, 1, 5], [6, 2, 4, 3, 1, 5], [4, 2, 6, 3, 1, 5], [2, 4, 6, 3, 1, 5], [6, 4, 2, 3, 1, 5], [4, 6, 2, 3, 1, 5], [3, 2, 6, 4, 1, 5], [2, 3, 6, 4, 1, 5], [6, 3, 2, 4, 1, 5], [3, 6, 2, 4, 1, 5], [2, 6, 3, 4, 1, 5], [6, 2, 3, 4, 1, 5], [4, 3, 2, 6, 1, 5], [3, 4, 2, 6, 1, 5], [2, 4, 3, 6, 1, 5], [4, 2, 3, 6, 1, 5], [3, 2, 4, 6, 1, 5], [2, 3, 4, 6, 1, 5], [1, 6, 4, 3, 2, 5], [6, 1, 4, 3, 2, 5], [4, 1, 6, 3, 2, 5], [1, 4, 6, 3, 2, 5], [6, 4, 1, 3, 2, 5], [4, 6, 1, 3, 2, 5], [3, 1, 6, 4, 2, 5], [1, 3, 6, 4, 2, 5], [6, 3, 1, 4, 2, 5], [3, 6, 1, 4, 2, 5], [1, 6, 3, 4, 2, 5], [6, 1, 3, 4, 2, 5], [4, 3, 1, 6, 2, 5], [3, 4, 1, 6, 2, 5], [1, 4, 3, 6, 2, 5], [4, 1, 3, 6, 2, 5], [3, 1, 4, 6, 2, 5], [1, 3, 4, 6, 2, 5], [6, 4, 3, 1, 2, 5], [4, 6, 3, 1, 2, 5], [3, 6, 4, 1, 2, 5], [6, 3, 4, 1, 2, 5], [4, 3, 6, 1, 2, 5], [3, 4, 6, 1, 2, 5], [2, 1, 6, 4, 3, 5], [1, 2, 6, 4, 3, 5], [6, 2, 1, 4, 3, 5], [2, 6, 1, 4, 3, 5], [1, 6, 2, 4, 3, 5], [6, 1, 2, 4, 3, 5], [4, 2, 1, 6, 3, 5], [2, 4, 1, 6, 3, 5], [1, 4, 2, 6, 3, 5], [4, 1, 2, 6, 3, 5], [2, 1, 4, 6, 3, 5], [1, 2, 4, 6, 3, 5], [6, 4, 2, 1, 3, 5], [4, 6, 2, 1, 3, 5], [2, 6, 4, 1, 3, 5], [6, 2, 4, 1, 3, 5], [4, 2, 6, 1, 3, 5], [2, 4, 6, 1, 3, 5], [1, 6, 4, 2, 3, 5], [6, 1, 4, 2, 3, 5], [4, 1, 6, 2, 3, 5], [1, 4, 6, 2, 3, 5], [6, 4, 1, 2, 3, 5], [4, 6, 1, 2, 3, 5], [3, 2, 1, 6, 4, 5], [2, 3, 1, 6, 4, 5], [1, 3, 2, 6, 4, 5], [3, 1, 2, 6, 4, 5], [2, 1, 3, 6, 4, 5], [1, 2, 3, 6, 4, 5], [6, 3, 2, 1, 4, 5], [3, 6, 2, 1, 4, 5], [2, 6, 3, 1, 4, 5], [6, 2, 3, 1, 4, 5], [3, 2, 6, 1, 4, 5], [2, 3, 6, 1, 4, 5], [1, 6, 3, 2, 4, 5], [6, 1, 3, 2, 4, 5], [3, 1, 6, 2, 4, 5], [1, 3, 6, 2, 4, 5], [6, 3, 1, 2, 4, 5], [3, 6, 1, 2, 4, 5], [2, 1, 6, 3, 4, 5], [1, 2, 6, 3, 4, 5], [6, 2, 1, 3, 4, 5], [2, 6, 1, 3, 4, 5], [1, 6, 2, 3, 4, 5], [6, 1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 6], [4, 5, 3, 2, 1, 6], [3, 5, 4, 2, 1, 6], [5, 3, 4, 2, 1, 6], [4, 3, 5, 2, 1, 6], [3, 4, 5, 2, 1, 6], [2, 5, 4, 3, 1, 6], [5, 2, 4, 3, 1, 6], [4, 2, 5, 3, 1, 6], [2, 4, 5, 3, 1, 6], [5, 4, 2, 3, 1, 6], [4, 5, 2, 3, 1, 6], [3, 2, 5, 4, 1, 6], [2, 3, 5, 4, 1, 6], [5, 3, 2, 4, 1, 6], [3, 5, 2, 4, 1, 6], [2, 5, 3, 4, 1, 6], [5, 2, 3, 4, 1, 6], [4, 3, 2, 5, 1, 6], [3, 4, 2, 5, 1, 6], [2, 4, 3, 5, 1, 6], [4, 2, 3, 5, 1, 6], [3, 2, 4, 5, 1, 6], [2, 3, 4, 5, 1, 6], [1, 5, 4, 3, 2, 6], [5, 1, 4, 3, 2, 6], [4, 1, 5, 3, 2, 6], [1, 4, 5, 3, 2, 6], [5, 4, 1, 3, 2, 6], [4, 5, 1, 3, 2, 6], [3, 1, 5, 4, 2, 6], [1, 3, 5, 4, 2, 6], [5, 3, 1, 4, 2, 6], [3, 5, 1, 4, 2, 6], [1, 5, 3, 4, 2, 6], [5, 1, 3, 4, 2, 6], [4, 3, 1, 5, 2, 6], [3, 4, 1, 5, 2, 6], [1, 4, 3, 5, 2, 6], [4, 1, 3, 5, 2, 6], [3, 1, 4, 5, 2, 6], [1, 3, 4, 5, 2, 6], [5, 4, 3, 1, 2, 6], [4, 5, 3, 1, 2, 6], [3, 5, 4, 1, 2, 6], [5, 3, 4, 1, 2, 6], [4, 3, 5, 1, 2, 6], [3, 4, 5, 1, 2, 6], [2, 1, 5, 4, 3, 6], [1, 2, 5, 4, 3, 6], [5, 2, 1, 4, 3, 6], [2, 5, 1, 4, 3, 6], [1, 5, 2, 4, 3, 6], [5, 1, 2, 4, 3, 6], [4, 2, 1, 5, 3, 6], [2, 4, 1, 5, 3, 6], [1, 4, 2, 5, 3, 6], [4, 1, 2, 5, 3, 6], [2, 1, 4, 5, 3, 6], [1, 2, 4, 5, 3, 6], [5, 4, 2, 1, 3, 6], [4, 5, 2, 1, 3, 6], [2, 5, 4, 1, 3, 6], [5, 2, 4, 1, 3, 6], [4, 2, 5, 1, 3, 6], [2, 4, 5, 1, 3, 6], [1, 5, 4, 2, 3, 6], [5, 1, 4, 2, 3, 6], [4, 1, 5, 2, 3, 6], [1, 4, 5, 2, 3, 6], [5, 4, 1, 2, 3, 6], [4, 5, 1, 2, 3, 6], [3, 2, 1, 5, 4, 6], [2, 3, 1, 5, 4, 6], [1, 3, 2, 5, 4, 6], [3, 1, 2, 5, 4, 6], [2, 1, 3, 5, 4, 6], [1, 2, 3, 5, 4, 6], [5, 3, 2, 1, 4, 6], [3, 5, 2, 1, 4, 6], [2, 5, 3, 1, 4, 6], [5, 2, 3, 1, 4, 6], [3, 2, 5, 1, 4, 6], [2, 3, 5, 1, 4, 6], [1, 5, 3, 2, 4, 6], [5, 1, 3, 2, 4, 6], [3, 1, 5, 2, 4, 6], [1, 3, 5, 2, 4, 6], [5, 3, 1, 2, 4, 6], [3, 5, 1, 2, 4, 6], [2, 1, 5, 3, 4, 6], [1, 2, 5, 3, 4, 6], [5, 2, 1, 3, 4, 6], [2, 5, 1, 3, 4, 6], [1, 5, 2, 3, 4, 6], [5, 1, 2, 3, 4, 6], [4, 3, 2, 1, 5, 6], [3, 4, 2, 1, 5, 6], [2, 4, 3, 1, 5, 6], [4, 2, 3, 1, 5, 6], [3, 2, 4, 1, 5, 6], [2, 3, 4, 1, 5, 6], [1, 4, 3, 2, 5, 6], [4, 1, 3, 2, 5, 6], [3, 1, 4, 2, 5, 6], [1, 3, 4, 2, 5, 6], [4, 3, 1, 2, 5, 6], [3, 4, 1, 2, 5, 6], [2, 1, 4, 3, 5, 6], [1, 2, 4, 3, 5, 6], [4, 2, 1, 3, 5, 6], [2, 4, 1, 3, 5, 6], [1, 4, 2, 3, 5, 6], [4, 1, 2, 3, 5, 6], [3, 2, 1, 4, 5, 6], [2, 3, 1, 4, 5, 6], [1, 3, 2, 4, 5, 6], [3, 1, 2, 4, 5, 6], [2, 1, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]]
    },
    {
        'input': [100, -123, 343, 2, 3],
        'output': [[3, 2, 343, -123, 100], [2, 3, 343, -123, 100], [343, 3, 2, -123, 100], [3, 343, 2, -123, 100], [2, 343, 3, -123, 100], [343, 2, 3, -123, 100], [-123, 3, 2, 343, 100], [3, -123, 2, 343, 100], [2, -123, 3, 343, 100], [-123, 2, 3, 343, 100], [3, 2, -123, 343, 100], [2, 3, -123, 343, 100], [343, -123, 3, 2, 100], [-123, 343, 3, 2, 100], [3, 343, -123, 2, 100], [343, 3, -123, 2, 100], [-123, 3, 343, 2, 100], [3, -123, 343, 2, 100], [2, 343, -123, 3, 100], [343, 2, -123, 3, 100], [-123, 2, 343, 3, 100], [2, -123, 343, 3, 100], [343, -123, 2, 3, 100], [-123, 343, 2, 3, 100], [100, 3, 2, 343, -123], [3, 100, 2, 343, -123], [2, 100, 3, 343, -123], [100, 2, 3, 343, -123], [3, 2, 100, 343, -123], [2, 3, 100, 343, -123], [343, 100, 3, 2, -123], [100, 343, 3, 2, -123], [3, 343, 100, 2, -123], [343, 3, 100, 2, -123], [100, 3, 343, 2, -123], [3, 100, 343, 2, -123], [2, 343, 100, 3, -123], [343, 2, 100, 3, -123], [100, 2, 343, 3, -123], [2, 100, 343, 3, -123], [343, 100, 2, 3, -123], [100, 343, 2, 3, -123], [3, 2, 343, 100, -123], [2, 3, 343, 100, -123], [343, 3, 2, 100, -123], [3, 343, 2, 100, -123], [2, 343, 3, 100, -123], [343, 2, 3, 100, -123], [-123, 100, 3, 2, 343], [100, -123, 3, 2, 343], [3, -123, 100, 2, 343], [-123, 3, 100, 2, 343], [100, 3, -123, 2, 343], [3, 100, -123, 2, 343], [2, -123, 100, 3, 343], [-123, 2, 100, 3, 343], [100, 2, -123, 3, 343], [2, 100, -123, 3, 343], [-123, 100, 2, 3, 343], [100, -123, 2, 3, 343], [3, 2, -123, 100, 343], [2, 3, -123, 100, 343], [-123, 3, 2, 100, 343], [3, -123, 2, 100, 343], [2, -123, 3, 100, 343], [-123, 2, 3, 100, 343], [100, 3, 2, -123, 343], [3, 100, 2, -123, 343], [2, 100, 3, -123, 343], [100, 2, 3, -123, 343], [3, 2, 100, -123, 343], [2, 3, 100, -123, 343], [343, -123, 100, 3, 2], [-123, 343, 100, 3, 2], [100, 343, -123, 3, 2], [343, 100, -123, 3, 2], [-123, 100, 343, 3, 2], [100, -123, 343, 3, 2], [3, 343, -123, 100, 2], [343, 3, -123, 100, 2], [-123, 3, 343, 100, 2], [3, -123, 343, 100, 2], [343, -123, 3, 100, 2], [-123, 343, 3, 100, 2], [100, 3, 343, -123, 2], [3, 100, 343, -123, 2], [343, 100, 3, -123, 2], [100, 343, 3, -123, 2], [3, 343, 100, -123, 2], [343, 3, 100, -123, 2], [-123, 100, 3, 343, 2], [100, -123, 3, 343, 2], [3, -123, 100, 343, 2], [-123, 3, 100, 343, 2], [100, 3, -123, 343, 2], [3, 100, -123, 343, 2], [2, 343, -123, 100, 3], [343, 2, -123, 100, 3], [-123, 2, 343, 100, 3], [2, -123, 343, 100, 3], [343, -123, 2, 100, 3], [-123, 343, 2, 100, 3], [100, 2, 343, -123, 3], [2, 100, 343, -123, 3], [343, 100, 2, -123, 3], [100, 343, 2, -123, 3], [2, 343, 100, -123, 3], [343, 2, 100, -123, 3], [-123, 100, 2, 343, 3], [100, -123, 2, 343, 3], [2, -123, 100, 343, 3], [-123, 2, 100, 343, 3], [100, 2, -123, 343, 3], [2, 100, -123, 343, 3], [343, -123, 100, 2, 3], [-123, 343, 100, 2, 3], [100, 343, -123, 2, 3], [343, 100, -123, 2, 3], [-123, 100, 343, 2, 3], [100, -123, 343, 2, 3]]
    },
    {
        'input': [100, -123, 343, 2],
        'output': [[2, 343, -123, 100], [343, 2, -123, 100], [-123, 2, 343, 100], [2, -123, 343, 100], [343, -123, 2, 100], [-123, 343, 2, 100], [100, 2, 343, -123], [2, 100, 343, -123], [343, 100, 2, -123], [100, 343, 2, -123], [2, 343, 100, -123], [343, 2, 100, -123], [-123, 100, 2, 343], [100, -123, 2, 343], [2, -123, 100, 343], [-123, 2, 100, 343], [100, 2, -123, 343], [2, 100, -123, 343], [343, -123, 100, 2], [-123, 343, 100, 2], [100, 343, -123, 2], [343, 100, -123, 2], [-123, 100, 343, 2], [100, -123, 343, 2]]
    }
]

for (let i = 0; i < params.length; i++) {
    let test = params[i];
    let result = permute(test.input);
    let resultSet = new Set();
    result.forEach(res => {
        resultSet.add(JSON.stringify(res));
    });
    let outputSet = new Set();
    test.output.forEach(out => {
        outputSet.add(JSON.stringify(out));
    });
    if (resultSet.size === outputSet.size && [...resultSet].every(value => outputSet.has(value))) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. Input: ${JSON.stringify(test.input)} Expected output: ${JSON.stringify(test.output)} but got ${JSON.stringify(result)}`);
    }
}",,
63b5985c8ad4593d6b7b0233,subsets-ii,"params = [    
    {""input"": [[1,2,3]], ""output"": [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]},
    {""input"": [[0]], ""output"": [[],[0]]},
    {""input"": [[]], ""output"": [[]]},
    {""input"": [[1,2,3,1]], ""output"": [[1, 1, 2, 3], [1, 1, 2], [1, 1, 3], [1, 1], [1, 2, 3], [1, 2], [1, 3], [1], [2, 3], [2], [3], []]},
    {""input"": [[-1,0,1]], ""output"": [[],[-1],[0],[-1,0],[1],[-1,1],[0,1],[-1,0,1]]},
    {""input"": [[1,1,2,2]], ""output"": [[],[1],[1,1],[1,2],[1,1,2],[1,2,2],[1,1,2,2],[2],[2,2]]},
    {""input"": [[1,2,3,2,5]], ""output"": [[1, 2, 2, 3, 5], [1, 2, 2, 3], [1, 2, 2, 5], [1, 2, 2], [1, 2, 3, 5], [1, 2, 3], [1, 2, 5], [1, 2], [1, 3, 5], [1, 3], [1, 5], [1], [2, 2, 3, 5], [2, 2, 3], [2, 2, 5], [2, 2], [2, 3, 5], [2, 3], [2, 5], [2], [3, 5], [3], [5], []]},
    {""input"": [[-5,-4,-3,-2,-1,1,1,2,4,5]], ""output"": [[-5, -4, -3, -2, -1, 1, 1, 2, 4, 5], [-5, -4, -3, -2, -1, 1, 1, 2, 4], [-5, -4, -3, -2, -1, 1, 1, 2, 5], [-5, -4, -3, -2, -1, 1, 1, 2], [-5, -4, -3, -2, -1, 1, 1, 4, 5], [-5, -4, -3, -2, -1, 1, 1, 4], [-5, -4, -3, -2, -1, 1, 1, 5], [-5, -4, -3, -2, -1, 1, 1], [-5, -4, -3, -2, -1, 1, 2, 4, 5], [-5, -4, -3, -2, -1, 1, 2, 4], [-5, -4, -3, -2, -1, 1, 2, 5], [-5, -4, -3, -2, -1, 1, 2], [-5, -4, -3, -2, -1, 1, 4, 5], [-5, -4, -3, -2, -1, 1, 4], [-5, -4, -3, -2, -1, 1, 5], [-5, -4, -3, -2, -1, 1], [-5, -4, -3, -2, -1, 2, 4, 5], [-5, -4, -3, -2, -1, 2, 4], [-5, -4, -3, -2, -1, 2, 5], [-5, -4, -3, -2, -1, 2], [-5, -4, -3, -2, -1, 4, 5], [-5, -4, -3, -2, -1, 4], [-5, -4, -3, -2, -1, 5], [-5, -4, -3, -2, -1], [-5, -4, -3, -2, 1, 1, 2, 4, 5], [-5, -4, -3, -2, 1, 1, 2, 4], [-5, -4, -3, -2, 1, 1, 2, 5], [-5, -4, -3, -2, 1, 1, 2], [-5, -4, -3, -2, 1, 1, 4, 5], [-5, -4, -3, -2, 1, 1, 4], [-5, -4, -3, -2, 1, 1, 5], [-5, -4, -3, -2, 1, 1], [-5, -4, -3, -2, 1, 2, 4, 5], [-5, -4, -3, -2, 1, 2, 4], [-5, -4, -3, -2, 1, 2, 5], [-5, -4, -3, -2, 1, 2], [-5, -4, -3, -2, 1, 4, 5], [-5, -4, -3, -2, 1, 4], [-5, -4, -3, -2, 1, 5], [-5, -4, -3, -2, 1], [-5, -4, -3, -2, 2, 4, 5], [-5, -4, -3, -2, 2, 4], [-5, -4, -3, -2, 2, 5], [-5, -4, -3, -2, 2], [-5, -4, -3, -2, 4, 5], [-5, -4, -3, -2, 4], [-5, -4, -3, -2, 5], [-5, -4, -3, -2], [-5, -4, -3, -1, 1, 1, 2, 4, 5], [-5, -4, -3, -1, 1, 1, 2, 4], [-5, -4, -3, -1, 1, 1, 2, 5], [-5, -4, -3, -1, 1, 1, 2], [-5, -4, -3, -1, 1, 1, 4, 5], [-5, -4, -3, -1, 1, 1, 4], [-5, -4, -3, -1, 1, 1, 5], [-5, -4, -3, -1, 1, 1], [-5, -4, -3, -1, 1, 2, 4, 5], [-5, -4, -3, -1, 1, 2, 4], [-5, -4, -3, -1, 1, 2, 5], [-5, -4, -3, -1, 1, 2], [-5, -4, -3, -1, 1, 4, 5], [-5, -4, -3, -1, 1, 4], [-5, -4, -3, -1, 1, 5], [-5, -4, -3, -1, 1], [-5, -4, -3, -1, 2, 4, 5], [-5, -4, -3, -1, 2, 4], [-5, -4, -3, -1, 2, 5], [-5, -4, -3, -1, 2], [-5, -4, -3, -1, 4, 5], [-5, -4, -3, -1, 4], [-5, -4, -3, -1, 5], [-5, -4, -3, -1], [-5, -4, -3, 1, 1, 2, 4, 5], [-5, -4, -3, 1, 1, 2, 4], [-5, -4, -3, 1, 1, 2, 5], [-5, -4, -3, 1, 1, 2], [-5, -4, -3, 1, 1, 4, 5], [-5, -4, -3, 1, 1, 4], [-5, -4, -3, 1, 1, 5], [-5, -4, -3, 1, 1], [-5, -4, -3, 1, 2, 4, 5], [-5, -4, -3, 1, 2, 4], [-5, -4, -3, 1, 2, 5], [-5, -4, -3, 1, 2], [-5, -4, -3, 1, 4, 5], [-5, -4, -3, 1, 4], [-5, -4, -3, 1, 5], [-5, -4, -3, 1], [-5, -4, -3, 2, 4, 5], [-5, -4, -3, 2, 4], [-5, -4, -3, 2, 5], [-5, -4, -3, 2], [-5, -4, -3, 4, 5], [-5, -4, -3, 4], [-5, -4, -3, 5], [-5, -4, -3], [-5, -4, -2, -1, 1, 1, 2, 4, 5], [-5, -4, -2, -1, 1, 1, 2, 4], [-5, -4, -2, -1, 1, 1, 2, 5], [-5, -4, -2, -1, 1, 1, 2], [-5, -4, -2, -1, 1, 1, 4, 5], [-5, -4, -2, -1, 1, 1, 4], [-5, -4, -2, -1, 1, 1, 5], [-5, -4, -2, -1, 1, 1], [-5, -4, -2, -1, 1, 2, 4, 5], [-5, -4, -2, -1, 1, 2, 4], [-5, -4, -2, -1, 1, 2, 5], [-5, -4, -2, -1, 1, 2], [-5, -4, -2, -1, 1, 4, 5], [-5, -4, -2, -1, 1, 4], [-5, -4, -2, -1, 1, 5], [-5, -4, -2, -1, 1], [-5, -4, -2, -1, 2, 4, 5], [-5, -4, -2, -1, 2, 4], [-5, -4, -2, -1, 2, 5], [-5, -4, -2, -1, 2], [-5, -4, -2, -1, 4, 5], [-5, -4, -2, -1, 4], [-5, -4, -2, -1, 5], [-5, -4, -2, -1], [-5, -4, -2, 1, 1, 2, 4, 5], [-5, -4, -2, 1, 1, 2, 4], [-5, -4, -2, 1, 1, 2, 5], [-5, -4, -2, 1, 1, 2], [-5, -4, -2, 1, 1, 4, 5], [-5, -4, -2, 1, 1, 4], [-5, -4, -2, 1, 1, 5], [-5, -4, -2, 1, 1], [-5, -4, -2, 1, 2, 4, 5], [-5, -4, -2, 1, 2, 4], [-5, -4, -2, 1, 2, 5], [-5, -4, -2, 1, 2], [-5, -4, -2, 1, 4, 5], [-5, -4, -2, 1, 4], [-5, -4, -2, 1, 5], [-5, -4, -2, 1], [-5, -4, -2, 2, 4, 5], [-5, -4, -2, 2, 4], [-5, -4, -2, 2, 5], [-5, -4, -2, 2], [-5, -4, -2, 4, 5], [-5, -4, -2, 4], [-5, -4, -2, 5], [-5, -4, -2], [-5, -4, -1, 1, 1, 2, 4, 5], [-5, -4, -1, 1, 1, 2, 4], [-5, -4, -1, 1, 1, 2, 5], [-5, -4, -1, 1, 1, 2], [-5, -4, -1, 1, 1, 4, 5], [-5, -4, -1, 1, 1, 4], [-5, -4, -1, 1, 1, 5], [-5, -4, -1, 1, 1], [-5, -4, -1, 1, 2, 4, 5], [-5, -4, -1, 1, 2, 4], [-5, -4, -1, 1, 2, 5], [-5, -4, -1, 1, 2], [-5, -4, -1, 1, 4, 5], [-5, -4, -1, 1, 4], [-5, -4, -1, 1, 5], [-5, -4, -1, 1], [-5, -4, -1, 2, 4, 5], [-5, -4, -1, 2, 4], [-5, -4, -1, 2, 5], [-5, -4, -1, 2], [-5, -4, -1, 4, 5], [-5, -4, -1, 4], [-5, -4, -1, 5], [-5, -4, -1], [-5, -4, 1, 1, 2, 4, 5], [-5, -4, 1, 1, 2, 4], [-5, -4, 1, 1, 2, 5], [-5, -4, 1, 1, 2], [-5, -4, 1, 1, 4, 5], [-5, -4, 1, 1, 4], [-5, -4, 1, 1, 5], [-5, -4, 1, 1], [-5, -4, 1, 2, 4, 5], [-5, -4, 1, 2, 4], [-5, -4, 1, 2, 5], [-5, -4, 1, 2], [-5, -4, 1, 4, 5], [-5, -4, 1, 4], [-5, -4, 1, 5], [-5, -4, 1], [-5, -4, 2, 4, 5], [-5, -4, 2, 4], [-5, -4, 2, 5], [-5, -4, 2], [-5, -4, 4, 5], [-5, -4, 4], [-5, -4, 5], [-5, -4], [-5, -3, -2, -1, 1, 1, 2, 4, 5], [-5, -3, -2, -1, 1, 1, 2, 4], [-5, -3, -2, -1, 1, 1, 2, 5], [-5, -3, -2, -1, 1, 1, 2], [-5, -3, -2, -1, 1, 1, 4, 5], [-5, -3, -2, -1, 1, 1, 4], [-5, -3, -2, -1, 1, 1, 5], [-5, -3, -2, -1, 1, 1], [-5, -3, -2, -1, 1, 2, 4, 5], [-5, -3, -2, -1, 1, 2, 4], [-5, -3, -2, -1, 1, 2, 5], [-5, -3, -2, -1, 1, 2], [-5, -3, -2, -1, 1, 4, 5], [-5, -3, -2, -1, 1, 4], [-5, -3, -2, -1, 1, 5], [-5, -3, -2, -1, 1], [-5, -3, -2, -1, 2, 4, 5], [-5, -3, -2, -1, 2, 4], [-5, -3, -2, -1, 2, 5], [-5, -3, -2, -1, 2], [-5, -3, -2, -1, 4, 5], [-5, -3, -2, -1, 4], [-5, -3, -2, -1, 5], [-5, -3, -2, -1], [-5, -3, -2, 1, 1, 2, 4, 5], [-5, -3, -2, 1, 1, 2, 4], [-5, -3, -2, 1, 1, 2, 5], [-5, -3, -2, 1, 1, 2], [-5, -3, -2, 1, 1, 4, 5], [-5, -3, -2, 1, 1, 4], [-5, -3, -2, 1, 1, 5], [-5, -3, -2, 1, 1], [-5, -3, -2, 1, 2, 4, 5], [-5, -3, -2, 1, 2, 4], [-5, -3, -2, 1, 2, 5], [-5, -3, -2, 1, 2], [-5, -3, -2, 1, 4, 5], [-5, -3, -2, 1, 4], [-5, -3, -2, 1, 5], [-5, -3, -2, 1], [-5, -3, -2, 2, 4, 5], [-5, -3, -2, 2, 4], [-5, -3, -2, 2, 5], [-5, -3, -2, 2], [-5, -3, -2, 4, 5], [-5, -3, -2, 4], [-5, -3, -2, 5], [-5, -3, -2], [-5, -3, -1, 1, 1, 2, 4, 5], [-5, -3, -1, 1, 1, 2, 4], [-5, -3, -1, 1, 1, 2, 5], [-5, -3, -1, 1, 1, 2], [-5, -3, -1, 1, 1, 4, 5], [-5, -3, -1, 1, 1, 4], [-5, -3, -1, 1, 1, 5], [-5, -3, -1, 1, 1], [-5, -3, -1, 1, 2, 4, 5], [-5, -3, -1, 1, 2, 4], [-5, -3, -1, 1, 2, 5], [-5, -3, -1, 1, 2], [-5, -3, -1, 1, 4, 5], [-5, -3, -1, 1, 4], [-5, -3, -1, 1, 5], [-5, -3, -1, 1], [-5, -3, -1, 2, 4, 5], [-5, -3, -1, 2, 4], [-5, -3, -1, 2, 5], [-5, -3, -1, 2], [-5, -3, -1, 4, 5], [-5, -3, -1, 4], [-5, -3, -1, 5], [-5, -3, -1], [-5, -3, 1, 1, 2, 4, 5], [-5, -3, 1, 1, 2, 4], [-5, -3, 1, 1, 2, 5], [-5, -3, 1, 1, 2], [-5, -3, 1, 1, 4, 5], [-5, -3, 1, 1, 4], [-5, -3, 1, 1, 5], [-5, -3, 1, 1], [-5, -3, 1, 2, 4, 5], [-5, -3, 1, 2, 4], [-5, -3, 1, 2, 5], [-5, -3, 1, 2], [-5, -3, 1, 4, 5], [-5, -3, 1, 4], [-5, -3, 1, 5], [-5, -3, 1], [-5, -3, 2, 4, 5], [-5, -3, 2, 4], [-5, -3, 2, 5], [-5, -3, 2], [-5, -3, 4, 5], [-5, -3, 4], [-5, -3, 5], [-5, -3], [-5, -2, -1, 1, 1, 2, 4, 5], [-5, -2, -1, 1, 1, 2, 4], [-5, -2, -1, 1, 1, 2, 5], [-5, -2, -1, 1, 1, 2], [-5, -2, -1, 1, 1, 4, 5], [-5, -2, -1, 1, 1, 4], [-5, -2, -1, 1, 1, 5], [-5, -2, -1, 1, 1], [-5, -2, -1, 1, 2, 4, 5], [-5, -2, -1, 1, 2, 4], [-5, -2, -1, 1, 2, 5], [-5, -2, -1, 1, 2], [-5, -2, -1, 1, 4, 5], [-5, -2, -1, 1, 4], [-5, -2, -1, 1, 5], [-5, -2, -1, 1], [-5, -2, -1, 2, 4, 5], [-5, -2, -1, 2, 4], [-5, -2, -1, 2, 5], [-5, -2, -1, 2], [-5, -2, -1, 4, 5], [-5, -2, -1, 4], [-5, -2, -1, 5], [-5, -2, -1], [-5, -2, 1, 1, 2, 4, 5], [-5, -2, 1, 1, 2, 4], [-5, -2, 1, 1, 2, 5], [-5, -2, 1, 1, 2], [-5, -2, 1, 1, 4, 5], [-5, -2, 1, 1, 4], [-5, -2, 1, 1, 5], [-5, -2, 1, 1], [-5, -2, 1, 2, 4, 5], [-5, -2, 1, 2, 4], [-5, -2, 1, 2, 5], [-5, -2, 1, 2], [-5, -2, 1, 4, 5], [-5, -2, 1, 4], [-5, -2, 1, 5], [-5, -2, 1], [-5, -2, 2, 4, 5], [-5, -2, 2, 4], [-5, -2, 2, 5], [-5, -2, 2], [-5, -2, 4, 5], [-5, -2, 4], [-5, -2, 5], [-5, -2], [-5, -1, 1, 1, 2, 4, 5], [-5, -1, 1, 1, 2, 4], [-5, -1, 1, 1, 2, 5], [-5, -1, 1, 1, 2], [-5, -1, 1, 1, 4, 5], [-5, -1, 1, 1, 4], [-5, -1, 1, 1, 5], [-5, -1, 1, 1], [-5, -1, 1, 2, 4, 5], [-5, -1, 1, 2, 4], [-5, -1, 1, 2, 5], [-5, -1, 1, 2], [-5, -1, 1, 4, 5], [-5, -1, 1, 4], [-5, -1, 1, 5], [-5, -1, 1], [-5, -1, 2, 4, 5], [-5, -1, 2, 4], [-5, -1, 2, 5], [-5, -1, 2], [-5, -1, 4, 5], [-5, -1, 4], [-5, -1, 5], [-5, -1], [-5, 1, 1, 2, 4, 5], [-5, 1, 1, 2, 4], [-5, 1, 1, 2, 5], [-5, 1, 1, 2], [-5, 1, 1, 4, 5], [-5, 1, 1, 4], [-5, 1, 1, 5], [-5, 1, 1], [-5, 1, 2, 4, 5], [-5, 1, 2, 4], [-5, 1, 2, 5], [-5, 1, 2], [-5, 1, 4, 5], [-5, 1, 4], [-5, 1, 5], [-5, 1], [-5, 2, 4, 5], [-5, 2, 4], [-5, 2, 5], [-5, 2], [-5, 4, 5], [-5, 4], [-5, 5], [-5], [-4, -3, -2, -1, 1, 1, 2, 4, 5], [-4, -3, -2, -1, 1, 1, 2, 4], [-4, -3, -2, -1, 1, 1, 2, 5], [-4, -3, -2, -1, 1, 1, 2], [-4, -3, -2, -1, 1, 1, 4, 5], [-4, -3, -2, -1, 1, 1, 4], [-4, -3, -2, -1, 1, 1, 5], [-4, -3, -2, -1, 1, 1], [-4, -3, -2, -1, 1, 2, 4, 5], [-4, -3, -2, -1, 1, 2, 4], [-4, -3, -2, -1, 1, 2, 5], [-4, -3, -2, -1, 1, 2], [-4, -3, -2, -1, 1, 4, 5], [-4, -3, -2, -1, 1, 4], [-4, -3, -2, -1, 1, 5], [-4, -3, -2, -1, 1], [-4, -3, -2, -1, 2, 4, 5], [-4, -3, -2, -1, 2, 4], [-4, -3, -2, -1, 2, 5], [-4, -3, -2, -1, 2], [-4, -3, -2, -1, 4, 5], [-4, -3, -2, -1, 4], [-4, -3, -2, -1, 5], [-4, -3, -2, -1], [-4, -3, -2, 1, 1, 2, 4, 5], [-4, -3, -2, 1, 1, 2, 4], [-4, -3, -2, 1, 1, 2, 5], [-4, -3, -2, 1, 1, 2], [-4, -3, -2, 1, 1, 4, 5], [-4, -3, -2, 1, 1, 4], [-4, -3, -2, 1, 1, 5], [-4, -3, -2, 1, 1], [-4, -3, -2, 1, 2, 4, 5], [-4, -3, -2, 1, 2, 4], [-4, -3, -2, 1, 2, 5], [-4, -3, -2, 1, 2], [-4, -3, -2, 1, 4, 5], [-4, -3, -2, 1, 4], [-4, -3, -2, 1, 5], [-4, -3, -2, 1], [-4, -3, -2, 2, 4, 5], [-4, -3, -2, 2, 4], [-4, -3, -2, 2, 5], [-4, -3, -2, 2], [-4, -3, -2, 4, 5], [-4, -3, -2, 4], [-4, -3, -2, 5], [-4, -3, -2], [-4, -3, -1, 1, 1, 2, 4, 5], [-4, -3, -1, 1, 1, 2, 4], [-4, -3, -1, 1, 1, 2, 5], [-4, -3, -1, 1, 1, 2], [-4, -3, -1, 1, 1, 4, 5], [-4, -3, -1, 1, 1, 4], [-4, -3, -1, 1, 1, 5], [-4, -3, -1, 1, 1], [-4, -3, -1, 1, 2, 4, 5], [-4, -3, -1, 1, 2, 4], [-4, -3, -1, 1, 2, 5], [-4, -3, -1, 1, 2], [-4, -3, -1, 1, 4, 5], [-4, -3, -1, 1, 4], [-4, -3, -1, 1, 5], [-4, -3, -1, 1], [-4, -3, -1, 2, 4, 5], [-4, -3, -1, 2, 4], [-4, -3, -1, 2, 5], [-4, -3, -1, 2], [-4, -3, -1, 4, 5], [-4, -3, -1, 4], [-4, -3, -1, 5], [-4, -3, -1], [-4, -3, 1, 1, 2, 4, 5], [-4, -3, 1, 1, 2, 4], [-4, -3, 1, 1, 2, 5], [-4, -3, 1, 1, 2], [-4, -3, 1, 1, 4, 5], [-4, -3, 1, 1, 4], [-4, -3, 1, 1, 5], [-4, -3, 1, 1], [-4, -3, 1, 2, 4, 5], [-4, -3, 1, 2, 4], [-4, -3, 1, 2, 5], [-4, -3, 1, 2], [-4, -3, 1, 4, 5], [-4, -3, 1, 4], [-4, -3, 1, 5], [-4, -3, 1], [-4, -3, 2, 4, 5], [-4, -3, 2, 4], [-4, -3, 2, 5], [-4, -3, 2], [-4, -3, 4, 5], [-4, -3, 4], [-4, -3, 5], [-4, -3], [-4, -2, -1, 1, 1, 2, 4, 5], [-4, -2, -1, 1, 1, 2, 4], [-4, -2, -1, 1, 1, 2, 5], [-4, -2, -1, 1, 1, 2], [-4, -2, -1, 1, 1, 4, 5], [-4, -2, -1, 1, 1, 4], [-4, -2, -1, 1, 1, 5], [-4, -2, -1, 1, 1], [-4, -2, -1, 1, 2, 4, 5], [-4, -2, -1, 1, 2, 4], [-4, -2, -1, 1, 2, 5], [-4, -2, -1, 1, 2], [-4, -2, -1, 1, 4, 5], [-4, -2, -1, 1, 4], [-4, -2, -1, 1, 5], [-4, -2, -1, 1], [-4, -2, -1, 2, 4, 5], [-4, -2, -1, 2, 4], [-4, -2, -1, 2, 5], [-4, -2, -1, 2], [-4, -2, -1, 4, 5], [-4, -2, -1, 4], [-4, -2, -1, 5], [-4, -2, -1], [-4, -2, 1, 1, 2, 4, 5], [-4, -2, 1, 1, 2, 4], [-4, -2, 1, 1, 2, 5], [-4, -2, 1, 1, 2], [-4, -2, 1, 1, 4, 5], [-4, -2, 1, 1, 4], [-4, -2, 1, 1, 5], [-4, -2, 1, 1], [-4, -2, 1, 2, 4, 5], [-4, -2, 1, 2, 4], [-4, -2, 1, 2, 5], [-4, -2, 1, 2], [-4, -2, 1, 4, 5], [-4, -2, 1, 4], [-4, -2, 1, 5], [-4, -2, 1], [-4, -2, 2, 4, 5], [-4, -2, 2, 4], [-4, -2, 2, 5], [-4, -2, 2], [-4, -2, 4, 5], [-4, -2, 4], [-4, -2, 5], [-4, -2], [-4, -1, 1, 1, 2, 4, 5], [-4, -1, 1, 1, 2, 4], [-4, -1, 1, 1, 2, 5], [-4, -1, 1, 1, 2], [-4, -1, 1, 1, 4, 5], [-4, -1, 1, 1, 4], [-4, -1, 1, 1, 5], [-4, -1, 1, 1], [-4, -1, 1, 2, 4, 5], [-4, -1, 1, 2, 4], [-4, -1, 1, 2, 5], [-4, -1, 1, 2], [-4, -1, 1, 4, 5], [-4, -1, 1, 4], [-4, -1, 1, 5], [-4, -1, 1], [-4, -1, 2, 4, 5], [-4, -1, 2, 4], [-4, -1, 2, 5], [-4, -1, 2], [-4, -1, 4, 5], [-4, -1, 4], [-4, -1, 5], [-4, -1], [-4, 1, 1, 2, 4, 5], [-4, 1, 1, 2, 4], [-4, 1, 1, 2, 5], [-4, 1, 1, 2], [-4, 1, 1, 4, 5], [-4, 1, 1, 4], [-4, 1, 1, 5], [-4, 1, 1], [-4, 1, 2, 4, 5], [-4, 1, 2, 4], [-4, 1, 2, 5], [-4, 1, 2], [-4, 1, 4, 5], [-4, 1, 4], [-4, 1, 5], [-4, 1], [-4, 2, 4, 5], [-4, 2, 4], [-4, 2, 5], [-4, 2], [-4, 4, 5], [-4, 4], [-4, 5], [-4], [-3, -2, -1, 1, 1, 2, 4, 5], [-3, -2, -1, 1, 1, 2, 4], [-3, -2, -1, 1, 1, 2, 5], [-3, -2, -1, 1, 1, 2], [-3, -2, -1, 1, 1, 4, 5], [-3, -2, -1, 1, 1, 4], [-3, -2, -1, 1, 1, 5], [-3, -2, -1, 1, 1], [-3, -2, -1, 1, 2, 4, 5], [-3, -2, -1, 1, 2, 4], [-3, -2, -1, 1, 2, 5], [-3, -2, -1, 1, 2], [-3, -2, -1, 1, 4, 5], [-3, -2, -1, 1, 4], [-3, -2, -1, 1, 5], [-3, -2, -1, 1], [-3, -2, -1, 2, 4, 5], [-3, -2, -1, 2, 4], [-3, -2, -1, 2, 5], [-3, -2, -1, 2], [-3, -2, -1, 4, 5], [-3, -2, -1, 4], [-3, -2, -1, 5], [-3, -2, -1], [-3, -2, 1, 1, 2, 4, 5], [-3, -2, 1, 1, 2, 4], [-3, -2, 1, 1, 2, 5], [-3, -2, 1, 1, 2], [-3, -2, 1, 1, 4, 5], [-3, -2, 1, 1, 4], [-3, -2, 1, 1, 5], [-3, -2, 1, 1], [-3, -2, 1, 2, 4, 5], [-3, -2, 1, 2, 4], [-3, -2, 1, 2, 5], [-3, -2, 1, 2], [-3, -2, 1, 4, 5], [-3, -2, 1, 4], [-3, -2, 1, 5], [-3, -2, 1], [-3, -2, 2, 4, 5], [-3, -2, 2, 4], [-3, -2, 2, 5], [-3, -2, 2], [-3, -2, 4, 5], [-3, -2, 4], [-3, -2, 5], [-3, -2], [-3, -1, 1, 1, 2, 4, 5], [-3, -1, 1, 1, 2, 4], [-3, -1, 1, 1, 2, 5], [-3, -1, 1, 1, 2], [-3, -1, 1, 1, 4, 5], [-3, -1, 1, 1, 4], [-3, -1, 1, 1, 5], [-3, -1, 1, 1], [-3, -1, 1, 2, 4, 5], [-3, -1, 1, 2, 4], [-3, -1, 1, 2, 5], [-3, -1, 1, 2], [-3, -1, 1, 4, 5], [-3, -1, 1, 4], [-3, -1, 1, 5], [-3, -1, 1], [-3, -1, 2, 4, 5], [-3, -1, 2, 4], [-3, -1, 2, 5], [-3, -1, 2], [-3, -1, 4, 5], [-3, -1, 4], [-3, -1, 5], [-3, -1], [-3, 1, 1, 2, 4, 5], [-3, 1, 1, 2, 4], [-3, 1, 1, 2, 5], [-3, 1, 1, 2], [-3, 1, 1, 4, 5], [-3, 1, 1, 4], [-3, 1, 1, 5], [-3, 1, 1], [-3, 1, 2, 4, 5], [-3, 1, 2, 4], [-3, 1, 2, 5], [-3, 1, 2], [-3, 1, 4, 5], [-3, 1, 4], [-3, 1, 5], [-3, 1], [-3, 2, 4, 5], [-3, 2, 4], [-3, 2, 5], [-3, 2], [-3, 4, 5], [-3, 4], [-3, 5], [-3], [-2, -1, 1, 1, 2, 4, 5], [-2, -1, 1, 1, 2, 4], [-2, -1, 1, 1, 2, 5], [-2, -1, 1, 1, 2], [-2, -1, 1, 1, 4, 5], [-2, -1, 1, 1, 4], [-2, -1, 1, 1, 5], [-2, -1, 1, 1], [-2, -1, 1, 2, 4, 5], [-2, -1, 1, 2, 4], [-2, -1, 1, 2, 5], [-2, -1, 1, 2], [-2, -1, 1, 4, 5], [-2, -1, 1, 4], [-2, -1, 1, 5], [-2, -1, 1], [-2, -1, 2, 4, 5], [-2, -1, 2, 4], [-2, -1, 2, 5], [-2, -1, 2], [-2, -1, 4, 5], [-2, -1, 4], [-2, -1, 5], [-2, -1], [-2, 1, 1, 2, 4, 5], [-2, 1, 1, 2, 4], [-2, 1, 1, 2, 5], [-2, 1, 1, 2], [-2, 1, 1, 4, 5], [-2, 1, 1, 4], [-2, 1, 1, 5], [-2, 1, 1], [-2, 1, 2, 4, 5], [-2, 1, 2, 4], [-2, 1, 2, 5], [-2, 1, 2], [-2, 1, 4, 5], [-2, 1, 4], [-2, 1, 5], [-2, 1], [-2, 2, 4, 5], [-2, 2, 4], [-2, 2, 5], [-2, 2], [-2, 4, 5], [-2, 4], [-2, 5], [-2], [-1, 1, 1, 2, 4, 5], [-1, 1, 1, 2, 4], [-1, 1, 1, 2, 5], [-1, 1, 1, 2], [-1, 1, 1, 4, 5], [-1, 1, 1, 4], [-1, 1, 1, 5], [-1, 1, 1], [-1, 1, 2, 4, 5], [-1, 1, 2, 4], [-1, 1, 2, 5], [-1, 1, 2], [-1, 1, 4, 5], [-1, 1, 4], [-1, 1, 5], [-1, 1], [-1, 2, 4, 5], [-1, 2, 4], [-1, 2, 5], [-1, 2], [-1, 4, 5], [-1, 4], [-1, 5], [-1], [1, 1, 2, 4, 5], [1, 1, 2, 4], [1, 1, 2, 5], [1, 1, 2], [1, 1, 4, 5], [1, 1, 4], [1, 1, 5], [1, 1], [1, 2, 4, 5], [1, 2, 4], [1, 2, 5], [1, 2], [1, 4, 5], [1, 4], [1, 5], [1], [2, 4, 5], [2, 4], [2, 5], [2], [4, 5], [4], [5], []]},
    {""input"": [[-521,-34,3,434,101,0,1,1]], ""output"": [[-521, -34, 0, 1, 1, 3, 101, 434], [-521, -34, 0, 1, 1, 3, 101], [-521, -34, 0, 1, 1, 3, 434], [-521, -34, 0, 1, 1, 3], [-521, -34, 0, 1, 1, 101, 434], [-521, -34, 0, 1, 1, 101], [-521, -34, 0, 1, 1, 434], [-521, -34, 0, 1, 1], [-521, -34, 0, 1, 3, 101, 434], [-521, -34, 0, 1, 3, 101], [-521, -34, 0, 1, 3, 434], [-521, -34, 0, 1, 3], [-521, -34, 0, 1, 101, 434], [-521, -34, 0, 1, 101], [-521, -34, 0, 1, 434], [-521, -34, 0, 1], [-521, -34, 0, 3, 101, 434], [-521, -34, 0, 3, 101], [-521, -34, 0, 3, 434], [-521, -34, 0, 3], [-521, -34, 0, 101, 434], [-521, -34, 0, 101], [-521, -34, 0, 434], [-521, -34, 0], [-521, -34, 1, 1, 3, 101, 434], [-521, -34, 1, 1, 3, 101], [-521, -34, 1, 1, 3, 434], [-521, -34, 1, 1, 3], [-521, -34, 1, 1, 101, 434], [-521, -34, 1, 1, 101], [-521, -34, 1, 1, 434], [-521, -34, 1, 1], [-521, -34, 1, 3, 101, 434], [-521, -34, 1, 3, 101], [-521, -34, 1, 3, 434], [-521, -34, 1, 3], [-521, -34, 1, 101, 434], [-521, -34, 1, 101], [-521, -34, 1, 434], [-521, -34, 1], [-521, -34, 3, 101, 434], [-521, -34, 3, 101], [-521, -34, 3, 434], [-521, -34, 3], [-521, -34, 101, 434], [-521, -34, 101], [-521, -34, 434], [-521, -34], [-521, 0, 1, 1, 3, 101, 434], [-521, 0, 1, 1, 3, 101], [-521, 0, 1, 1, 3, 434], [-521, 0, 1, 1, 3], [-521, 0, 1, 1, 101, 434], [-521, 0, 1, 1, 101], [-521, 0, 1, 1, 434], [-521, 0, 1, 1], [-521, 0, 1, 3, 101, 434], [-521, 0, 1, 3, 101], [-521, 0, 1, 3, 434], [-521, 0, 1, 3], [-521, 0, 1, 101, 434], [-521, 0, 1, 101], [-521, 0, 1, 434], [-521, 0, 1], [-521, 0, 3, 101, 434], [-521, 0, 3, 101], [-521, 0, 3, 434], [-521, 0, 3], [-521, 0, 101, 434], [-521, 0, 101], [-521, 0, 434], [-521, 0], [-521, 1, 1, 3, 101, 434], [-521, 1, 1, 3, 101], [-521, 1, 1, 3, 434], [-521, 1, 1, 3], [-521, 1, 1, 101, 434], [-521, 1, 1, 101], [-521, 1, 1, 434], [-521, 1, 1], [-521, 1, 3, 101, 434], [-521, 1, 3, 101], [-521, 1, 3, 434], [-521, 1, 3], [-521, 1, 101, 434], [-521, 1, 101], [-521, 1, 434], [-521, 1], [-521, 3, 101, 434], [-521, 3, 101], [-521, 3, 434], [-521, 3], [-521, 101, 434], [-521, 101], [-521, 434], [-521], [-34, 0, 1, 1, 3, 101, 434], [-34, 0, 1, 1, 3, 101], [-34, 0, 1, 1, 3, 434], [-34, 0, 1, 1, 3], [-34, 0, 1, 1, 101, 434], [-34, 0, 1, 1, 101], [-34, 0, 1, 1, 434], [-34, 0, 1, 1], [-34, 0, 1, 3, 101, 434], [-34, 0, 1, 3, 101], [-34, 0, 1, 3, 434], [-34, 0, 1, 3], [-34, 0, 1, 101, 434], [-34, 0, 1, 101], [-34, 0, 1, 434], [-34, 0, 1], [-34, 0, 3, 101, 434], [-34, 0, 3, 101], [-34, 0, 3, 434], [-34, 0, 3], [-34, 0, 101, 434], [-34, 0, 101], [-34, 0, 434], [-34, 0], [-34, 1, 1, 3, 101, 434], [-34, 1, 1, 3, 101], [-34, 1, 1, 3, 434], [-34, 1, 1, 3], [-34, 1, 1, 101, 434], [-34, 1, 1, 101], [-34, 1, 1, 434], [-34, 1, 1], [-34, 1, 3, 101, 434], [-34, 1, 3, 101], [-34, 1, 3, 434], [-34, 1, 3], [-34, 1, 101, 434], [-34, 1, 101], [-34, 1, 434], [-34, 1], [-34, 3, 101, 434], [-34, 3, 101], [-34, 3, 434], [-34, 3], [-34, 101, 434], [-34, 101], [-34, 434], [-34], [0, 1, 1, 3, 101, 434], [0, 1, 1, 3, 101], [0, 1, 1, 3, 434], [0, 1, 1, 3], [0, 1, 1, 101, 434], [0, 1, 1, 101], [0, 1, 1, 434], [0, 1, 1], [0, 1, 3, 101, 434], [0, 1, 3, 101], [0, 1, 3, 434], [0, 1, 3], [0, 1, 101, 434], [0, 1, 101], [0, 1, 434], [0, 1], [0, 3, 101, 434], [0, 3, 101], [0, 3, 434], [0, 3], [0, 101, 434], [0, 101], [0, 434], [0], [1, 1, 3, 101, 434], [1, 1, 3, 101], [1, 1, 3, 434], [1, 1, 3], [1, 1, 101, 434], [1, 1, 101], [1, 1, 434], [1, 1], [1, 3, 101, 434], [1, 3, 101], [1, 3, 434], [1, 3], [1, 101, 434], [1, 101], [1, 434], [1], [3, 101, 434], [3, 101], [3, 434], [3], [101, 434], [101], [434], []]}
]

s = Solution()
for test in params:
    result = s.subsetsWithDup(test['input'][0])
    result_set = set([tuple(lst) for lst in result])
    output_set = set([tuple(lst) for lst in test['output']])
    if result_set == output_set:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input: {test['input']} Expected output: {test['output']} but got {result}"")","let params = [    
    {""input"": [[1,2,3]], ""output"": [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]},
    {""input"": [[0]], ""output"": [[],[0]]},
    {""input"": [[]], ""output"": [[]]},
    {""input"": [[1,2,3,1]], ""output"": [[1, 1, 2, 3], [1, 1, 2], [1, 1, 3], [1, 1], [1, 2, 3], [1, 2], [1, 3], [1], [2, 3], [2], [3], []]},
    {""input"": [[-1,0,1]], ""output"": [[],[-1],[0],[-1,0],[1],[-1,1],[0,1],[-1,0,1]]},
    {""input"": [[1,1,2,2]], ""output"": [[],[1],[1,1],[1,2],[1,1,2],[1,2,2],[1,1,2,2],[2],[2,2]]},
    {""input"": [[1,2,3,2,5]], ""output"": [[1, 2, 2, 3, 5], [1, 2, 2, 3], [1, 2, 2, 5], [1, 2, 2], [1, 2, 3, 5], [1, 2, 3], [1, 2, 5], [1, 2], [1, 3, 5], [1, 3], [1, 5], [1], [2, 2, 3, 5], [2, 2, 3], [2, 2, 5], [2, 2], [2, 3, 5], [2, 3], [2, 5], [2], [3, 5], [3], [5], []]},
    {""input"": [[-5,-4,-3,-2,-1,1,1,2,4,5]], ""output"": [[-5, -4, -3, -2, -1, 1, 1, 2, 4, 5], [-5, -4, -3, -2, -1, 1, 1, 2, 4], [-5, -4, -3, -2, -1, 1, 1, 2, 5], [-5, -4, -3, -2, -1, 1, 1, 2], [-5, -4, -3, -2, -1, 1, 1, 4, 5], [-5, -4, -3, -2, -1, 1, 1, 4], [-5, -4, -3, -2, -1, 1, 1, 5], [-5, -4, -3, -2, -1, 1, 1], [-5, -4, -3, -2, -1, 1, 2, 4, 5], [-5, -4, -3, -2, -1, 1, 2, 4], [-5, -4, -3, -2, -1, 1, 2, 5], [-5, -4, -3, -2, -1, 1, 2], [-5, -4, -3, -2, -1, 1, 4, 5], [-5, -4, -3, -2, -1, 1, 4], [-5, -4, -3, -2, -1, 1, 5], [-5, -4, -3, -2, -1, 1], [-5, -4, -3, -2, -1, 2, 4, 5], [-5, -4, -3, -2, -1, 2, 4], [-5, -4, -3, -2, -1, 2, 5], [-5, -4, -3, -2, -1, 2], [-5, -4, -3, -2, -1, 4, 5], [-5, -4, -3, -2, -1, 4], [-5, -4, -3, -2, -1, 5], [-5, -4, -3, -2, -1], [-5, -4, -3, -2, 1, 1, 2, 4, 5], [-5, -4, -3, -2, 1, 1, 2, 4], [-5, -4, -3, -2, 1, 1, 2, 5], [-5, -4, -3, -2, 1, 1, 2], [-5, -4, -3, -2, 1, 1, 4, 5], [-5, -4, -3, -2, 1, 1, 4], [-5, -4, -3, -2, 1, 1, 5], [-5, -4, -3, -2, 1, 1], [-5, -4, -3, -2, 1, 2, 4, 5], [-5, -4, -3, -2, 1, 2, 4], [-5, -4, -3, -2, 1, 2, 5], [-5, -4, -3, -2, 1, 2], [-5, -4, -3, -2, 1, 4, 5], [-5, -4, -3, -2, 1, 4], [-5, -4, -3, -2, 1, 5], [-5, -4, -3, -2, 1], [-5, -4, -3, -2, 2, 4, 5], [-5, -4, -3, -2, 2, 4], [-5, -4, -3, -2, 2, 5], [-5, -4, -3, -2, 2], [-5, -4, -3, -2, 4, 5], [-5, -4, -3, -2, 4], [-5, -4, -3, -2, 5], [-5, -4, -3, -2], [-5, -4, -3, -1, 1, 1, 2, 4, 5], [-5, -4, -3, -1, 1, 1, 2, 4], [-5, -4, -3, -1, 1, 1, 2, 5], [-5, -4, -3, -1, 1, 1, 2], [-5, -4, -3, -1, 1, 1, 4, 5], [-5, -4, -3, -1, 1, 1, 4], [-5, -4, -3, -1, 1, 1, 5], [-5, -4, -3, -1, 1, 1], [-5, -4, -3, -1, 1, 2, 4, 5], [-5, -4, -3, -1, 1, 2, 4], [-5, -4, -3, -1, 1, 2, 5], [-5, -4, -3, -1, 1, 2], [-5, -4, -3, -1, 1, 4, 5], [-5, -4, -3, -1, 1, 4], [-5, -4, -3, -1, 1, 5], [-5, -4, -3, -1, 1], [-5, -4, -3, -1, 2, 4, 5], [-5, -4, -3, -1, 2, 4], [-5, -4, -3, -1, 2, 5], [-5, -4, -3, -1, 2], [-5, -4, -3, -1, 4, 5], [-5, -4, -3, -1, 4], [-5, -4, -3, -1, 5], [-5, -4, -3, -1], [-5, -4, -3, 1, 1, 2, 4, 5], [-5, -4, -3, 1, 1, 2, 4], [-5, -4, -3, 1, 1, 2, 5], [-5, -4, -3, 1, 1, 2], [-5, -4, -3, 1, 1, 4, 5], [-5, -4, -3, 1, 1, 4], [-5, -4, -3, 1, 1, 5], [-5, -4, -3, 1, 1], [-5, -4, -3, 1, 2, 4, 5], [-5, -4, -3, 1, 2, 4], [-5, -4, -3, 1, 2, 5], [-5, -4, -3, 1, 2], [-5, -4, -3, 1, 4, 5], [-5, -4, -3, 1, 4], [-5, -4, -3, 1, 5], [-5, -4, -3, 1], [-5, -4, -3, 2, 4, 5], [-5, -4, -3, 2, 4], [-5, -4, -3, 2, 5], [-5, -4, -3, 2], [-5, -4, -3, 4, 5], [-5, -4, -3, 4], [-5, -4, -3, 5], [-5, -4, -3], [-5, -4, -2, -1, 1, 1, 2, 4, 5], [-5, -4, -2, -1, 1, 1, 2, 4], [-5, -4, -2, -1, 1, 1, 2, 5], [-5, -4, -2, -1, 1, 1, 2], [-5, -4, -2, -1, 1, 1, 4, 5], [-5, -4, -2, -1, 1, 1, 4], [-5, -4, -2, -1, 1, 1, 5], [-5, -4, -2, -1, 1, 1], [-5, -4, -2, -1, 1, 2, 4, 5], [-5, -4, -2, -1, 1, 2, 4], [-5, -4, -2, -1, 1, 2, 5], [-5, -4, -2, -1, 1, 2], [-5, -4, -2, -1, 1, 4, 5], [-5, -4, -2, -1, 1, 4], [-5, -4, -2, -1, 1, 5], [-5, -4, -2, -1, 1], [-5, -4, -2, -1, 2, 4, 5], [-5, -4, -2, -1, 2, 4], [-5, -4, -2, -1, 2, 5], [-5, -4, -2, -1, 2], [-5, -4, -2, -1, 4, 5], [-5, -4, -2, -1, 4], [-5, -4, -2, -1, 5], [-5, -4, -2, -1], [-5, -4, -2, 1, 1, 2, 4, 5], [-5, -4, -2, 1, 1, 2, 4], [-5, -4, -2, 1, 1, 2, 5], [-5, -4, -2, 1, 1, 2], [-5, -4, -2, 1, 1, 4, 5], [-5, -4, -2, 1, 1, 4], [-5, -4, -2, 1, 1, 5], [-5, -4, -2, 1, 1], [-5, -4, -2, 1, 2, 4, 5], [-5, -4, -2, 1, 2, 4], [-5, -4, -2, 1, 2, 5], [-5, -4, -2, 1, 2], [-5, -4, -2, 1, 4, 5], [-5, -4, -2, 1, 4], [-5, -4, -2, 1, 5], [-5, -4, -2, 1], [-5, -4, -2, 2, 4, 5], [-5, -4, -2, 2, 4], [-5, -4, -2, 2, 5], [-5, -4, -2, 2], [-5, -4, -2, 4, 5], [-5, -4, -2, 4], [-5, -4, -2, 5], [-5, -4, -2], [-5, -4, -1, 1, 1, 2, 4, 5], [-5, -4, -1, 1, 1, 2, 4], [-5, -4, -1, 1, 1, 2, 5], [-5, -4, -1, 1, 1, 2], [-5, -4, -1, 1, 1, 4, 5], [-5, -4, -1, 1, 1, 4], [-5, -4, -1, 1, 1, 5], [-5, -4, -1, 1, 1], [-5, -4, -1, 1, 2, 4, 5], [-5, -4, -1, 1, 2, 4], [-5, -4, -1, 1, 2, 5], [-5, -4, -1, 1, 2], [-5, -4, -1, 1, 4, 5], [-5, -4, -1, 1, 4], [-5, -4, -1, 1, 5], [-5, -4, -1, 1], [-5, -4, -1, 2, 4, 5], [-5, -4, -1, 2, 4], [-5, -4, -1, 2, 5], [-5, -4, -1, 2], [-5, -4, -1, 4, 5], [-5, -4, -1, 4], [-5, -4, -1, 5], [-5, -4, -1], [-5, -4, 1, 1, 2, 4, 5], [-5, -4, 1, 1, 2, 4], [-5, -4, 1, 1, 2, 5], [-5, -4, 1, 1, 2], [-5, -4, 1, 1, 4, 5], [-5, -4, 1, 1, 4], [-5, -4, 1, 1, 5], [-5, -4, 1, 1], [-5, -4, 1, 2, 4, 5], [-5, -4, 1, 2, 4], [-5, -4, 1, 2, 5], [-5, -4, 1, 2], [-5, -4, 1, 4, 5], [-5, -4, 1, 4], [-5, -4, 1, 5], [-5, -4, 1], [-5, -4, 2, 4, 5], [-5, -4, 2, 4], [-5, -4, 2, 5], [-5, -4, 2], [-5, -4, 4, 5], [-5, -4, 4], [-5, -4, 5], [-5, -4], [-5, -3, -2, -1, 1, 1, 2, 4, 5], [-5, -3, -2, -1, 1, 1, 2, 4], [-5, -3, -2, -1, 1, 1, 2, 5], [-5, -3, -2, -1, 1, 1, 2], [-5, -3, -2, -1, 1, 1, 4, 5], [-5, -3, -2, -1, 1, 1, 4], [-5, -3, -2, -1, 1, 1, 5], [-5, -3, -2, -1, 1, 1], [-5, -3, -2, -1, 1, 2, 4, 5], [-5, -3, -2, -1, 1, 2, 4], [-5, -3, -2, -1, 1, 2, 5], [-5, -3, -2, -1, 1, 2], [-5, -3, -2, -1, 1, 4, 5], [-5, -3, -2, -1, 1, 4], [-5, -3, -2, -1, 1, 5], [-5, -3, -2, -1, 1], [-5, -3, -2, -1, 2, 4, 5], [-5, -3, -2, -1, 2, 4], [-5, -3, -2, -1, 2, 5], [-5, -3, -2, -1, 2], [-5, -3, -2, -1, 4, 5], [-5, -3, -2, -1, 4], [-5, -3, -2, -1, 5], [-5, -3, -2, -1], [-5, -3, -2, 1, 1, 2, 4, 5], [-5, -3, -2, 1, 1, 2, 4], [-5, -3, -2, 1, 1, 2, 5], [-5, -3, -2, 1, 1, 2], [-5, -3, -2, 1, 1, 4, 5], [-5, -3, -2, 1, 1, 4], [-5, -3, -2, 1, 1, 5], [-5, -3, -2, 1, 1], [-5, -3, -2, 1, 2, 4, 5], [-5, -3, -2, 1, 2, 4], [-5, -3, -2, 1, 2, 5], [-5, -3, -2, 1, 2], [-5, -3, -2, 1, 4, 5], [-5, -3, -2, 1, 4], [-5, -3, -2, 1, 5], [-5, -3, -2, 1], [-5, -3, -2, 2, 4, 5], [-5, -3, -2, 2, 4], [-5, -3, -2, 2, 5], [-5, -3, -2, 2], [-5, -3, -2, 4, 5], [-5, -3, -2, 4], [-5, -3, -2, 5], [-5, -3, -2], [-5, -3, -1, 1, 1, 2, 4, 5], [-5, -3, -1, 1, 1, 2, 4], [-5, -3, -1, 1, 1, 2, 5], [-5, -3, -1, 1, 1, 2], [-5, -3, -1, 1, 1, 4, 5], [-5, -3, -1, 1, 1, 4], [-5, -3, -1, 1, 1, 5], [-5, -3, -1, 1, 1], [-5, -3, -1, 1, 2, 4, 5], [-5, -3, -1, 1, 2, 4], [-5, -3, -1, 1, 2, 5], [-5, -3, -1, 1, 2], [-5, -3, -1, 1, 4, 5], [-5, -3, -1, 1, 4], [-5, -3, -1, 1, 5], [-5, -3, -1, 1], [-5, -3, -1, 2, 4, 5], [-5, -3, -1, 2, 4], [-5, -3, -1, 2, 5], [-5, -3, -1, 2], [-5, -3, -1, 4, 5], [-5, -3, -1, 4], [-5, -3, -1, 5], [-5, -3, -1], [-5, -3, 1, 1, 2, 4, 5], [-5, -3, 1, 1, 2, 4], [-5, -3, 1, 1, 2, 5], [-5, -3, 1, 1, 2], [-5, -3, 1, 1, 4, 5], [-5, -3, 1, 1, 4], [-5, -3, 1, 1, 5], [-5, -3, 1, 1], [-5, -3, 1, 2, 4, 5], [-5, -3, 1, 2, 4], [-5, -3, 1, 2, 5], [-5, -3, 1, 2], [-5, -3, 1, 4, 5], [-5, -3, 1, 4], [-5, -3, 1, 5], [-5, -3, 1], [-5, -3, 2, 4, 5], [-5, -3, 2, 4], [-5, -3, 2, 5], [-5, -3, 2], [-5, -3, 4, 5], [-5, -3, 4], [-5, -3, 5], [-5, -3], [-5, -2, -1, 1, 1, 2, 4, 5], [-5, -2, -1, 1, 1, 2, 4], [-5, -2, -1, 1, 1, 2, 5], [-5, -2, -1, 1, 1, 2], [-5, -2, -1, 1, 1, 4, 5], [-5, -2, -1, 1, 1, 4], [-5, -2, -1, 1, 1, 5], [-5, -2, -1, 1, 1], [-5, -2, -1, 1, 2, 4, 5], [-5, -2, -1, 1, 2, 4], [-5, -2, -1, 1, 2, 5], [-5, -2, -1, 1, 2], [-5, -2, -1, 1, 4, 5], [-5, -2, -1, 1, 4], [-5, -2, -1, 1, 5], [-5, -2, -1, 1], [-5, -2, -1, 2, 4, 5], [-5, -2, -1, 2, 4], [-5, -2, -1, 2, 5], [-5, -2, -1, 2], [-5, -2, -1, 4, 5], [-5, -2, -1, 4], [-5, -2, -1, 5], [-5, -2, -1], [-5, -2, 1, 1, 2, 4, 5], [-5, -2, 1, 1, 2, 4], [-5, -2, 1, 1, 2, 5], [-5, -2, 1, 1, 2], [-5, -2, 1, 1, 4, 5], [-5, -2, 1, 1, 4], [-5, -2, 1, 1, 5], [-5, -2, 1, 1], [-5, -2, 1, 2, 4, 5], [-5, -2, 1, 2, 4], [-5, -2, 1, 2, 5], [-5, -2, 1, 2], [-5, -2, 1, 4, 5], [-5, -2, 1, 4], [-5, -2, 1, 5], [-5, -2, 1], [-5, -2, 2, 4, 5], [-5, -2, 2, 4], [-5, -2, 2, 5], [-5, -2, 2], [-5, -2, 4, 5], [-5, -2, 4], [-5, -2, 5], [-5, -2], [-5, -1, 1, 1, 2, 4, 5], [-5, -1, 1, 1, 2, 4], [-5, -1, 1, 1, 2, 5], [-5, -1, 1, 1, 2], [-5, -1, 1, 1, 4, 5], [-5, -1, 1, 1, 4], [-5, -1, 1, 1, 5], [-5, -1, 1, 1], [-5, -1, 1, 2, 4, 5], [-5, -1, 1, 2, 4], [-5, -1, 1, 2, 5], [-5, -1, 1, 2], [-5, -1, 1, 4, 5], [-5, -1, 1, 4], [-5, -1, 1, 5], [-5, -1, 1], [-5, -1, 2, 4, 5], [-5, -1, 2, 4], [-5, -1, 2, 5], [-5, -1, 2], [-5, -1, 4, 5], [-5, -1, 4], [-5, -1, 5], [-5, -1], [-5, 1, 1, 2, 4, 5], [-5, 1, 1, 2, 4], [-5, 1, 1, 2, 5], [-5, 1, 1, 2], [-5, 1, 1, 4, 5], [-5, 1, 1, 4], [-5, 1, 1, 5], [-5, 1, 1], [-5, 1, 2, 4, 5], [-5, 1, 2, 4], [-5, 1, 2, 5], [-5, 1, 2], [-5, 1, 4, 5], [-5, 1, 4], [-5, 1, 5], [-5, 1], [-5, 2, 4, 5], [-5, 2, 4], [-5, 2, 5], [-5, 2], [-5, 4, 5], [-5, 4], [-5, 5], [-5], [-4, -3, -2, -1, 1, 1, 2, 4, 5], [-4, -3, -2, -1, 1, 1, 2, 4], [-4, -3, -2, -1, 1, 1, 2, 5], [-4, -3, -2, -1, 1, 1, 2], [-4, -3, -2, -1, 1, 1, 4, 5], [-4, -3, -2, -1, 1, 1, 4], [-4, -3, -2, -1, 1, 1, 5], [-4, -3, -2, -1, 1, 1], [-4, -3, -2, -1, 1, 2, 4, 5], [-4, -3, -2, -1, 1, 2, 4], [-4, -3, -2, -1, 1, 2, 5], [-4, -3, -2, -1, 1, 2], [-4, -3, -2, -1, 1, 4, 5], [-4, -3, -2, -1, 1, 4], [-4, -3, -2, -1, 1, 5], [-4, -3, -2, -1, 1], [-4, -3, -2, -1, 2, 4, 5], [-4, -3, -2, -1, 2, 4], [-4, -3, -2, -1, 2, 5], [-4, -3, -2, -1, 2], [-4, -3, -2, -1, 4, 5], [-4, -3, -2, -1, 4], [-4, -3, -2, -1, 5], [-4, -3, -2, -1], [-4, -3, -2, 1, 1, 2, 4, 5], [-4, -3, -2, 1, 1, 2, 4], [-4, -3, -2, 1, 1, 2, 5], [-4, -3, -2, 1, 1, 2], [-4, -3, -2, 1, 1, 4, 5], [-4, -3, -2, 1, 1, 4], [-4, -3, -2, 1, 1, 5], [-4, -3, -2, 1, 1], [-4, -3, -2, 1, 2, 4, 5], [-4, -3, -2, 1, 2, 4], [-4, -3, -2, 1, 2, 5], [-4, -3, -2, 1, 2], [-4, -3, -2, 1, 4, 5], [-4, -3, -2, 1, 4], [-4, -3, -2, 1, 5], [-4, -3, -2, 1], [-4, -3, -2, 2, 4, 5], [-4, -3, -2, 2, 4], [-4, -3, -2, 2, 5], [-4, -3, -2, 2], [-4, -3, -2, 4, 5], [-4, -3, -2, 4], [-4, -3, -2, 5], [-4, -3, -2], [-4, -3, -1, 1, 1, 2, 4, 5], [-4, -3, -1, 1, 1, 2, 4], [-4, -3, -1, 1, 1, 2, 5], [-4, -3, -1, 1, 1, 2], [-4, -3, -1, 1, 1, 4, 5], [-4, -3, -1, 1, 1, 4], [-4, -3, -1, 1, 1, 5], [-4, -3, -1, 1, 1], [-4, -3, -1, 1, 2, 4, 5], [-4, -3, -1, 1, 2, 4], [-4, -3, -1, 1, 2, 5], [-4, -3, -1, 1, 2], [-4, -3, -1, 1, 4, 5], [-4, -3, -1, 1, 4], [-4, -3, -1, 1, 5], [-4, -3, -1, 1], [-4, -3, -1, 2, 4, 5], [-4, -3, -1, 2, 4], [-4, -3, -1, 2, 5], [-4, -3, -1, 2], [-4, -3, -1, 4, 5], [-4, -3, -1, 4], [-4, -3, -1, 5], [-4, -3, -1], [-4, -3, 1, 1, 2, 4, 5], [-4, -3, 1, 1, 2, 4], [-4, -3, 1, 1, 2, 5], [-4, -3, 1, 1, 2], [-4, -3, 1, 1, 4, 5], [-4, -3, 1, 1, 4], [-4, -3, 1, 1, 5], [-4, -3, 1, 1], [-4, -3, 1, 2, 4, 5], [-4, -3, 1, 2, 4], [-4, -3, 1, 2, 5], [-4, -3, 1, 2], [-4, -3, 1, 4, 5], [-4, -3, 1, 4], [-4, -3, 1, 5], [-4, -3, 1], [-4, -3, 2, 4, 5], [-4, -3, 2, 4], [-4, -3, 2, 5], [-4, -3, 2], [-4, -3, 4, 5], [-4, -3, 4], [-4, -3, 5], [-4, -3], [-4, -2, -1, 1, 1, 2, 4, 5], [-4, -2, -1, 1, 1, 2, 4], [-4, -2, -1, 1, 1, 2, 5], [-4, -2, -1, 1, 1, 2], [-4, -2, -1, 1, 1, 4, 5], [-4, -2, -1, 1, 1, 4], [-4, -2, -1, 1, 1, 5], [-4, -2, -1, 1, 1], [-4, -2, -1, 1, 2, 4, 5], [-4, -2, -1, 1, 2, 4], [-4, -2, -1, 1, 2, 5], [-4, -2, -1, 1, 2], [-4, -2, -1, 1, 4, 5], [-4, -2, -1, 1, 4], [-4, -2, -1, 1, 5], [-4, -2, -1, 1], [-4, -2, -1, 2, 4, 5], [-4, -2, -1, 2, 4], [-4, -2, -1, 2, 5], [-4, -2, -1, 2], [-4, -2, -1, 4, 5], [-4, -2, -1, 4], [-4, -2, -1, 5], [-4, -2, -1], [-4, -2, 1, 1, 2, 4, 5], [-4, -2, 1, 1, 2, 4], [-4, -2, 1, 1, 2, 5], [-4, -2, 1, 1, 2], [-4, -2, 1, 1, 4, 5], [-4, -2, 1, 1, 4], [-4, -2, 1, 1, 5], [-4, -2, 1, 1], [-4, -2, 1, 2, 4, 5], [-4, -2, 1, 2, 4], [-4, -2, 1, 2, 5], [-4, -2, 1, 2], [-4, -2, 1, 4, 5], [-4, -2, 1, 4], [-4, -2, 1, 5], [-4, -2, 1], [-4, -2, 2, 4, 5], [-4, -2, 2, 4], [-4, -2, 2, 5], [-4, -2, 2], [-4, -2, 4, 5], [-4, -2, 4], [-4, -2, 5], [-4, -2], [-4, -1, 1, 1, 2, 4, 5], [-4, -1, 1, 1, 2, 4], [-4, -1, 1, 1, 2, 5], [-4, -1, 1, 1, 2], [-4, -1, 1, 1, 4, 5], [-4, -1, 1, 1, 4], [-4, -1, 1, 1, 5], [-4, -1, 1, 1], [-4, -1, 1, 2, 4, 5], [-4, -1, 1, 2, 4], [-4, -1, 1, 2, 5], [-4, -1, 1, 2], [-4, -1, 1, 4, 5], [-4, -1, 1, 4], [-4, -1, 1, 5], [-4, -1, 1], [-4, -1, 2, 4, 5], [-4, -1, 2, 4], [-4, -1, 2, 5], [-4, -1, 2], [-4, -1, 4, 5], [-4, -1, 4], [-4, -1, 5], [-4, -1], [-4, 1, 1, 2, 4, 5], [-4, 1, 1, 2, 4], [-4, 1, 1, 2, 5], [-4, 1, 1, 2], [-4, 1, 1, 4, 5], [-4, 1, 1, 4], [-4, 1, 1, 5], [-4, 1, 1], [-4, 1, 2, 4, 5], [-4, 1, 2, 4], [-4, 1, 2, 5], [-4, 1, 2], [-4, 1, 4, 5], [-4, 1, 4], [-4, 1, 5], [-4, 1], [-4, 2, 4, 5], [-4, 2, 4], [-4, 2, 5], [-4, 2], [-4, 4, 5], [-4, 4], [-4, 5], [-4], [-3, -2, -1, 1, 1, 2, 4, 5], [-3, -2, -1, 1, 1, 2, 4], [-3, -2, -1, 1, 1, 2, 5], [-3, -2, -1, 1, 1, 2], [-3, -2, -1, 1, 1, 4, 5], [-3, -2, -1, 1, 1, 4], [-3, -2, -1, 1, 1, 5], [-3, -2, -1, 1, 1], [-3, -2, -1, 1, 2, 4, 5], [-3, -2, -1, 1, 2, 4], [-3, -2, -1, 1, 2, 5], [-3, -2, -1, 1, 2], [-3, -2, -1, 1, 4, 5], [-3, -2, -1, 1, 4], [-3, -2, -1, 1, 5], [-3, -2, -1, 1], [-3, -2, -1, 2, 4, 5], [-3, -2, -1, 2, 4], [-3, -2, -1, 2, 5], [-3, -2, -1, 2], [-3, -2, -1, 4, 5], [-3, -2, -1, 4], [-3, -2, -1, 5], [-3, -2, -1], [-3, -2, 1, 1, 2, 4, 5], [-3, -2, 1, 1, 2, 4], [-3, -2, 1, 1, 2, 5], [-3, -2, 1, 1, 2], [-3, -2, 1, 1, 4, 5], [-3, -2, 1, 1, 4], [-3, -2, 1, 1, 5], [-3, -2, 1, 1], [-3, -2, 1, 2, 4, 5], [-3, -2, 1, 2, 4], [-3, -2, 1, 2, 5], [-3, -2, 1, 2], [-3, -2, 1, 4, 5], [-3, -2, 1, 4], [-3, -2, 1, 5], [-3, -2, 1], [-3, -2, 2, 4, 5], [-3, -2, 2, 4], [-3, -2, 2, 5], [-3, -2, 2], [-3, -2, 4, 5], [-3, -2, 4], [-3, -2, 5], [-3, -2], [-3, -1, 1, 1, 2, 4, 5], [-3, -1, 1, 1, 2, 4], [-3, -1, 1, 1, 2, 5], [-3, -1, 1, 1, 2], [-3, -1, 1, 1, 4, 5], [-3, -1, 1, 1, 4], [-3, -1, 1, 1, 5], [-3, -1, 1, 1], [-3, -1, 1, 2, 4, 5], [-3, -1, 1, 2, 4], [-3, -1, 1, 2, 5], [-3, -1, 1, 2], [-3, -1, 1, 4, 5], [-3, -1, 1, 4], [-3, -1, 1, 5], [-3, -1, 1], [-3, -1, 2, 4, 5], [-3, -1, 2, 4], [-3, -1, 2, 5], [-3, -1, 2], [-3, -1, 4, 5], [-3, -1, 4], [-3, -1, 5], [-3, -1], [-3, 1, 1, 2, 4, 5], [-3, 1, 1, 2, 4], [-3, 1, 1, 2, 5], [-3, 1, 1, 2], [-3, 1, 1, 4, 5], [-3, 1, 1, 4], [-3, 1, 1, 5], [-3, 1, 1], [-3, 1, 2, 4, 5], [-3, 1, 2, 4], [-3, 1, 2, 5], [-3, 1, 2], [-3, 1, 4, 5], [-3, 1, 4], [-3, 1, 5], [-3, 1], [-3, 2, 4, 5], [-3, 2, 4], [-3, 2, 5], [-3, 2], [-3, 4, 5], [-3, 4], [-3, 5], [-3], [-2, -1, 1, 1, 2, 4, 5], [-2, -1, 1, 1, 2, 4], [-2, -1, 1, 1, 2, 5], [-2, -1, 1, 1, 2], [-2, -1, 1, 1, 4, 5], [-2, -1, 1, 1, 4], [-2, -1, 1, 1, 5], [-2, -1, 1, 1], [-2, -1, 1, 2, 4, 5], [-2, -1, 1, 2, 4], [-2, -1, 1, 2, 5], [-2, -1, 1, 2], [-2, -1, 1, 4, 5], [-2, -1, 1, 4], [-2, -1, 1, 5], [-2, -1, 1], [-2, -1, 2, 4, 5], [-2, -1, 2, 4], [-2, -1, 2, 5], [-2, -1, 2], [-2, -1, 4, 5], [-2, -1, 4], [-2, -1, 5], [-2, -1], [-2, 1, 1, 2, 4, 5], [-2, 1, 1, 2, 4], [-2, 1, 1, 2, 5], [-2, 1, 1, 2], [-2, 1, 1, 4, 5], [-2, 1, 1, 4], [-2, 1, 1, 5], [-2, 1, 1], [-2, 1, 2, 4, 5], [-2, 1, 2, 4], [-2, 1, 2, 5], [-2, 1, 2], [-2, 1, 4, 5], [-2, 1, 4], [-2, 1, 5], [-2, 1], [-2, 2, 4, 5], [-2, 2, 4], [-2, 2, 5], [-2, 2], [-2, 4, 5], [-2, 4], [-2, 5], [-2], [-1, 1, 1, 2, 4, 5], [-1, 1, 1, 2, 4], [-1, 1, 1, 2, 5], [-1, 1, 1, 2], [-1, 1, 1, 4, 5], [-1, 1, 1, 4], [-1, 1, 1, 5], [-1, 1, 1], [-1, 1, 2, 4, 5], [-1, 1, 2, 4], [-1, 1, 2, 5], [-1, 1, 2], [-1, 1, 4, 5], [-1, 1, 4], [-1, 1, 5], [-1, 1], [-1, 2, 4, 5], [-1, 2, 4], [-1, 2, 5], [-1, 2], [-1, 4, 5], [-1, 4], [-1, 5], [-1], [1, 1, 2, 4, 5], [1, 1, 2, 4], [1, 1, 2, 5], [1, 1, 2], [1, 1, 4, 5], [1, 1, 4], [1, 1, 5], [1, 1], [1, 2, 4, 5], [1, 2, 4], [1, 2, 5], [1, 2], [1, 4, 5], [1, 4], [1, 5], [1], [2, 4, 5], [2, 4], [2, 5], [2], [4, 5], [4], [5], []]},
    {""input"": [[-521,-34,3,434,101,0,1,1]], ""output"": [[-521, -34, 0, 1, 1, 3, 101, 434], [-521, -34, 0, 1, 1, 3, 101], [-521, -34, 0, 1, 1, 3, 434], [-521, -34, 0, 1, 1, 3], [-521, -34, 0, 1, 1, 101, 434], [-521, -34, 0, 1, 1, 101], [-521, -34, 0, 1, 1, 434], [-521, -34, 0, 1, 1], [-521, -34, 0, 1, 3, 101, 434], [-521, -34, 0, 1, 3, 101], [-521, -34, 0, 1, 3, 434], [-521, -34, 0, 1, 3], [-521, -34, 0, 1, 101, 434], [-521, -34, 0, 1, 101], [-521, -34, 0, 1, 434], [-521, -34, 0, 1], [-521, -34, 0, 3, 101, 434], [-521, -34, 0, 3, 101], [-521, -34, 0, 3, 434], [-521, -34, 0, 3], [-521, -34, 0, 101, 434], [-521, -34, 0, 101], [-521, -34, 0, 434], [-521, -34, 0], [-521, -34, 1, 1, 3, 101, 434], [-521, -34, 1, 1, 3, 101], [-521, -34, 1, 1, 3, 434], [-521, -34, 1, 1, 3], [-521, -34, 1, 1, 101, 434], [-521, -34, 1, 1, 101], [-521, -34, 1, 1, 434], [-521, -34, 1, 1], [-521, -34, 1, 3, 101, 434], [-521, -34, 1, 3, 101], [-521, -34, 1, 3, 434], [-521, -34, 1, 3], [-521, -34, 1, 101, 434], [-521, -34, 1, 101], [-521, -34, 1, 434], [-521, -34, 1], [-521, -34, 3, 101, 434], [-521, -34, 3, 101], [-521, -34, 3, 434], [-521, -34, 3], [-521, -34, 101, 434], [-521, -34, 101], [-521, -34, 434], [-521, -34], [-521, 0, 1, 1, 3, 101, 434], [-521, 0, 1, 1, 3, 101], [-521, 0, 1, 1, 3, 434], [-521, 0, 1, 1, 3], [-521, 0, 1, 1, 101, 434], [-521, 0, 1, 1, 101], [-521, 0, 1, 1, 434], [-521, 0, 1, 1], [-521, 0, 1, 3, 101, 434], [-521, 0, 1, 3, 101], [-521, 0, 1, 3, 434], [-521, 0, 1, 3], [-521, 0, 1, 101, 434], [-521, 0, 1, 101], [-521, 0, 1, 434], [-521, 0, 1], [-521, 0, 3, 101, 434], [-521, 0, 3, 101], [-521, 0, 3, 434], [-521, 0, 3], [-521, 0, 101, 434], [-521, 0, 101], [-521, 0, 434], [-521, 0], [-521, 1, 1, 3, 101, 434], [-521, 1, 1, 3, 101], [-521, 1, 1, 3, 434], [-521, 1, 1, 3], [-521, 1, 1, 101, 434], [-521, 1, 1, 101], [-521, 1, 1, 434], [-521, 1, 1], [-521, 1, 3, 101, 434], [-521, 1, 3, 101], [-521, 1, 3, 434], [-521, 1, 3], [-521, 1, 101, 434], [-521, 1, 101], [-521, 1, 434], [-521, 1], [-521, 3, 101, 434], [-521, 3, 101], [-521, 3, 434], [-521, 3], [-521, 101, 434], [-521, 101], [-521, 434], [-521], [-34, 0, 1, 1, 3, 101, 434], [-34, 0, 1, 1, 3, 101], [-34, 0, 1, 1, 3, 434], [-34, 0, 1, 1, 3], [-34, 0, 1, 1, 101, 434], [-34, 0, 1, 1, 101], [-34, 0, 1, 1, 434], [-34, 0, 1, 1], [-34, 0, 1, 3, 101, 434], [-34, 0, 1, 3, 101], [-34, 0, 1, 3, 434], [-34, 0, 1, 3], [-34, 0, 1, 101, 434], [-34, 0, 1, 101], [-34, 0, 1, 434], [-34, 0, 1], [-34, 0, 3, 101, 434], [-34, 0, 3, 101], [-34, 0, 3, 434], [-34, 0, 3], [-34, 0, 101, 434], [-34, 0, 101], [-34, 0, 434], [-34, 0], [-34, 1, 1, 3, 101, 434], [-34, 1, 1, 3, 101], [-34, 1, 1, 3, 434], [-34, 1, 1, 3], [-34, 1, 1, 101, 434], [-34, 1, 1, 101], [-34, 1, 1, 434], [-34, 1, 1], [-34, 1, 3, 101, 434], [-34, 1, 3, 101], [-34, 1, 3, 434], [-34, 1, 3], [-34, 1, 101, 434], [-34, 1, 101], [-34, 1, 434], [-34, 1], [-34, 3, 101, 434], [-34, 3, 101], [-34, 3, 434], [-34, 3], [-34, 101, 434], [-34, 101], [-34, 434], [-34], [0, 1, 1, 3, 101, 434], [0, 1, 1, 3, 101], [0, 1, 1, 3, 434], [0, 1, 1, 3], [0, 1, 1, 101, 434], [0, 1, 1, 101], [0, 1, 1, 434], [0, 1, 1], [0, 1, 3, 101, 434], [0, 1, 3, 101], [0, 1, 3, 434], [0, 1, 3], [0, 1, 101, 434], [0, 1, 101], [0, 1, 434], [0, 1], [0, 3, 101, 434], [0, 3, 101], [0, 3, 434], [0, 3], [0, 101, 434], [0, 101], [0, 434], [0], [1, 1, 3, 101, 434], [1, 1, 3, 101], [1, 1, 3, 434], [1, 1, 3], [1, 1, 101, 434], [1, 1, 101], [1, 1, 434], [1, 1], [1, 3, 101, 434], [1, 3, 101], [1, 3, 434], [1, 3], [1, 101, 434], [1, 101], [1, 434], [1], [3, 101, 434], [3, 101], [3, 434], [3], [101, 434], [101], [434], []]}
]

for (let i = 0; i < params.length; i++) {
    let test = params[i];
    let result = subsetsWithDup(test['input'][0]);
    let result_set = new Set(result.map(lst => JSON.stringify(lst)));
    let output_set = new Set(test['output'].map(lst => JSON.stringify(lst)));
    if (result_set.size === output_set.size && 
        [...result_set].every(elem => output_set.has(elem))) {
        console.log(""\u2705 Test passed."")
    } else {
        console.log(`\u274C Test failed. Input: ${JSON.stringify(test['input'])} Expected output: ${JSON.stringify(test['output'])} but got ${JSON.stringify(result)}`)
    }
}",,
63b5985d8ad4593d6b7b0234,combination-sum-ii,"params = [    
    {        
        ""input"": [[2,3,6,2], 7],
        ""output"": [[2, 2, 3]]
    },
    {
        ""input"": [[2,3,5], 8],
        ""output"": [[3, 5]]
    },
    {
        ""input"": [[2], 1],
        ""output"": []
    },
    {
        ""input"": [[2,3,2], 1],
        ""output"": []
    },
    {
        ""input"": [[2,3,5,7], 5],
        ""output"": [[2,3],[5]]
    },
    {
        ""input"": [[2,3,5,7,3], 15],
        ""output"": [[2, 3, 3, 7], [3, 5, 7]]
    },
    {
        ""input"": [[2,3,5,7,-3], 20],
        ""output"": []
    },
    {
        ""input"": [[2,3,5,7,10], 3],
        ""output"": [[3]]
    },
    {
        ""input"": [[2,3,5,7,10], 0],
        ""output"": [[]]
    }
]

s = Solution()
for test in params:
    result = s.combinationSum2(test['input'][0], test['input'][1])
    result_set = set([tuple(lst) for lst in result])
    output_set = set([tuple(lst) for lst in test['output']])
    if result_set == output_set:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input: {test['input']} Expected output: {test['output']} but got {result}"")","let params = [    
    {        
        ""input"": [[2,3,6,2], 7],
        ""output"": [[2, 2, 3]]
    },
    {
        ""input"": [[2,3,5], 8],
        ""output"": [[3, 5]]
    },
    {
        ""input"": [[2], 1],
        ""output"": []
    },
    {
        ""input"": [[2,3,2], 1],
        ""output"": []
    },
    {
        ""input"": [[2,3,5,7], 5],
        ""output"": [[2,3],[5]]
    },
    {
        ""input"": [[2,3,5,7,3], 15],
        ""output"": [[2, 3, 3, 7], [3, 5, 7]]
    },
    {
        ""input"": [[2,3,5,7,-3], 20],
        ""output"": []
    },
    {
        ""input"": [[2,3,5,7,10], 3],
        ""output"": [[3]]
    },
    {
        ""input"": [[2,3,5,7,10], 0],
        ""output"": [[]]
    }
]

for (const test of params) {
    const result = combinationSum2(test['input'][0], test['input'][1]);
    const resultSet = new Set(result.map(lst => JSON.stringify(lst)));
    const outputSet = new Set(test['output'].map(lst => JSON.stringify(lst)));
    if (resultSet.size === outputSet.size && [...resultSet].every(e => outputSet.has(e))) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. Input: ${JSON.stringify(test['input'])} Expected output: ${JSON.stringify(test['output'])} but got ${JSON.stringify(result)}`);
    }
}",,
63b5985e8ad4593d6b7b0235,word-search,"params = [
  {
    ""input"": [
      [""A"",""B"",""C"",""E""],
      [""S"",""F"",""C"",""S""],
      [""A"",""D"",""E"",""E""]
    ],
    ""word"": ""ABCCED"",
    ""output"": True
  },
  {
    ""input"": [
      [""A"",""B"",""C"",""E""],
      [""S"",""F"",""C"",""S""],
      [""A"",""D"",""E"",""E""]
    ],
    ""word"": ""SEE"",
    ""output"": True
  },
  {
    ""input"": [
      [""A"",""B"",""C"",""E""],
      [""S"",""F"",""C"",""S""],
      [""A"",""D"",""E"",""E""]
    ],
    ""word"": ""ABCB"",
    ""output"": False
  },
  {
    ""input"": [
      [""A"",""B"",""C"",""E""],
      [""S"",""F"",""C"",""S""],
      [""A"",""D"",""E"",""E""]
    ],
    ""word"": ""A"",
    ""output"": True
  },
  {
    ""input"": [
      [""A"",""B"",""C"",""E""],
      [""S"",""F"",""C"",""S""],
      [""A"",""D"",""E"",""E""]
    ],
    ""word"": ""A"",
    ""output"": True
  },
  {
    ""input"": [
      [""A"",""B""],
      [""C"",""D""]
    ],
    ""word"": ""ABCD"",
    ""output"": False
  },
  {
    ""input"": [
      [""A"",""B""],
      [""C"",""D""]
    ],
    ""word"": ""ABDC"",
    ""output"": True
  },
  {
    ""input"": [
      [""A"",""B"",""C""],
      [""D"",""E"",""F""],
      [""G"",""H"",""I""]
    ],
    ""word"": ""ABCDEFGHI"",
    ""output"": False
  },
  {
    ""input"": [
      [""A"",""A"",""A""],
      [""A"",""A"",""A""],
      [""A"",""A"",""A""]
    ],
    ""word"": ""AAAAAAAAAAAAA"",
    ""output"": False
  },
  {
    ""input"": [
      [""A"",""B"",""C""],
      [""D"",""E"",""F""],
      [""G"",""H"",""I""]
    ],
    ""word"": ""AEBDFHGCI"",
    ""output"": False
  }
]

s = Solution()
for test in params:
    result = s.exist(test[""input""], test[""word""])
    if result == test[""output""]:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input: board={test['input']}, word={test['word']} Expected output: {test['output']} but got {result}"")","let params = [
    {
      ""input"": [
        [""A"",""B"",""C"",""E""],
        [""S"",""F"",""C"",""S""],
        [""A"",""D"",""E"",""E""]
      ],
      ""word"": ""ABCCED"",
      ""output"": true
    },
    {
      ""input"": [
        [""A"",""B"",""C"",""E""],
        [""S"",""F"",""C"",""S""],
        [""A"",""D"",""E"",""E""]
      ],
      ""word"": ""SEE"",
      ""output"": true
    },
    {
      ""input"": [
        [""A"",""B"",""C"",""E""],
        [""S"",""F"",""C"",""S""],
        [""A"",""D"",""E"",""E""]
      ],
      ""word"": ""ABCB"",
      ""output"": false
    },
    {
      ""input"": [
        [""A"",""B"",""C"",""E""],
        [""S"",""F"",""C"",""S""],
        [""A"",""D"",""E"",""E""]
      ],
      ""word"": ""A"",
      ""output"": true
    },
    {
      ""input"": [
        [""A"",""B"",""C"",""E""],
        [""S"",""F"",""C"",""S""],
        [""A"",""D"",""E"",""E""]
      ],
      ""word"": ""A"",
      ""output"": true
    },
    {
      ""input"": [
        [""A"",""B""],
        [""C"",""D""]
      ],
      ""word"": ""ABCD"",
      ""output"": false
    },
    {
      ""input"": [
        [""A"",""B""],
        [""C"",""D""]
      ],
      ""word"": ""ABDC"",
      ""output"": true
    },
    {
      ""input"": [
        [""A"",""B"",""C""],
        [""D"",""E"",""F""],
        [""G"",""H"",""I""]
      ],
      ""word"": ""ABCDEFGHI"",
      ""output"": false
    },
    {
      ""input"": [
        [""A"",""A"",""A""],
        [""A"",""A"",""A""],
        [""A"",""A"",""A""]
      ],
      ""word"": ""AAAAAAAAAAAAA"",
      ""output"": false
    },
    {
      ""input"": [
        [""A"",""B"",""C""],
        [""D"",""E"",""F""],
        [""G"",""H"",""I""]
      ],
      ""word"": ""AEBDFHGCI"",
      ""output"": false
    }
]

for (let test of params) {
    let result = exist(test[""input""], test[""word""]);
    if (result === test[""output""]) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. Input: board=${JSON.stringify(test['input'])}, word=${test['word']} Expected output: ${JSON.stringify(test['output'])} but got ${JSON.stringify(result)}`);
    }
}",,
63b5985f8ad4593d6b7b0236,palindrome-partitioning,"params = [    
    {        
        ""input"": ""aab"",        
        ""output"": [[""a"",""a"",""b""],[""aa"",""b""]]
    },
    {
        ""input"": ""a"",
        ""output"": [[""a""]]
    },
    {
        ""input"": ""aa"",
        ""output"": [[""a"", ""a""], [""aa""]]
    },
    {
        ""input"": ""racecar"",
        ""output"": [['r', 'a', 'c', 'e', 'c', 'a', 'r'], ['r', 'a', 'cec', 'a', 'r'], ['r', 'aceca', 'r'], ['racecar']]
    },
    {
        ""input"": ""level"",
        ""output"": [['l', 'e', 'v', 'e', 'l'], ['l', 'eve', 'l'], ['level']]
    },
    {
        ""input"": ""madam"",
        ""output"": [['m', 'a', 'd', 'a', 'm'], ['m', 'ada', 'm'], ['madam']]
    },
    {
        ""input"": ""abb"",
        ""output"": [['a', 'b', 'b'], ['a', 'bb']]
    },
    {
        ""input"": ""abc"",
        ""output"": [[""a"", ""b"", ""c""]]
    },
    {
        ""input"": ""civic"",
        ""output"": [['c', 'i', 'v', 'i', 'c'], ['c', 'ivi', 'c'], ['civic']]
    }
]

s = Solution()
for test in params:
    result = s.partition(test[""input""])
    if result == test[""output""]:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input: s={test['input']} Expected output: {test['output']} but got {result}"")","let params = [    
    {        
        ""input"": ""aab"",        
        ""output"": [[""a"",""a"",""b""],[""aa"",""b""]]
    },
    {
        ""input"": ""a"",
        ""output"": [[""a""]]
    },
    {
        ""input"": ""aa"",
        ""output"": [[""a"", ""a""], [""aa""]]
    },
    {
        ""input"": ""racecar"",
        ""output"": [['r', 'a', 'c', 'e', 'c', 'a', 'r'], ['r', 'a', 'cec', 'a', 'r'], ['r', 'aceca', 'r'], ['racecar']]
    },
    {
        ""input"": ""level"",
        ""output"": [['l', 'e', 'v', 'e', 'l'], ['l', 'eve', 'l'], ['level']]
    },
    {
        ""input"": ""madam"",
        ""output"": [['m', 'a', 'd', 'a', 'm'], ['m', 'ada', 'm'], ['madam']]
    },
    {
        ""input"": ""abb"",
        ""output"": [['a', 'b', 'b'], ['a', 'bb']]
    },
    {
        ""input"": ""abc"",
        ""output"": [[""a"", ""b"", ""c""]]
    },
    {
        ""input"": ""civic"",
        ""output"": [['c', 'i', 'v', 'i', 'c'], ['c', 'ivi', 'c'], ['civic']]
    }
]

for (let i = 0; i < params.length; i++) {
    let test = params[i];
    let result = partition(test[""input""]);
    if (JSON.stringify(result) === JSON.stringify(test[""output""])) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. Input: s=${test['input']} Expected output: ${JSON.stringify(test['output'])} but got ${JSON.stringify(result)}`);
    }
}",,
63b598608ad4593d6b7b0237,letter-combinations-of-a-phone-number,"params = [    
    {        
        ""input"": ""23"",        
        ""output"": [""ad"", ""ae"", ""af"", ""bd"", ""be"", ""bf"", ""cd"", ""ce"", ""cf""],
    },
    {
        ""input"": """",
        ""output"": [],
    },
    {
        ""input"": ""2"",
        ""output"": [""a"", ""b"", ""c""],
    },
    {
        ""input"": ""79"",
        ""output"": [""pw"", ""px"", ""py"", ""pz"", ""qw"", ""qx"", ""qy"", ""qz"", ""rw"", ""rx"", ""ry"", ""rz"", ""sw"", ""sx"", ""sy"", ""sz""],
    },
    {
        ""input"": ""222"",
        ""output"": [""aaa"", ""aab"", ""aac"", ""aba"", ""abb"", ""abc"", ""aca"", ""acb"", ""acc"", ""baa"", ""bab"", ""bac"", ""bba"", ""bbb"", ""bbc"", ""bca"", ""bcb"", ""bcc"", ""caa"", ""cab"", ""cac"", ""cba"", ""cbb"", ""cbc"", ""cca"", ""ccb"", ""ccc""],
    },
    {
        ""input"": ""7"",
        ""output"": [""p"", ""q"", ""r"", ""s""],
    },
    {
        ""input"": ""29"",
        ""output"": [""aw"", ""ax"", ""ay"", ""az"", ""bw"", ""bx"", ""by"", ""bz"", ""cw"", ""cx"", ""cy"", ""cz""],
    },
    {
        ""input"": ""234"",
        ""output"": [""adg"", ""adh"", ""adi"", ""aeg"", ""aeh"", ""aei"", ""afg"", ""afh"", ""afi"", ""bdg"", ""bdh"", ""bdi"", ""beg"", ""beh"", ""bei"", ""bfg"", ""bfh"", ""bfi"", ""cdg"", ""cdh"", ""cdi"", ""ceg"", ""ceh"", ""cei"", ""cfg"", ""cfh"", ""cfi""],
    },
    {
        ""input"": ""678"",
        ""output"": ['mqt', 'mqu', 'mqv', 'mpt', 'mpu', 'mpv', 'mrt', 'mru', 'mrv', 'mst', 'msu', 'msv', 'nqt', 'nqu', 'nqv', 'npt', 'npu', 'npv', 'nrt', 'nru', 'nrv', 'nst', 'nsu', 'nsv', 'oqt', 'oqu', 'oqv', 'opt', 'opu', 'opv', 'ort', 'oru', 'orv', 'ost', 'osu', 'osv'],
    },
    {
        ""input"": ""567"",
        ""output"": ['jmq', 'jmp', 'jmr', 'jms', 'jnq', 'jnp', 'jnr', 'jns', 'joq', 'jop', 'jor', 'jos', 'kmq', 'kmp', 'kmr', 'kms', 'knq', 'knp', 'knr', 'kns', 'koq', 'kop', 'kor', 'kos', 'lmq', 'lmp', 'lmr', 'lms', 'lnq', 'lnp', 'lnr', 'lns', 'loq', 'lop', 'lor', 'los']
    }
]

s = Solution()
for test in params:
    result = s.letterCombinations(test[""input""])
    if set(result) == set(test[""output""]):
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input: digits={test['input']} Expected output: {test['output']} but got {result}"")","let params = [    
    {        
        ""input"": ""23"",        
        ""output"": [""ad"", ""ae"", ""af"", ""bd"", ""be"", ""bf"", ""cd"", ""ce"", ""cf""],
    },
    {
        ""input"": """",
        ""output"": [],
    },
    {
        ""input"": ""2"",
        ""output"": [""a"", ""b"", ""c""],
    },
    {
        ""input"": ""79"",
        ""output"": [""pw"", ""px"", ""py"", ""pz"", ""qw"", ""qx"", ""qy"", ""qz"", ""rw"", ""rx"", ""ry"", ""rz"", ""sw"", ""sx"", ""sy"", ""sz""],
    },
    {
        ""input"": ""222"",
        ""output"": [""aaa"", ""aab"", ""aac"", ""aba"", ""abb"", ""abc"", ""aca"", ""acb"", ""acc"", ""baa"", ""bab"", ""bac"", ""bba"", ""bbb"", ""bbc"", ""bca"", ""bcb"", ""bcc"", ""caa"", ""cab"", ""cac"", ""cba"", ""cbb"", ""cbc"", ""cca"", ""ccb"", ""ccc""],
    },
    {
        ""input"": ""7"",
        ""output"": [""p"", ""q"", ""r"", ""s""],
    },
    {
        ""input"": ""29"",
        ""output"": [""aw"", ""ax"", ""ay"", ""az"", ""bw"", ""bx"", ""by"", ""bz"", ""cw"", ""cx"", ""cy"", ""cz""],
    },
    {
        ""input"": ""234"",
        ""output"": [""adg"", ""adh"", ""adi"", ""aeg"", ""aeh"", ""aei"", ""afg"", ""afh"", ""afi"", ""bdg"", ""bdh"", ""bdi"", ""beg"", ""beh"", ""bei"", ""bfg"", ""bfh"", ""bfi"", ""cdg"", ""cdh"", ""cdi"", ""ceg"", ""ceh"", ""cei"", ""cfg"", ""cfh"", ""cfi""],
    },
    {
        ""input"": ""678"",
        ""output"": ['mqt', 'mqu', 'mqv', 'mpt', 'mpu', 'mpv', 'mrt', 'mru', 'mrv', 'mst', 'msu', 'msv', 'nqt', 'nqu', 'nqv', 'npt', 'npu', 'npv', 'nrt', 'nru', 'nrv', 'nst', 'nsu', 'nsv', 'oqt', 'oqu', 'oqv', 'opt', 'opu', 'opv', 'ort', 'oru', 'orv', 'ost', 'osu', 'osv'],
    },
    {
        ""input"": ""567"",
        ""output"": ['jmq', 'jmp', 'jmr', 'jms', 'jnq', 'jnp', 'jnr', 'jns', 'joq', 'jop', 'jor', 'jos', 'kmq', 'kmp', 'kmr', 'kms', 'knq', 'knp', 'knr', 'kns', 'koq', 'kop', 'kor', 'kos', 'lmq', 'lmp', 'lmr', 'lms', 'lnq', 'lnp', 'lnr', 'lns', 'loq', 'lop', 'lor', 'los']
    }
]

for (const test of params) {
    let result = letterCombinations(test.input);
    if (new Set(result).size === new Set(test.output).size && [...new Set(result)].every(x => new Set(test.output).has(x))) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. Input: digits=${test.input} Expected output: ${JSON.stringify(test.output)} but got ${JSON.stringify(result)}`);
    }
}",,
63b598618ad4593d6b7b0238,n-queens,"params = [    
    {'input': 1, 'output': [['Q']]},
    {'input': 2, 'output': []},
    {'input': 3, 'output': []},
    {'input': 4, 'output': [['.Q..', '...Q', 'Q...', '..Q.'], ['..Q.', 'Q...', '...Q', '.Q..']]},
    {'input': 5, 'output': [['Q....', '..Q..', '....Q', '.Q...', '...Q.'],
                            ['Q....', '...Q.', '.Q...', '....Q', '..Q..'], 
                            ['.Q...', '...Q.', 'Q....', '..Q..', '....Q'], 
                            ['.Q...', '....Q', '..Q..', 'Q....', '...Q.'], 
                            ['..Q..', 'Q....', '...Q.', '.Q...', '....Q'], 
                            ['..Q..', '....Q', '.Q...', '...Q.', 'Q....'], 
                            ['...Q.', 'Q....', '..Q..', '....Q', '.Q...'], 
                            ['...Q.', '.Q...', '....Q', '..Q..', 'Q....'], 
                            ['....Q', '.Q...', '...Q.', 'Q....', '..Q..'], 
                            ['....Q', '..Q..', 'Q....', '...Q.', '.Q...']]},
    {'input': 6, 'output': [['.Q....', '...Q..', '.....Q', 'Q.....', '..Q...', '....Q.'], 
                            ['..Q...', '.....Q', '.Q....', '....Q.', 'Q.....', '...Q..'], 
                            ['...Q..', 'Q.....', '....Q.', '.Q....', '.....Q', '..Q...'], 
                            ['....Q.', '..Q...', 'Q.....', '.....Q', '...Q..', '.Q....']]},
    {'input': 7, 'output': [['Q......', '..Q....', '....Q..', '......Q', '.Q.....', '...Q...', '.....Q.'], 
                            ['Q......', '...Q...', '......Q', '..Q....', '.....Q.', '.Q.....', '....Q..'], 
                            ['Q......', '....Q..', '.Q.....', '.....Q.', '..Q....', '......Q', '...Q...'], 
                            ['Q......', '.....Q.', '...Q...', '.Q.....', '......Q', '....Q..', '..Q....'], 
                            ['.Q.....', '...Q...', 'Q......', '......Q', '....Q..', '..Q....', '.....Q.'], 
                            ['.Q.....', '...Q...', '.....Q.', 'Q......', '..Q....', '....Q..', '......Q'], 
                            ['.Q.....', '....Q..', 'Q......', '...Q...', '......Q', '..Q....', '.....Q.'], 
                            ['.Q.....', '....Q..', '..Q....', 'Q......', '......Q', '...Q...', '.....Q.'], 
                            ['.Q.....', '....Q..', '......Q', '...Q...', 'Q......', '..Q....', '.....Q.'], 
                            ['.Q.....', '.....Q.', '..Q....', '......Q', '...Q...', 'Q......', '....Q..'], 
                            ['.Q.....', '......Q', '....Q..', '..Q....', 'Q......', '.....Q.', '...Q...'], 
                            ['..Q....', 'Q......', '.....Q.', '.Q.....', '....Q..', '......Q', '...Q...'], 
                            ['..Q....', 'Q......', '.....Q.', '...Q...', '.Q.....', '......Q', '....Q..'], 
                            ['..Q....', '....Q..', '......Q', '.Q.....', '...Q...', '.....Q.', 'Q......'], 
                            ['..Q....', '.....Q.', '.Q.....', '....Q..', 'Q......', '...Q...', '......Q'], 
                            ['..Q....', '......Q', '.Q.....', '...Q...', '.....Q.', 'Q......', '....Q..'], 
                            ['..Q....', '......Q', '...Q...', 'Q......', '....Q..', '.Q.....', '.....Q.'], 
                            ['...Q...', 'Q......', '..Q....', '.....Q.', '.Q.....', '......Q', '....Q..'], 
                            ['...Q...', 'Q......', '....Q..', '.Q.....', '.....Q.', '..Q....', '......Q'], 
                            ['...Q...', '.Q.....', '......Q', '....Q..', '..Q....', 'Q......', '.....Q.'], 
                            ['...Q...', '.....Q.', 'Q......', '..Q....', '....Q..', '......Q', '.Q.....'], 
                            ['...Q...', '......Q', '..Q....', '.....Q.', '.Q.....', '....Q..', 'Q......'],
                            ['...Q...', '......Q', '....Q..', '.Q.....', '.....Q.', 'Q......', '..Q....'],
                            ['....Q..', 'Q......', '...Q...', '......Q', '..Q....', '.....Q.', '.Q.....'], 
                            ['....Q..', 'Q......', '.....Q.', '...Q...', '.Q.....', '......Q', '..Q....'], 
                            ['....Q..', '.Q.....', '.....Q.', '..Q....', '......Q', '...Q...', 'Q......'], 
                            ['....Q..', '..Q....', 'Q......', '.....Q.', '...Q...', '.Q.....', '......Q'], 
                            ['....Q..', '......Q', '.Q.....', '...Q...', '.....Q.', 'Q......', '..Q....'], 
                            ['....Q..', '......Q', '.Q.....', '.....Q.', '..Q....', 'Q......', '...Q...'], 
                            ['.....Q.', 'Q......', '..Q....', '....Q..', '......Q', '.Q.....', '...Q...'], 
                            ['.....Q.', '.Q.....', '....Q..', 'Q......', '...Q...', '......Q', '..Q....'], 
                            ['.....Q.', '..Q....', 'Q......', '...Q...', '......Q', '....Q..', '.Q.....'], 
                            ['.....Q.', '..Q....', '....Q..', '......Q', 'Q......', '...Q...', '.Q.....'], 
                            ['.....Q.', '..Q....', '......Q', '...Q...', 'Q......', '....Q..', '.Q.....'], 
                            ['.....Q.', '...Q...', '.Q.....', '......Q', '....Q..', '..Q....', 'Q......'], 
                            ['.....Q.', '...Q...', '......Q', 'Q......', '..Q....', '....Q..', '.Q.....'], 
                            ['......Q', '.Q.....', '...Q...', '.....Q.', 'Q......', '..Q....', '....Q..'], 
                            ['......Q', '..Q....', '.....Q.', '.Q.....', '....Q..', 'Q......', '...Q...'], 
                            ['......Q', '...Q...', 'Q......', '....Q..', '.Q.....', '.....Q.', '..Q....'], 
                            ['......Q', '....Q..', '..Q....', 'Q......', '.....Q.', '...Q...', '.Q.....']]},
    {'input': 8, 'output': [['Q.......', '....Q...', '.......Q', '.....Q..', '..Q.....', '......Q.', '.Q......', '...Q....'], ['Q.......', '.....Q..', '.......Q', '..Q.....', '......Q.', '...Q....', '.Q......', '....Q...'], ['Q.......', '......Q.', '...Q....', '.....Q..', '.......Q', '.Q......', '....Q...', '..Q.....'], ['Q.......', '......Q.', '....Q...', '.......Q', '.Q......', '...Q....', '.....Q..', '..Q.....'], ['.Q......', '...Q....', '.....Q..', '.......Q', '..Q.....', 'Q.......', '......Q.', '....Q...'], ['.Q......', '....Q...', '......Q.', 'Q.......', '..Q.....', '.......Q', '.....Q..', '...Q....'], ['.Q......', '....Q...', '......Q.', '...Q....', 'Q.......', '.......Q', '.....Q..', '..Q.....'], ['.Q......', '.....Q..', 'Q.......', '......Q.', '...Q....', '.......Q', '..Q.....', '....Q...'], ['.Q......', '.....Q..', '.......Q', '..Q.....', 'Q.......', '...Q....', '......Q.', '....Q...'], ['.Q......', '......Q.', '..Q.....', '.....Q..', '.......Q', '....Q...', 'Q.......', '...Q....'], ['.Q......', '......Q.', '....Q...', '.......Q', 'Q.......', '...Q....', '.....Q..', '..Q.....'], ['.Q......', '.......Q', '.....Q..', 'Q.......', '..Q.....', '....Q...', '......Q.', '...Q....'], ['..Q.....', 'Q.......', '......Q.', '....Q...', '.......Q', '.Q......', '...Q....', '.....Q..'], ['..Q.....', '....Q...', '.Q......', '.......Q', 'Q.......', '......Q.', '...Q....', '.....Q..'], ['..Q.....', '....Q...', '.Q......', '.......Q', '.....Q..', '...Q....', '......Q.', 'Q.......'], ['..Q.....', '....Q...', '......Q.', 'Q.......', '...Q....', '.Q......', '.......Q', '.....Q..'], ['..Q.....', '....Q...', '.......Q', '...Q....', 'Q.......', '......Q.', '.Q......', '.....Q..'], ['..Q.....', '.....Q..', '.Q......', '....Q...', '.......Q', 'Q.......', '......Q.', '...Q....'], ['..Q.....', '.....Q..', '.Q......', '......Q.', 'Q.......', '...Q....', '.......Q', '....Q...'], ['..Q.....', '.....Q..', '.Q......', '......Q.', '....Q...', 'Q.......', '.......Q', '...Q....'], ['..Q.....', '.....Q..', '...Q....', 'Q.......', '.......Q', '....Q...', '......Q.', '.Q......'], ['..Q.....', '.....Q..', '...Q....', '.Q......', '.......Q', '....Q...', '......Q.', 'Q.......'], ['..Q.....', '.....Q..', '.......Q', 'Q.......', '...Q....', '......Q.', '....Q...', '.Q......'], ['..Q.....', '.....Q..', '.......Q', 'Q.......', '....Q...', '......Q.', '.Q......', '...Q....'], ['..Q.....', '.....Q..', '.......Q', '.Q......', '...Q....', 'Q.......', '......Q.', '....Q...'], ['..Q.....', '......Q.', '.Q......', '.......Q', '....Q...', 'Q.......', '...Q....', '.....Q..'], ['..Q.....', '......Q.', '.Q......', '.......Q', '.....Q..', '...Q....', 'Q.......', '....Q...'], ['..Q.....', '.......Q', '...Q....', '......Q.', 'Q.......', '.....Q..', '.Q......', '....Q...'], ['...Q....', 'Q.......', '....Q...', '.......Q', '.Q......', '......Q.', '..Q.....', '.....Q..'], ['...Q....', 'Q.......', '....Q...', '.......Q', '.....Q..', '..Q.....', '......Q.', '.Q......'], ['...Q....', '.Q......', '....Q...', '.......Q', '.....Q..', 'Q.......', '..Q.....', '......Q.'], ['...Q....', '.Q......', '......Q.', '..Q.....', '.....Q..', '.......Q', 'Q.......', '....Q...'], ['...Q....', '.Q......', '......Q.', '..Q.....', '.....Q..', '.......Q', '....Q...', 'Q.......'], ['...Q....', '.Q......', '......Q.', '....Q...', 'Q.......', '.......Q', '.....Q..', '..Q.....'], ['...Q....', '.Q......', '.......Q', '....Q...', '......Q.', 'Q.......', '..Q.....', '.....Q..'], ['...Q....', '.Q......', '.......Q', '.....Q..', 'Q.......', '..Q.....', '....Q...', '......Q.'], ['...Q....', '.....Q..', 'Q.......', '....Q...', '.Q......', '.......Q', '..Q.....', '......Q.'], ['...Q....', '.....Q..', '.......Q', '.Q......', '......Q.', 'Q.......', '..Q.....', '....Q...'], ['...Q....', '.....Q..', '.......Q', '..Q.....', 'Q.......', '......Q.', '....Q...', '.Q......'], ['...Q....', '......Q.', 'Q.......', '.......Q', '....Q...', '.Q......', '.....Q..', '..Q.....'], ['...Q....', '......Q.', '..Q.....', '.......Q', '.Q......', '....Q...', 'Q.......', '.....Q..'], ['...Q....', '......Q.', '....Q...', '.Q......', '.....Q..', 'Q.......', '..Q.....', '.......Q'], ['...Q....', '......Q.', '....Q...', '..Q.....', 'Q.......', '.....Q..', '.......Q', '.Q......'], ['...Q....', '.......Q', 'Q.......', '..Q.....', '.....Q..', '.Q......', '......Q.', '....Q...'], ['...Q....', '.......Q', 'Q.......', '....Q...', '......Q.', '.Q......', '.....Q..', '..Q.....'], ['...Q....', '.......Q', '....Q...', '..Q.....', 'Q.......', '......Q.', '.Q......', '.....Q..'], ['....Q...', 'Q.......', '...Q....', '.....Q..', '.......Q', '.Q......', '......Q.', '..Q.....'], ['....Q...', 'Q.......', '.......Q', '...Q....', '.Q......', '......Q.', '..Q.....', '.....Q..'], ['....Q...', 'Q.......', '.......Q', '.....Q..', '..Q.....', '......Q.', '.Q......', '...Q....'], ['....Q...', '.Q......', '...Q....', '.....Q..', '.......Q', '..Q.....', 'Q.......', '......Q.'], ['....Q...', '.Q......', '...Q....', '......Q.', '..Q.....', '.......Q', '.....Q..', 'Q.......'], ['....Q...', '.Q......', '.....Q..', 'Q.......', '......Q.', '...Q....', '.......Q', '..Q.....'], ['....Q...', '.Q......', '.......Q', 'Q.......', '...Q....', '......Q.', '..Q.....', '.....Q..'], ['....Q...', '..Q.....', 'Q.......', '.....Q..', '.......Q', '.Q......', '...Q....', '......Q.'], ['....Q...', '..Q.....', 'Q.......', '......Q.', '.Q......', '.......Q', '.....Q..', '...Q....'], ['....Q...', '..Q.....', '.......Q', '...Q....', '......Q.', 'Q.......', '.....Q..', '.Q......'], ['....Q...', '......Q.', 'Q.......', '..Q.....', '.......Q', '.....Q..', '...Q....', '.Q......'], ['....Q...', '......Q.', 'Q.......', '...Q....', '.Q......', '.......Q', '.....Q..', '..Q.....'], ['....Q...', '......Q.', '.Q......', '...Q....', '.......Q', 'Q.......', '..Q.....', '.....Q..'], ['....Q...', '......Q.', '.Q......', '.....Q..', '..Q.....', 'Q.......', '...Q....', '.......Q'], ['....Q...', '......Q.', '.Q......', '.....Q..', '..Q.....', 'Q.......', '.......Q', '...Q....'], ['....Q...', '......Q.', '...Q....', 'Q.......', '..Q.....', '.......Q', '.....Q..', '.Q......'], ['....Q...', '.......Q', '...Q....', 'Q.......', '..Q.....', '.....Q..', '.Q......', '......Q.'], ['....Q...', '.......Q', '...Q....', 'Q.......', '......Q.', '.Q......', '.....Q..', '..Q.....'], ['.....Q..', 'Q.......', '....Q...', '.Q......', '.......Q', '..Q.....', '......Q.', '...Q....'], ['.....Q..', '.Q......', '......Q.', 'Q.......', '..Q.....', '....Q...', '.......Q', '...Q....'], ['.....Q..', '.Q......', '......Q.', 'Q.......', '...Q....', '.......Q', '....Q...', '..Q.....'], ['.....Q..', '..Q.....', 'Q.......', '......Q.', '....Q...', '.......Q', '.Q......', '...Q....'], ['.....Q..', '..Q.....', 'Q.......', '.......Q', '...Q....', '.Q......', '......Q.', '....Q...'], ['.....Q..', '..Q.....', 'Q.......', '.......Q', '....Q...', '.Q......', '...Q....', '......Q.'], ['.....Q..', '..Q.....', '....Q...', '......Q.', 'Q.......', '...Q....', '.Q......', '.......Q'], ['.....Q..', '..Q.....', '....Q...', '.......Q', 'Q.......', '...Q....', '.Q......', '......Q.'], ['.....Q..', '..Q.....', '......Q.', '.Q......', '...Q....', '.......Q', 'Q.......', '....Q...'], ['.....Q..', '..Q.....', '......Q.', '.Q......', '.......Q', '....Q...', 'Q.......', '...Q....'], ['.....Q..', '..Q.....', '......Q.', '...Q....', 'Q.......', '.......Q', '.Q......', '....Q...'], ['.....Q..', '...Q....', 'Q.......', '....Q...', '.......Q', '.Q......', '......Q.', '..Q.....'], ['.....Q..', '...Q....', '.Q......', '.......Q', '....Q...', '......Q.', 'Q.......', '..Q.....'], ['.....Q..', '...Q....', '......Q.', 'Q.......', '..Q.....', '....Q...', '.Q......', '.......Q'], ['.....Q..', '...Q....', '......Q.', 'Q.......', '.......Q', '.Q......', '....Q...', '..Q.....'], ['.....Q..', '.......Q', '.Q......', '...Q....', 'Q.......', '......Q.', '....Q...', '..Q.....'], ['......Q.', 'Q.......', '..Q.....', '.......Q', '.....Q..', '...Q....', '.Q......', '....Q...'], ['......Q.', '.Q......', '...Q....', 'Q.......', '.......Q', '....Q...', '..Q.....', '.....Q..'], ['......Q.', '.Q......', '.....Q..', '..Q.....', 'Q.......', '...Q....', '.......Q', '....Q...'], ['......Q.', '..Q.....', 'Q.......', '.....Q..', '.......Q', '....Q...', '.Q......', '...Q....'], ['......Q.', '..Q.....', '.......Q', '.Q......', '....Q...', 'Q.......', '.....Q..', '...Q....'], ['......Q.', '...Q....', '.Q......', '....Q...', '.......Q', 'Q.......', '..Q.....', '.....Q..'], ['......Q.', '...Q....', '.Q......', '.......Q', '.....Q..', 'Q.......', '..Q.....', '....Q...'], ['......Q.', '....Q...', '..Q.....', 'Q.......', '.....Q..', '.......Q', '.Q......', '...Q....'], ['.......Q', '.Q......', '...Q....', 'Q.......', '......Q.', '....Q...', '..Q.....', '.....Q..'], ['.......Q', '.Q......', '....Q...', '..Q.....', 'Q.......', '......Q.', '...Q....', '.....Q..'], ['.......Q', '..Q.....', 'Q.......', '.....Q..', '.Q......', '....Q...', '......Q.', '...Q....'], ['.......Q', '...Q....', 'Q.......', '..Q.....', '.....Q..', '.Q......', '......Q.', '....Q...']]}
]

s = Solution()
for test in params:
    result = s.solveNQueens(test[""input""])
    if set(map(tuple, result)) == set(map(tuple, test[""output""])):
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input: n={test['input']} Expected output: {test['output']} but got {result}"")","let params = [    
    {'input': 1, 'output': [['Q']]},
    {'input': 2, 'output': []},
    {'input': 3, 'output': []},
    {'input': 4, 'output': [['.Q..', '...Q', 'Q...', '..Q.'], ['..Q.', 'Q...', '...Q', '.Q..']]},
    {'input': 5, 'output': [['Q....', '..Q..', '....Q', '.Q...', '...Q.'],
                            ['Q....', '...Q.', '.Q...', '....Q', '..Q..'], 
                            ['.Q...', '...Q.', 'Q....', '..Q..', '....Q'], 
                            ['.Q...', '....Q', '..Q..', 'Q....', '...Q.'], 
                            ['..Q..', 'Q....', '...Q.', '.Q...', '....Q'], 
                            ['..Q..', '....Q', '.Q...', '...Q.', 'Q....'], 
                            ['...Q.', 'Q....', '..Q..', '....Q', '.Q...'], 
                            ['...Q.', '.Q...', '....Q', '..Q..', 'Q....'], 
                            ['....Q', '.Q...', '...Q.', 'Q....', '..Q..'], 
                            ['....Q', '..Q..', 'Q....', '...Q.', '.Q...']]},
    {'input': 6, 'output': [['.Q....', '...Q..', '.....Q', 'Q.....', '..Q...', '....Q.'], 
                            ['..Q...', '.....Q', '.Q....', '....Q.', 'Q.....', '...Q..'], 
                            ['...Q..', 'Q.....', '....Q.', '.Q....', '.....Q', '..Q...'], 
                            ['....Q.', '..Q...', 'Q.....', '.....Q', '...Q..', '.Q....']]},
    {'input': 7, 'output': [['Q......', '..Q....', '....Q..', '......Q', '.Q.....', '...Q...', '.....Q.'], 
                            ['Q......', '...Q...', '......Q', '..Q....', '.....Q.', '.Q.....', '....Q..'], 
                            ['Q......', '....Q..', '.Q.....', '.....Q.', '..Q....', '......Q', '...Q...'], 
                            ['Q......', '.....Q.', '...Q...', '.Q.....', '......Q', '....Q..', '..Q....'], 
                            ['.Q.....', '...Q...', 'Q......', '......Q', '....Q..', '..Q....', '.....Q.'], 
                            ['.Q.....', '...Q...', '.....Q.', 'Q......', '..Q....', '....Q..', '......Q'], 
                            ['.Q.....', '....Q..', 'Q......', '...Q...', '......Q', '..Q....', '.....Q.'], 
                            ['.Q.....', '....Q..', '..Q....', 'Q......', '......Q', '...Q...', '.....Q.'], 
                            ['.Q.....', '....Q..', '......Q', '...Q...', 'Q......', '..Q....', '.....Q.'], 
                            ['.Q.....', '.....Q.', '..Q....', '......Q', '...Q...', 'Q......', '....Q..'], 
                            ['.Q.....', '......Q', '....Q..', '..Q....', 'Q......', '.....Q.', '...Q...'], 
                            ['..Q....', 'Q......', '.....Q.', '.Q.....', '....Q..', '......Q', '...Q...'], 
                            ['..Q....', 'Q......', '.....Q.', '...Q...', '.Q.....', '......Q', '....Q..'], 
                            ['..Q....', '....Q..', '......Q', '.Q.....', '...Q...', '.....Q.', 'Q......'], 
                            ['..Q....', '.....Q.', '.Q.....', '....Q..', 'Q......', '...Q...', '......Q'], 
                            ['..Q....', '......Q', '.Q.....', '...Q...', '.....Q.', 'Q......', '....Q..'], 
                            ['..Q....', '......Q', '...Q...', 'Q......', '....Q..', '.Q.....', '.....Q.'], 
                            ['...Q...', 'Q......', '..Q....', '.....Q.', '.Q.....', '......Q', '....Q..'], 
                            ['...Q...', 'Q......', '....Q..', '.Q.....', '.....Q.', '..Q....', '......Q'], 
                            ['...Q...', '.Q.....', '......Q', '....Q..', '..Q....', 'Q......', '.....Q.'], 
                            ['...Q...', '.....Q.', 'Q......', '..Q....', '....Q..', '......Q', '.Q.....'], 
                            ['...Q...', '......Q', '..Q....', '.....Q.', '.Q.....', '....Q..', 'Q......'],
                            ['...Q...', '......Q', '....Q..', '.Q.....', '.....Q.', 'Q......', '..Q....'],
                            ['....Q..', 'Q......', '...Q...', '......Q', '..Q....', '.....Q.', '.Q.....'], 
                            ['....Q..', 'Q......', '.....Q.', '...Q...', '.Q.....', '......Q', '..Q....'], 
                            ['....Q..', '.Q.....', '.....Q.', '..Q....', '......Q', '...Q...', 'Q......'], 
                            ['....Q..', '..Q....', 'Q......', '.....Q.', '...Q...', '.Q.....', '......Q'], 
                            ['....Q..', '......Q', '.Q.....', '...Q...', '.....Q.', 'Q......', '..Q....'], 
                            ['....Q..', '......Q', '.Q.....', '.....Q.', '..Q....', 'Q......', '...Q...'], 
                            ['.....Q.', 'Q......', '..Q....', '....Q..', '......Q', '.Q.....', '...Q...'], 
                            ['.....Q.', '.Q.....', '....Q..', 'Q......', '...Q...', '......Q', '..Q....'], 
                            ['.....Q.', '..Q....', 'Q......', '...Q...', '......Q', '....Q..', '.Q.....'], 
                            ['.....Q.', '..Q....', '....Q..', '......Q', 'Q......', '...Q...', '.Q.....'], 
                            ['.....Q.', '..Q....', '......Q', '...Q...', 'Q......', '....Q..', '.Q.....'], 
                            ['.....Q.', '...Q...', '.Q.....', '......Q', '....Q..', '..Q....', 'Q......'], 
                            ['.....Q.', '...Q...', '......Q', 'Q......', '..Q....', '....Q..', '.Q.....'], 
                            ['......Q', '.Q.....', '...Q...', '.....Q.', 'Q......', '..Q....', '....Q..'], 
                            ['......Q', '..Q....', '.....Q.', '.Q.....', '....Q..', 'Q......', '...Q...'], 
                            ['......Q', '...Q...', 'Q......', '....Q..', '.Q.....', '.....Q.', '..Q....'], 
                            ['......Q', '....Q..', '..Q....', 'Q......', '.....Q.', '...Q...', '.Q.....']]},
    {'input': 8, 'output': [['Q.......', '....Q...', '.......Q', '.....Q..', '..Q.....', '......Q.', '.Q......', '...Q....'], ['Q.......', '.....Q..', '.......Q', '..Q.....', '......Q.', '...Q....', '.Q......', '....Q...'], ['Q.......', '......Q.', '...Q....', '.....Q..', '.......Q', '.Q......', '....Q...', '..Q.....'], ['Q.......', '......Q.', '....Q...', '.......Q', '.Q......', '...Q....', '.....Q..', '..Q.....'], ['.Q......', '...Q....', '.....Q..', '.......Q', '..Q.....', 'Q.......', '......Q.', '....Q...'], ['.Q......', '....Q...', '......Q.', 'Q.......', '..Q.....', '.......Q', '.....Q..', '...Q....'], ['.Q......', '....Q...', '......Q.', '...Q....', 'Q.......', '.......Q', '.....Q..', '..Q.....'], ['.Q......', '.....Q..', 'Q.......', '......Q.', '...Q....', '.......Q', '..Q.....', '....Q...'], ['.Q......', '.....Q..', '.......Q', '..Q.....', 'Q.......', '...Q....', '......Q.', '....Q...'], ['.Q......', '......Q.', '..Q.....', '.....Q..', '.......Q', '....Q...', 'Q.......', '...Q....'], ['.Q......', '......Q.', '....Q...', '.......Q', 'Q.......', '...Q....', '.....Q..', '..Q.....'], ['.Q......', '.......Q', '.....Q..', 'Q.......', '..Q.....', '....Q...', '......Q.', '...Q....'], ['..Q.....', 'Q.......', '......Q.', '....Q...', '.......Q', '.Q......', '...Q....', '.....Q..'], ['..Q.....', '....Q...', '.Q......', '.......Q', 'Q.......', '......Q.', '...Q....', '.....Q..'], ['..Q.....', '....Q...', '.Q......', '.......Q', '.....Q..', '...Q....', '......Q.', 'Q.......'], ['..Q.....', '....Q...', '......Q.', 'Q.......', '...Q....', '.Q......', '.......Q', '.....Q..'], ['..Q.....', '....Q...', '.......Q', '...Q....', 'Q.......', '......Q.', '.Q......', '.....Q..'], ['..Q.....', '.....Q..', '.Q......', '....Q...', '.......Q', 'Q.......', '......Q.', '...Q....'], ['..Q.....', '.....Q..', '.Q......', '......Q.', 'Q.......', '...Q....', '.......Q', '....Q...'], ['..Q.....', '.....Q..', '.Q......', '......Q.', '....Q...', 'Q.......', '.......Q', '...Q....'], ['..Q.....', '.....Q..', '...Q....', 'Q.......', '.......Q', '....Q...', '......Q.', '.Q......'], ['..Q.....', '.....Q..', '...Q....', '.Q......', '.......Q', '....Q...', '......Q.', 'Q.......'], ['..Q.....', '.....Q..', '.......Q', 'Q.......', '...Q....', '......Q.', '....Q...', '.Q......'], ['..Q.....', '.....Q..', '.......Q', 'Q.......', '....Q...', '......Q.', '.Q......', '...Q....'], ['..Q.....', '.....Q..', '.......Q', '.Q......', '...Q....', 'Q.......', '......Q.', '....Q...'], ['..Q.....', '......Q.', '.Q......', '.......Q', '....Q...', 'Q.......', '...Q....', '.....Q..'], ['..Q.....', '......Q.', '.Q......', '.......Q', '.....Q..', '...Q....', 'Q.......', '....Q...'], ['..Q.....', '.......Q', '...Q....', '......Q.', 'Q.......', '.....Q..', '.Q......', '....Q...'], ['...Q....', 'Q.......', '....Q...', '.......Q', '.Q......', '......Q.', '..Q.....', '.....Q..'], ['...Q....', 'Q.......', '....Q...', '.......Q', '.....Q..', '..Q.....', '......Q.', '.Q......'], ['...Q....', '.Q......', '....Q...', '.......Q', '.....Q..', 'Q.......', '..Q.....', '......Q.'], ['...Q....', '.Q......', '......Q.', '..Q.....', '.....Q..', '.......Q', 'Q.......', '....Q...'], ['...Q....', '.Q......', '......Q.', '..Q.....', '.....Q..', '.......Q', '....Q...', 'Q.......'], ['...Q....', '.Q......', '......Q.', '....Q...', 'Q.......', '.......Q', '.....Q..', '..Q.....'], ['...Q....', '.Q......', '.......Q', '....Q...', '......Q.', 'Q.......', '..Q.....', '.....Q..'], ['...Q....', '.Q......', '.......Q', '.....Q..', 'Q.......', '..Q.....', '....Q...', '......Q.'], ['...Q....', '.....Q..', 'Q.......', '....Q...', '.Q......', '.......Q', '..Q.....', '......Q.'], ['...Q....', '.....Q..', '.......Q', '.Q......', '......Q.', 'Q.......', '..Q.....', '....Q...'], ['...Q....', '.....Q..', '.......Q', '..Q.....', 'Q.......', '......Q.', '....Q...', '.Q......'], ['...Q....', '......Q.', 'Q.......', '.......Q', '....Q...', '.Q......', '.....Q..', '..Q.....'], ['...Q....', '......Q.', '..Q.....', '.......Q', '.Q......', '....Q...', 'Q.......', '.....Q..'], ['...Q....', '......Q.', '....Q...', '.Q......', '.....Q..', 'Q.......', '..Q.....', '.......Q'], ['...Q....', '......Q.', '....Q...', '..Q.....', 'Q.......', '.....Q..', '.......Q', '.Q......'], ['...Q....', '.......Q', 'Q.......', '..Q.....', '.....Q..', '.Q......', '......Q.', '....Q...'], ['...Q....', '.......Q', 'Q.......', '....Q...', '......Q.', '.Q......', '.....Q..', '..Q.....'], ['...Q....', '.......Q', '....Q...', '..Q.....', 'Q.......', '......Q.', '.Q......', '.....Q..'], ['....Q...', 'Q.......', '...Q....', '.....Q..', '.......Q', '.Q......', '......Q.', '..Q.....'], ['....Q...', 'Q.......', '.......Q', '...Q....', '.Q......', '......Q.', '..Q.....', '.....Q..'], ['....Q...', 'Q.......', '.......Q', '.....Q..', '..Q.....', '......Q.', '.Q......', '...Q....'], ['....Q...', '.Q......', '...Q....', '.....Q..', '.......Q', '..Q.....', 'Q.......', '......Q.'], ['....Q...', '.Q......', '...Q....', '......Q.', '..Q.....', '.......Q', '.....Q..', 'Q.......'], ['....Q...', '.Q......', '.....Q..', 'Q.......', '......Q.', '...Q....', '.......Q', '..Q.....'], ['....Q...', '.Q......', '.......Q', 'Q.......', '...Q....', '......Q.', '..Q.....', '.....Q..'], ['....Q...', '..Q.....', 'Q.......', '.....Q..', '.......Q', '.Q......', '...Q....', '......Q.'], ['....Q...', '..Q.....', 'Q.......', '......Q.', '.Q......', '.......Q', '.....Q..', '...Q....'], ['....Q...', '..Q.....', '.......Q', '...Q....', '......Q.', 'Q.......', '.....Q..', '.Q......'], ['....Q...', '......Q.', 'Q.......', '..Q.....', '.......Q', '.....Q..', '...Q....', '.Q......'], ['....Q...', '......Q.', 'Q.......', '...Q....', '.Q......', '.......Q', '.....Q..', '..Q.....'], ['....Q...', '......Q.', '.Q......', '...Q....', '.......Q', 'Q.......', '..Q.....', '.....Q..'], ['....Q...', '......Q.', '.Q......', '.....Q..', '..Q.....', 'Q.......', '...Q....', '.......Q'], ['....Q...', '......Q.', '.Q......', '.....Q..', '..Q.....', 'Q.......', '.......Q', '...Q....'], ['....Q...', '......Q.', '...Q....', 'Q.......', '..Q.....', '.......Q', '.....Q..', '.Q......'], ['....Q...', '.......Q', '...Q....', 'Q.......', '..Q.....', '.....Q..', '.Q......', '......Q.'], ['....Q...', '.......Q', '...Q....', 'Q.......', '......Q.', '.Q......', '.....Q..', '..Q.....'], ['.....Q..', 'Q.......', '....Q...', '.Q......', '.......Q', '..Q.....', '......Q.', '...Q....'], ['.....Q..', '.Q......', '......Q.', 'Q.......', '..Q.....', '....Q...', '.......Q', '...Q....'], ['.....Q..', '.Q......', '......Q.', 'Q.......', '...Q....', '.......Q', '....Q...', '..Q.....'], ['.....Q..', '..Q.....', 'Q.......', '......Q.', '....Q...', '.......Q', '.Q......', '...Q....'], ['.....Q..', '..Q.....', 'Q.......', '.......Q', '...Q....', '.Q......', '......Q.', '....Q...'], ['.....Q..', '..Q.....', 'Q.......', '.......Q', '....Q...', '.Q......', '...Q....', '......Q.'], ['.....Q..', '..Q.....', '....Q...', '......Q.', 'Q.......', '...Q....', '.Q......', '.......Q'], ['.....Q..', '..Q.....', '....Q...', '.......Q', 'Q.......', '...Q....', '.Q......', '......Q.'], ['.....Q..', '..Q.....', '......Q.', '.Q......', '...Q....', '.......Q', 'Q.......', '....Q...'], ['.....Q..', '..Q.....', '......Q.', '.Q......', '.......Q', '....Q...', 'Q.......', '...Q....'], ['.....Q..', '..Q.....', '......Q.', '...Q....', 'Q.......', '.......Q', '.Q......', '....Q...'], ['.....Q..', '...Q....', 'Q.......', '....Q...', '.......Q', '.Q......', '......Q.', '..Q.....'], ['.....Q..', '...Q....', '.Q......', '.......Q', '....Q...', '......Q.', 'Q.......', '..Q.....'], ['.....Q..', '...Q....', '......Q.', 'Q.......', '..Q.....', '....Q...', '.Q......', '.......Q'], ['.....Q..', '...Q....', '......Q.', 'Q.......', '.......Q', '.Q......', '....Q...', '..Q.....'], ['.....Q..', '.......Q', '.Q......', '...Q....', 'Q.......', '......Q.', '....Q...', '..Q.....'], ['......Q.', 'Q.......', '..Q.....', '.......Q', '.....Q..', '...Q....', '.Q......', '....Q...'], ['......Q.', '.Q......', '...Q....', 'Q.......', '.......Q', '....Q...', '..Q.....', '.....Q..'], ['......Q.', '.Q......', '.....Q..', '..Q.....', 'Q.......', '...Q....', '.......Q', '....Q...'], ['......Q.', '..Q.....', 'Q.......', '.....Q..', '.......Q', '....Q...', '.Q......', '...Q....'], ['......Q.', '..Q.....', '.......Q', '.Q......', '....Q...', 'Q.......', '.....Q..', '...Q....'], ['......Q.', '...Q....', '.Q......', '....Q...', '.......Q', 'Q.......', '..Q.....', '.....Q..'], ['......Q.', '...Q....', '.Q......', '.......Q', '.....Q..', 'Q.......', '..Q.....', '....Q...'], ['......Q.', '....Q...', '..Q.....', 'Q.......', '.....Q..', '.......Q', '.Q......', '...Q....'], ['.......Q', '.Q......', '...Q....', 'Q.......', '......Q.', '....Q...', '..Q.....', '.....Q..'], ['.......Q', '.Q......', '....Q...', '..Q.....', 'Q.......', '......Q.', '...Q....', '.....Q..'], ['.......Q', '..Q.....', 'Q.......', '.....Q..', '.Q......', '....Q...', '......Q.', '...Q....'], ['.......Q', '...Q....', 'Q.......', '..Q.....', '.....Q..', '.Q......', '......Q.', '....Q...']]}
]


params.forEach(test => {
  const result = solveNQueens(test[""input""]);
  if (JSON.stringify(result) === JSON.stringify(test[""output""])) {
    console.log(""\u2705 Test passed."");
  } else {
    console.log(
      `\u274C Test failed. Input: n=${JSON.stringify(test[""input""])} Expected output: ${
        JSON.stringify(test[""output""])
      } but got ${JSON.stringify(result)}`
    );
  }
});",,
63b59a8f8ad4593d6b7b0239,number-of-islands,"params = [    
    {        
    ""input"": [            
            [""1"",""1"",""1"",""1"",""0""],
            [""1"",""1"",""0"",""1"",""0""],
            [""1"",""1"",""0"",""0"",""0""],
            [""0"",""0"",""0"",""0"",""0""]
        ],
        ""output"": 1
    },
    {
        ""input"": [            
            [""1"",""1"",""0"",""0"",""0""],
            [""1"",""1"",""0"",""0"",""0""],
            [""0"",""0"",""1"",""0"",""0""],
            [""0"",""0"",""0"",""1"",""1""]
        ],
        ""output"": 3
    },
    {
        ""input"": [            
            [""1"",""0"",""0"",""1"",""1""],
            [""0"",""1"",""1"",""0"",""0""],
            [""0"",""1"",""1"",""0"",""0""],
            [""1"",""0"",""0"",""1"",""0""]
        ],
        ""output"": 5
    },
    {
        ""input"": [            
            [""0"",""0"",""0"",""0"",""0""],
            [""0"",""0"",""0"",""0"",""0""],
            [""0"",""0"",""0"",""0"",""0""],
            [""0"",""0"",""0"",""0"",""0""]
        ],
        ""output"": 0
    },
    {
        ""input"": [            
            [""1"",""1"",""1"",""1"",""1""],
            [""1"",""1"",""1"",""1"",""1""],
            [""1"",""1"",""1"",""1"",""1""],
            [""1"",""1"",""1"",""1"",""1""]
        ],
        ""output"": 1
    },
    {
        ""input"": [            
            [""1"",""0"",""0"",""0"",""0""],
            [""0"",""1"",""0"",""0"",""0""],
            [""0"",""0"",""1"",""0"",""0""],
            [""0"",""0"",""0"",""1"",""0""]
        ],
        ""output"": 4
    },
    {
        ""input"": [            
            [""1"",""1"",""1"",""0"",""0""],
            [""1"",""1"",""1"",""0"",""0""],
            [""1"",""1"",""1"",""0"",""0""],
            [""0"",""0"",""0"",""0"",""0""]
        ],
        ""output"": 1
    },
    {
        ""input"": [            
            [""1"",""1"",""1"",""0"",""0""],
            [""1"",""1"",""0"",""0"",""0""],
            [""1"",""0"",""0"",""0"",""0""],
            [""0"",""0"",""0"",""0"",""0""]
        ],
        ""output"": 1
    },
    {
        ""input"": [            
            [""1"",""1"",""0"",""0"",""0""],
            [""1"",""0"",""0"",""0"",""0""],
            [""0"",""0"",""0"",""0"",""0""],
            [""0"",""0"",""0"",""0"",""0""]
        ],
        ""output"": 1
    },
    {
        ""input"": [            
            [""1"",""1"",""0"",""0"",""0""],
            [""0"",""0"",""0"",""0"",""0""],
            [""0"",""0"",""0"",""0"",""0""],
            [""0"",""0"",""0"",""0"",""1""]
        ],
        ""output"": 2
    },
]

s = Solution()
for test in params:
    result = s.numIslands(test[""input""])
    if result == test[""output""]:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input: {test['input']} Expected output: {test['output']} but got {result}"")","let params = [    
    {        
    ""input"": [            
            [""1"",""1"",""1"",""1"",""0""],
            [""1"",""1"",""0"",""1"",""0""],
            [""1"",""1"",""0"",""0"",""0""],
            [""0"",""0"",""0"",""0"",""0""]
        ],
        ""output"": 1
    },
    {
        ""input"": [            
            [""1"",""1"",""0"",""0"",""0""],
            [""1"",""1"",""0"",""0"",""0""],
            [""0"",""0"",""1"",""0"",""0""],
            [""0"",""0"",""0"",""1"",""1""]
        ],
        ""output"": 3
    },
    {
        ""input"": [            
            [""1"",""0"",""0"",""1"",""1""],
            [""0"",""1"",""1"",""0"",""0""],
            [""0"",""1"",""1"",""0"",""0""],
            [""1"",""0"",""0"",""1"",""0""]
        ],
        ""output"": 5
    },
    {
        ""input"": [            
            [""0"",""0"",""0"",""0"",""0""],
            [""0"",""0"",""0"",""0"",""0""],
            [""0"",""0"",""0"",""0"",""0""],
            [""0"",""0"",""0"",""0"",""0""]
        ],
        ""output"": 0
    },
    {
        ""input"": [            
            [""1"",""1"",""1"",""1"",""1""],
            [""1"",""1"",""1"",""1"",""1""],
            [""1"",""1"",""1"",""1"",""1""],
            [""1"",""1"",""1"",""1"",""1""]
        ],
        ""output"": 1
    },
    {
        ""input"": [            
            [""1"",""0"",""0"",""0"",""0""],
            [""0"",""1"",""0"",""0"",""0""],
            [""0"",""0"",""1"",""0"",""0""],
            [""0"",""0"",""0"",""1"",""0""]
        ],
        ""output"": 4
    },
    {
        ""input"": [            
            [""1"",""1"",""1"",""0"",""0""],
            [""1"",""1"",""1"",""0"",""0""],
            [""1"",""1"",""1"",""0"",""0""],
            [""0"",""0"",""0"",""0"",""0""]
        ],
        ""output"": 1
    },
    {
        ""input"": [            
            [""1"",""1"",""1"",""0"",""0""],
            [""1"",""1"",""0"",""0"",""0""],
            [""1"",""0"",""0"",""0"",""0""],
            [""0"",""0"",""0"",""0"",""0""]
        ],
        ""output"": 1
    },
    {
        ""input"": [            
            [""1"",""1"",""0"",""0"",""0""],
            [""1"",""0"",""0"",""0"",""0""],
            [""0"",""0"",""0"",""0"",""0""],
            [""0"",""0"",""0"",""0"",""0""]
        ],
        ""output"": 1
    },
    {
        ""input"": [            
            [""1"",""1"",""0"",""0"",""0""],
            [""0"",""0"",""0"",""0"",""0""],
            [""0"",""0"",""0"",""0"",""0""],
            [""0"",""0"",""0"",""0"",""1""]
        ],
        ""output"": 2
    },
]

params.forEach(test => {
    const result = numIslands(test.input);
    if (result === test.output) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. Input: ${JSON.stringify(test.input)} Expected output: ${test.output} but got ${result}`);
    }
})",,
63b59a8f8ad4593d6b7b023a,clone-graph,"params = [
    {
        ""input"": [[2,4],[1,3],[2,4],[1,3]],
        ""output"": [[2, 4], [1, 3], [1, 3], [2, 4]]
    },
    {
        ""input"": [[2,4],[1,3],[2,4],[1,3,5],[4]],
        ""output"": [[2, 4], [1, 3], [1, 3, 5], [2, 4], [4]]
    },
    {
        ""input"": [[]],
        ""output"": [[]]
    },
    {
        ""input"": [],
        ""output"": []
    },
    {
        ""input"": [[2],[1]],
        ""output"": [[2],[1]]
    },
    {
        ""input"": [[2,3],[3,4],[4,5,2,1],[2,3,5,6],[3, 4, 6],[4, 5]],
        ""output"": [[2,3],[3,4],[4,5,2,1],[2,3,5,6],[3, 4, 6],[4, 5]],
    },
    {
        ""input"": [[2,3],[1, 3],[1,2,4],[3]],
        ""output"": [[2,3],[1, 3],[1,2,4],[3]],
    },
    {
        ""input"": [[2,3,4],[1,3,4],[1,4,2],[1, 2, 3]],
        ""output"": [[2,3,4],[1,3,4],[1,4,2],[1, 2, 3]],
    },
    {
        ""input"": [[2,3,4,5],[1,3,4,5],[1,4,2,5],[1,5,2,3],[1, 2, 3, 4]],
        ""output"": [[2,3,4,5],[1,3,4,5],[1,4,2,5],[1,5,2,3],[1, 2, 3, 4]],
    },
    {
        ""input"": [[2],[1, 3],[2, 4],[3, 5],[4, 6],[5, 7],[6, 8],[7]],
        ""output"":[[2],[1, 3],[2, 4],[3, 5],[4, 6],[5, 7],[6, 8],[7]],
    },
]

def arrayToGraph(arr):
    nodes = [Node(i + 1) for i in range(len(arr))]

    for i, edges in enumerate(arr):
        node = nodes[i]
        for j in edges:
            for n in nodes: 
                if n.val == j:
                    node.neighbors.append(n)
      
    return nodes[0] if nodes else None


def graphToArray(graph):
    arr = []
    queue = [graph]
    visited = set()
    while queue:
        node = queue.pop(0)
        if node not in visited:
            visited.add(node)
            if node: 
                edges = [n.val for n in node.neighbors]
                arr.append(edges)
                queue += node.neighbors
    return arr

s = Solution()
for param in params:
    input_data = param[""input""]
    expected_output = param[""output""]    
    res_node = arrayToGraph(input_data)
    result = s.cloneGraph(res_node)
    res_arr = graphToArray(result)
    if res_arr == expected_output:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input: {input_data} Expected output: {expected_output} but got {res_arr}"")","let params = [
    {
        ""input"": [[2,4],[1,3],[2,4],[1,3]],
        ""output"": [[2, 4], [1, 3], [1, 3], [2, 4]]
    },
    {
        ""input"": [[2,4],[1,3],[2,4],[1,3,5],[4]],
        ""output"": [[2, 4], [1, 3], [1, 3, 5], [2, 4], [4]]
    },
    {
        ""input"": [[]],
        ""output"": [[]]
    },
    {
        ""input"": [],
        ""output"": []
    },
    {
        ""input"": [[2],[1]],
        ""output"": [[2],[1]]
    },
    {
        ""input"": [[2,3],[3,4],[4,5,2,1],[2,3,5,6],[3, 4, 6],[4, 5]],
        ""output"": [[2,3],[3,4],[4,5,2,1],[2,3,5,6],[3, 4, 6],[4, 5]],
    },
    {
        ""input"": [[2,3],[1, 3],[1,2,4],[3]],
        ""output"": [[2,3],[1, 3],[1,2,4],[3]],
    },
    {
        ""input"": [[2,3,4],[1,3,4],[1,4,2],[1, 2, 3]],
        ""output"": [[2,3,4],[1,3,4],[1,4,2],[1, 2, 3]],
    },
    {
        ""input"": [[2,3,4,5],[1,3,4,5],[1,4,2,5],[1,5,2,3],[1, 2, 3, 4]],
        ""output"": [[2,3,4,5],[1,3,4,5],[1,4,2,5],[1,5,2,3],[1, 2, 3, 4]],
    },
    {
        ""input"": [[2],[1, 3],[2, 4],[3, 5],[4, 6],[5, 7],[6, 8],[7]],
        ""output"":[[2],[1, 3],[2, 4],[3, 5],[4, 6],[5, 7],[6, 8],[7]],
    },
]


function arrayToGraph(arr) {
    let nodes = [];
    for (let i = 0; i < arr.length; i++) {
        nodes.push(new Node(i + 1));
    }

    for (let i = 0; i < arr.length; i++) {
        let node = nodes[i];
        let edges = arr[i];
        for (let j = 0; j < edges.length; j++) {
            for (let n = 0; n < nodes.length; n++) {
                if (nodes[n].val === edges[j]) {
                    node.neighbors.push(nodes[n]);
                }
            }
        }
    }
    return nodes.length ? nodes[0] : null;
}

function graphToArray(graph) {
    let arr = [];
    let queue = [graph];
    let visited = new Set();
    while (queue.length) {
        let node = queue.shift();
        if (!visited.has(node)) {
            visited.add(node);
            if (node) {
                let edges = node.neighbors.map(n => n.val);
                arr.push(edges);
                queue = queue.concat(node.neighbors);
            }
        }
    }
    return arr;
}


params.forEach(param => {
    let input_data = param[""input""];
    let expected_output = param[""output""];
    let res_node = arrayToGraph(input_data);
    let result = cloneGraph(res_node);
    let res_arr = graphToArray(result);
    if (JSON.stringify(res_arr) === JSON.stringify(expected_output)) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. Input: ${input_data} Expected output: ${expected_output} but got ${res_arr}`);
    }
});","class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []","function Node(val, neighbors) {
    this.val = val === undefined ? 0 : val;
    this.neighbors = neighbors === undefined ? [] : neighbors;
}"
63b59a918ad4593d6b7b023b,max-area-of-island,"params = [   
    # from the problem statement    
    {
        ""input"": [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]],
        ""output"": 6
    },
    {
        ""input"": [[0,0,0,0,0,0,0,0]],
        ""output"": 0
    },
    # edge case with a single row and single column
    {
        ""input"": [[0]],
        ""output"": 0
    },
    {
        ""input"": [[1]],
        ""output"": 1
    },
    # grid with only zeros
    {
        ""input"": [[0,0,0,0],[0,0,0,0],[0,0,1,1],[1,0,0,1]],
        ""output"": 3
    },
    # grid with only ones
    {
        ""input"": [[1,1,1,1],[1,1,1,0],[1,1,1,1],[1,1,1,1]],
        ""output"": 15
    },
    # alternating rows of zeros and ones
    {
        ""input"": [[0,0,0,0],[1,1,1,1],[0,0,0,0],[1,1,1,1]],
        ""output"": 4
    },
    # grid with disconnected islands
    {
        ""input"": [[1,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,1,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,1,0,0]],
        ""output"": 1
    },
    # grid with a large island
    {
        ""input"" : [
            [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
            [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
            [0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
            [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        ],
        ""output"": 679
    },
    {
        ""input"" : [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        ""output"": 8
    },
    # grid with islands of different sizes
    {
        ""input"": [[1,0,0,0,0,0,0,1],[0,0,1,0,0,0,1,0],[0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1]],
        ""output"": 1
    }   
]

obj = Solution()
for param in params:
    grid = param['input']
    expected_output = param['output']
    result = obj.maxAreaOfIsland(grid)
    if result == expected_output:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input: {grid} Expected output: {expected_output} but got {result}"")","let params = [   
    {
        ""input"": [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]],
        ""output"": 6
    },
    {
        ""input"": [[0,0,0,0,0,0,0,0]],
        ""output"": 0
    },
    {
        ""input"": [[0]],
        ""output"": 0
    },
    {
        ""input"": [[1]],
        ""output"": 1
    },
    {
        ""input"": [[0,0,0,0],[0,0,0,0],[0,0,1,1],[1,0,0,1]],
        ""output"": 3
    },
    {
        ""input"": [[1,1,1,1],[1,1,1,0],[1,1,1,1],[1,1,1,1]],
        ""output"": 15
    },
    {
        ""input"": [[0,0,0,0],[1,1,1,1],[0,0,0,0],[1,1,1,1]],
        ""output"": 4
    },
    {
        ""input"": [[1,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,1,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,1,0,0]],
        ""output"": 1
    },
    {
        ""input"" : [
            [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
            [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
            [0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
            [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        ],
        ""output"": 679
    },
    {
        ""input"" : [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        ""output"": 8
    },
    {
        ""input"": [[1,0,0,0,0,0,0,1],[0,0,1,0,0,0,1,0],[0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1]],
        ""output"": 1
    }   
]

for (const param of params) {
    const grid = param.input;
    const expected_output = param.output;
    const result = maxAreaOfIsland(grid);
    if (result === expected_output) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. Input: ${grid} Expected output: ${expected_output} but got ${result}`);
    }
}",,
63b59a928ad4593d6b7b023c,pacific-atlantic-water-flow,"params = [    
    {  
        ""input"": [[1]], 
        ""output"": [[0,0]]
    },
    {
        ""input"": [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]], 
        ""output"": [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]
    },
    {
        ""input"": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 
        ""output"": [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 15], [0, 16], [0, 17], [0, 18], [0, 19], [0, 20], [0, 21], [0, 22], [0, 23], [0, 24], [0, 25], [0, 26], [0, 27], [0, 28], [0, 29], [0, 30], [0, 31], [0, 32], [0, 33], [0, 34], [0, 35], [0, 36], [0, 37], [0, 38], [0, 39], [0, 40], [0, 41], [0, 42], [0, 43], [0, 44], [0, 45], [0, 46], [0, 47], [0, 48], [0, 49], [0, 50], [0, 51], [0, 52], [0, 53], [0, 54], [0, 55], [0, 56], [0, 57], [0, 58], [0, 59], [0, 60], [0, 61], [0, 62], [0, 63], [0, 64], [0, 65], [0, 66], [0, 67], [0, 68], [0, 69], [0, 70], [0, 71], [0, 72], [0, 73], [0, 74], [0, 75], [0, 76], [0, 77], [0, 78], [0, 79], [0, 80], [0, 81], [0, 82], [0, 83], [0, 84], [0, 85], [0, 86], [0, 87], [0, 88], [0, 89], [0, 90], [0, 91], [0, 92], [0, 93], [0, 94], [0, 95], [0, 96], [0, 97], [0, 98], [0, 99], [0, 100], [0, 101], [0, 102], [0, 103], [0, 104], [0, 105], [0, 106], [0, 107], [0, 108], [0, 109], [0, 110], [0, 111], [0, 112], [0, 113], [0, 114], [0, 115], [0, 116], [0, 117], [0, 118], [0, 119], [0, 120], [0, 121], [0, 122], [0, 123], [0, 124], [0, 125], [0, 126], [0, 127], [0, 128], [0, 129], [0, 130], [0, 131], [0, 132], [0, 133], [0, 134], [0, 135], [0, 136], [0, 137], [0, 138], [0, 139], [0, 140], [0, 141], [0, 142], [0, 143], [0, 144], [0, 145], [0, 146], [0, 147], [0, 148], [0, 149], [0, 150], [0, 151], [0, 152], [0, 153], [0, 154], [0, 155], [0, 156], [0, 157], [0, 158], [0, 159], [0, 160], [0, 161], [0, 162], [0, 163], [0, 164], [0, 165], [0, 166], [0, 167], [0, 168], [0, 169], [0, 170], [0, 171], [0, 172], [0, 173], [0, 174], [0, 175], [0, 176], [0, 177], [0, 178], [0, 179], [0, 180], [0, 181], [0, 182], [0, 183], [0, 184], [0, 185], [0, 186], [0, 187], [0, 188], [0, 189], [0, 190], [0, 191], [0, 192], [0, 193], [0, 194], [0, 195], [0, 196], [0, 197], [0, 198], [0, 199], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [1, 10], [1, 11], [1, 12], [1, 13], [1, 14], [1, 15], [1, 16], [1, 17], [1, 18], [1, 19], [1, 20], [1, 21], [1, 22], [1, 23], [1, 24], [1, 25], [1, 26], [1, 27], [1, 28], [1, 29], [1, 30], [1, 31], [1, 32], [1, 33], [1, 34], [1, 35], [1, 36], [1, 37], [1, 38], [1, 39], [1, 40], [1, 41], [1, 42], [1, 43], [1, 44], [1, 45], [1, 46], [1, 47], [1, 48], [1, 49], [1, 50], [1, 51], [1, 52], [1, 53], [1, 54], [1, 55], [1, 56], [1, 57], [1, 58], [1, 59], [1, 60], [1, 61], [1, 62], [1, 63], [1, 64], [1, 65], [1, 66], [1, 67], [1, 68], [1, 69], [1, 70], [1, 71], [1, 72], [1, 73], [1, 74], [1, 75], [1, 76], [1, 77], [1, 78], [1, 79], [1, 80], [1, 81], [1, 82], [1, 83], [1, 84], [1, 85], [1, 86], [1, 87], [1, 88], [1, 89], [1, 90], [1, 91], [1, 92], [1, 93], [1, 94], [1, 95], [1, 96], [1, 97], [1, 98], [1, 99], [1, 100], [1, 101], [1, 102], [1, 103], [1, 104], [1, 105], [1, 106], [1, 107], [1, 108], [1, 109], [1, 110], [1, 111], [1, 112], [1, 113], [1, 114], [1, 115], [1, 116], [1, 117], [1, 118], [1, 119], [1, 120], [1, 121], [1, 122], [1, 123], [1, 124], [1, 125], [1, 126], [1, 127], [1, 128], [1, 129], [1, 130], [1, 131], [1, 132], [1, 133], [1, 134], [1, 135], [1, 136], [1, 137], [1, 138], [1, 139], [1, 140], [1, 141], [1, 142], [1, 143], [1, 144], [1, 145], [1, 146], [1, 147], [1, 148], [1, 149], [1, 150], [1, 151], [1, 152], [1, 153], [1, 154], [1, 155], [1, 156], [1, 157], [1, 158], [1, 159], [1, 160], [1, 161], [1, 162], [1, 163], [1, 164], [1, 165], [1, 166], [1, 167], [1, 168], [1, 169], [1, 170], [1, 171], [1, 172], [1, 173], [1, 174], [1, 175], [1, 176], [1, 177], [1, 178], [1, 179], [1, 180], [1, 181], [1, 182], [1, 183], [1, 184], [1, 185], [1, 186], [1, 187], [1, 188], [1, 189], [1, 190], [1, 191], [1, 192], [1, 193], [1, 194], [1, 195], [1, 196], [1, 197], [1, 198], [1, 199], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [2, 10], [2, 11], [2, 12], [2, 13], [2, 14], [2, 15], [2, 16], [2, 17], [2, 18], [2, 19], [2, 20], [2, 21], [2, 22], [2, 23], [2, 24], [2, 25], [2, 26], [2, 27], [2, 28], [2, 29], [2, 30], [2, 31], [2, 32], [2, 33], [2, 34], [2, 35], [2, 36], [2, 37], [2, 38], [2, 39], [2, 40], [2, 41], [2, 42], [2, 43], [2, 44], [2, 45], [2, 46], [2, 47], [2, 48], [2, 49], [2, 50], [2, 51], [2, 52], [2, 53], [2, 54], [2, 55], [2, 56], [2, 57], [2, 58], [2, 59], [2, 60], [2, 61], [2, 62], [2, 63], [2, 64], [2, 65], [2, 66], [2, 67], [2, 68], [2, 69], [2, 70], [2, 71], [2, 72], [2, 73], [2, 74], [2, 75], [2, 76], [2, 77], [2, 78], [2, 79], [2, 80], [2, 81], [2, 82], [2, 83], [2, 84], [2, 85], [2, 86], [2, 87], [2, 88], [2, 89], [2, 90], [2, 91], [2, 92], [2, 93], [2, 94], [2, 95], [2, 96], [2, 97], [2, 98], [2, 99], [2, 100], [2, 101], [2, 102], [2, 103], [2, 104], [2, 105], [2, 106], [2, 107], [2, 108], [2, 109], [2, 110], [2, 111], [2, 112], [2, 113], [2, 114], [2, 115], [2, 116], [2, 117], [2, 118], [2, 119], [2, 120], [2, 121], [2, 122], [2, 123], [2, 124], [2, 125], [2, 126], [2, 127], [2, 128], [2, 129], [2, 130], [2, 131], [2, 132], [2, 133], [2, 134], [2, 135], [2, 136], [2, 137], [2, 138], [2, 139], [2, 140], [2, 141], [2, 142], [2, 143], [2, 144], [2, 145], [2, 146], [2, 147], [2, 148], [2, 149], [2, 150], [2, 151], [2, 152], [2, 153], [2, 154], [2, 155], [2, 156], [2, 157], [2, 158], [2, 159], [2, 160], [2, 161], [2, 162], [2, 163], [2, 164], [2, 165], [2, 166], [2, 167], [2, 168], [2, 169], [2, 170], [2, 171], [2, 172], [2, 173], [2, 174], [2, 175], [2, 176], [2, 177], [2, 178], [2, 179], [2, 180], [2, 181], [2, 182], [2, 183], [2, 184], [2, 185], [2, 186], [2, 187], [2, 188], [2, 189], [2, 190], [2, 191], [2, 192], [2, 193], [2, 194], [2, 195], [2, 196], [2, 197], [2, 198], [2, 199]]
    },
    {
        ""input"": [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]], 
        ""output"": [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 15], [0, 16], [0, 17], [0, 18], [0, 19], [0, 20], [0, 21], [0, 22], [0, 23], [0, 24], [0, 25], [0, 26], [0, 27], [0, 28], [0, 29], [0, 30], [0, 31], [0, 32], [0, 33], [0, 34], [0, 35], [0, 36], [0, 37], [0, 38], [0, 39], [0, 40], [0, 41], [0, 42], [0, 43], [0, 44], [0, 45], [0, 46], [0, 47], [0, 48], [0, 49], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [1, 10], [1, 11], [1, 12], [1, 13], [1, 14], [1, 15], [1, 16], [1, 17], [1, 18], [1, 19], [1, 20], [1, 21], [1, 22], [1, 23], [1, 24], [1, 25], [1, 26], [1, 27], [1, 28], [1, 29], [1, 30], [1, 31], [1, 32], [1, 33], [1, 34], [1, 35], [1, 36], [1, 37], [1, 38], [1, 39], [1, 40], [1, 41], [1, 42], [1, 43], [1, 44], [1, 45], [1, 46], [1, 47], [1, 48], [1, 49], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [2, 10], [2, 11], [2, 12], [2, 13], [2, 14], [2, 15], [2, 16], [2, 17], [2, 18], [2, 19], [2, 20], [2, 21], [2, 22], [2, 23], [2, 24], [2, 25], [2, 26], [2, 27], [2, 28], [2, 29], [2, 30], [2, 31], [2, 32], [2, 33], [2, 34], [2, 35], [2, 36], [2, 37], [2, 38], [2, 39], [2, 40], [2, 41], [2, 42], [2, 43], [2, 44], [2, 45], [2, 46], [2, 47], [2, 48], [2, 49], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [3, 10], [3, 11], [3, 12], [3, 13], [3, 14], [3, 15], [3, 16], [3, 17], [3, 18], [3, 19], [3, 20], [3, 21], [3, 22], [3, 23], [3, 24], [3, 25], [3, 26], [3, 27], [3, 28], [3, 29], [3, 30], [3, 31], [3, 32], [3, 33], [3, 34], [3, 35], [3, 36], [3, 37], [3, 38], [3, 39], [3, 40], [3, 41], [3, 42], [3, 43], [3, 44], [3, 45], [3, 46], [3, 47], [3, 48], [3, 49], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [4, 10], [4, 11], [4, 12], [4, 13], [4, 14], [4, 15], [4, 16], [4, 17], [4, 18], [4, 19], [4, 20], [4, 21], [4, 22], [4, 23], [4, 24], [4, 25], [4, 26], [4, 27], [4, 28], [4, 29], [4, 30], [4, 31], [4, 32], [4, 33], [4, 34], [4, 35], [4, 36], [4, 37], [4, 38], [4, 39], [4, 40], [4, 41], [4, 42], [4, 43], [4, 44], [4, 45], [4, 46], [4, 47], [4, 48], [4, 49], [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [5, 9], [5, 10], [5, 11], [5, 12], [5, 13], [5, 14], [5, 15], [5, 16], [5, 17], [5, 18], [5, 19], [5, 20], [5, 21], [5, 22], [5, 23], [5, 24], [5, 25], [5, 26], [5, 27], [5, 28], [5, 29], [5, 30], [5, 31], [5, 32], [5, 33], [5, 34], [5, 35], [5, 36], [5, 37], [5, 38], [5, 39], [5, 40], [5, 41], [5, 42], [5, 43], [5, 44], [5, 45], [5, 46], [5, 47], [5, 48], [5, 49], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [6, 10], [6, 11], [6, 12], [6, 13], [6, 14], [6, 15], [6, 16], [6, 17], [6, 18], [6, 19], [6, 20], [6, 21], [6, 22], [6, 23], [6, 24], [6, 25], [6, 26], [6, 27], [6, 28], [6, 29], [6, 30], [6, 31], [6, 32], [6, 33], [6, 34], [6, 35], [6, 36], [6, 37], [6, 38], [6, 39], [6, 40], [6, 41], [6, 42], [6, 43], [6, 44], [6, 45], [6, 46], [6, 47], [6, 48], [6, 49], [7, 0], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [7, 9], [7, 10], [7, 11], [7, 12], [7, 13], [7, 14], [7, 15], [7, 16], [7, 17], [7, 18], [7, 19], [7, 20], [7, 21], [7, 22], [7, 23], [7, 24], [7, 25], [7, 26], [7, 27], [7, 28], [7, 29], [7, 30], [7, 31], [7, 32], [7, 33], [7, 34], [7, 35], [7, 36], [7, 37], [7, 38], [7, 39], [7, 40], [7, 41], [7, 42], [7, 43], [7, 44], [7, 45], [7, 46], [7, 47], [7, 48], [7, 49], [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [8, 10], [8, 11], [8, 12], [8, 13], [8, 14], [8, 15], [8, 16], [8, 17], [8, 18], [8, 19], [8, 20], [8, 21], [8, 22], [8, 23], [8, 24], [8, 25], [8, 26], [8, 27], [8, 28], [8, 29], [8, 30], [8, 31], [8, 32], [8, 33], [8, 34], [8, 35], [8, 36], [8, 37], [8, 38], [8, 39], [8, 40], [8, 41], [8, 42], [8, 43], [8, 44], [8, 45], [8, 46], [8, 47], [8, 48], [8, 49], [9, 0], [9, 1], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8], [9, 9], [9, 10], [9, 11], [9, 12], [9, 13], [9, 14], [9, 15], [9, 16], [9, 17], [9, 18], [9, 19], [9, 20], [9, 21], [9, 22], [9, 23], [9, 24], [9, 25], [9, 26], [9, 27], [9, 28], [9, 29], [9, 30], [9, 31], [9, 32], [9, 33], [9, 34], [9, 35], [9, 36], [9, 37], [9, 38], [9, 39], [9, 40], [9, 41], [9, 42], [9, 43], [9, 44], [9, 45], [9, 46], [9, 47], [9, 48], [9, 49], [10, 0], [10, 1], [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [10, 10], [10, 11], [10, 12], [10, 13], [10, 14], [10, 15], [10, 16], [10, 17], [10, 18], [10, 19], [10, 20], [10, 21], [10, 22], [10, 23], [10, 24], [10, 25], [10, 26], [10, 27], [10, 28], [10, 29], [10, 30], [10, 31], [10, 32], [10, 33], [10, 34], [10, 35], [10, 36], [10, 37], [10, 38], [10, 39], [10, 40], [10, 41], [10, 42], [10, 43], [10, 44], [10, 45], [10, 46], [10, 47], [10, 48], [10, 49], [11, 0], [11, 1], [11, 2], [11, 3], [11, 4], [11, 5], [11, 6], [11, 7], [11, 8], [11, 9], [11, 10], [11, 11], [11, 12], [11, 13], [11, 14], [11, 15], [11, 16], [11, 17], [11, 18], [11, 19], [11, 20], [11, 21], [11, 22], [11, 23], [11, 24], [11, 25], [11, 26], [11, 27], [11, 28], [11, 29], [11, 30], [11, 31], [11, 32], [11, 33], [11, 34], [11, 35], [11, 36], [11, 37], [11, 38], [11, 39], [11, 40], [11, 41], [11, 42], [11, 43], [11, 44], [11, 45], [11, 46], [11, 47], [11, 48], [11, 49], [12, 0], [12, 1], [12, 2], [12, 3], [12, 4], [12, 5], [12, 6], [12, 7], [12, 8], [12, 9], [12, 10], [12, 11], [12, 12], [12, 13], [12, 14], [12, 15], [12, 16], [12, 17], [12, 18], [12, 19], [12, 20], [12, 21], [12, 22], [12, 23], [12, 24], [12, 25], [12, 26], [12, 27], [12, 28], [12, 29], [12, 30], [12, 31], [12, 32], [12, 33], [12, 34], [12, 35], [12, 36], [12, 37], [12, 38], [12, 39], [12, 40], [12, 41], [12, 42], [12, 43], [12, 44], [12, 45], [12, 46], [12, 47], [12, 48], [12, 49]]
    },
    {
        ""input"": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11], [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12], [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13], [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14], [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15], [16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16], [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17], [18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18], [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]], 
        ""output"": [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 15], [0, 16], [0, 17], [0, 18], [0, 19], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [1, 10], [1, 11], [1, 12], [1, 13], [1, 14], [1, 15], [1, 16], [1, 17], [1, 18], [1, 19], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [2, 10], [2, 11], [2, 12], [2, 13], [2, 14], [2, 15], [2, 16], [2, 17], [2, 18], [2, 19], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [3, 10], [3, 11], [3, 12], [3, 13], [3, 14], [3, 15], [3, 16], [3, 17], [3, 18], [3, 19], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [4, 10], [4, 11], [4, 12], [4, 13], [4, 14], [4, 15], [4, 16], [4, 17], [4, 18], [4, 19], [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [5, 9], [5, 10], [5, 11], [5, 12], [5, 13], [5, 14], [5, 15], [5, 16], [5, 17], [5, 18], [5, 19], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [6, 10], [6, 11], [6, 12], [6, 13], [6, 14], [6, 15], [6, 16], [6, 17], [6, 18], [6, 19], [7, 0], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [7, 9], [7, 10], [7, 11], [7, 12], [7, 13], [7, 14], [7, 15], [7, 16], [7, 17], [7, 18], [7, 19], [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [8, 10], [8, 11], [8, 12], [8, 13], [8, 14], [8, 15], [8, 16], [8, 17], [8, 18], [8, 19], [9, 0], [9, 1], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8], [9, 9], [9, 10], [9, 11], [9, 12], [9, 13], [9, 14], [9, 15], [9, 16], [9, 17], [9, 18], [9, 19], [10, 0], [10, 1], [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [10, 10], [10, 11], [10, 12], [10, 13], [10, 14], [10, 15], [10, 16], [10, 17], [10, 18], [10, 19], [11, 0], [11, 1], [11, 2], [11, 3], [11, 4], [11, 5], [11, 6], [11, 7], [11, 8], [11, 9], [11, 10], [11, 11], [11, 12], [11, 13], [11, 14], [11, 15], [11, 16], [11, 17], [11, 18], [11, 19], [12, 0], [12, 1], [12, 2], [12, 3], [12, 4], [12, 5], [12, 6], [12, 7], [12, 8], [12, 9], [12, 10], [12, 11], [12, 12], [12, 13], [12, 14], [12, 15], [12, 16], [12, 17], [12, 18], [12, 19], [13, 0], [13, 1], [13, 2], [13, 3], [13, 4], [13, 5], [13, 6], [13, 7], [13, 8], [13, 9], [13, 10], [13, 11], [13, 12], [13, 13], [13, 14], [13, 15], [13, 16], [13, 17], [13, 18], [13, 19], [14, 0], [14, 1], [14, 2], [14, 3], [14, 4], [14, 5], [14, 6], [14, 7], [14, 8], [14, 9], [14, 10], [14, 11], [14, 12], [14, 13], [14, 14], [14, 15], [14, 16], [14, 17], [14, 18], [14, 19], [15, 0], [15, 1], [15, 2], [15, 3], [15, 4], [15, 5], [15, 6], [15, 7], [15, 8], [15, 9], [15, 10], [15, 11], [15, 12], [15, 13], [15, 14], [15, 15], [15, 16], [15, 17], [15, 18], [15, 19], [16, 0], [16, 1], [16, 2], [16, 3], [16, 4], [16, 5], [16, 6], [16, 7], [16, 8], [16, 9], [16, 10], [16, 11], [16, 12], [16, 13], [16, 14], [16, 15], [16, 16], [16, 17], [16, 18], [16, 19], [17, 0], [17, 1], [17, 2], [17, 3], [17, 4], [17, 5], [17, 6], [17, 7], [17, 8], [17, 9], [17, 10], [17, 11], [17, 12], [17, 13], [17, 14], [17, 15], [17, 16], [17, 17], [17, 18], [17, 19], [18, 0], [18, 1], [18, 2], [18, 3], [18, 4], [18, 5], [18, 6], [18, 7], [18, 8], [18, 9], [18, 10], [18, 11], [18, 12], [18, 13], [18, 14], [18, 15], [18, 16], [18, 17], [18, 18], [18, 19], [19, 0], [19, 1], [19, 2], [19, 3], [19, 4], [19, 5], [19, 6], [19, 7], [19, 8], [19, 9], [19, 10], [19, 11], [19, 12], [19, 13], [19, 14], [19, 15], [19, 16], [19, 17], [19, 18], [19, 19]]
    },
    {
        ""input"": [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], 
        ""output"": [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 15], [0, 16], [0, 17], [0, 18], [0, 19], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [1, 10], [1, 11], [1, 12], [1, 13], [1, 14], [1, 15], [1, 16], [1, 17], [1, 18], [1, 19], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [2, 10], [2, 11], [2, 12], [2, 13], [2, 14], [2, 15], [2, 16], [2, 17], [2, 18], [2, 19], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [3, 10], [3, 11], [3, 12], [3, 13], [3, 14], [3, 15], [3, 16], [3, 17], [3, 18], [3, 19], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [4, 10], [4, 11], [4, 12], [4, 13], [4, 14], [4, 15], [4, 16], [4, 17], [4, 18], [4, 19], [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [5, 9], [5, 10], [5, 11], [5, 12], [5, 13], [5, 14], [5, 15], [5, 16], [5, 17], [5, 18], [5, 19], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [6, 10], [6, 11], [6, 12], [6, 13], [6, 14], [6, 15], [6, 16], [6, 17], [6, 18], [6, 19], [7, 0], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [7, 9], [7, 10], [7, 11], [7, 12], [7, 13], [7, 14], [7, 15], [7, 16], [7, 17], [7, 18], [7, 19], [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [8, 10], [8, 11], [8, 12], [8, 13], [8, 14], [8, 15], [8, 16], [8, 17], [8, 18], [8, 19], [9, 0], [9, 1], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8], [9, 9], [9, 10], [9, 11], [9, 12], [9, 13], [9, 14], [9, 15], [9, 16], [9, 17], [9, 18], [9, 19], [10, 0], [10, 1], [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [10, 10], [10, 11], [10, 12], [10, 13], [10, 14], [10, 15], [10, 16], [10, 17], [10, 18], [10, 19], [11, 0], [11, 1], [11, 2], [11, 3], [11, 4], [11, 5], [11, 6], [11, 7], [11, 8], [11, 9], [11, 10], [11, 11], [11, 12], [11, 13], [11, 14], [11, 15], [11, 16], [11, 17], [11, 18], [11, 19], [12, 0], [12, 1], [12, 2], [12, 3], [12, 4], [12, 5], [12, 6], [12, 7], [12, 8], [12, 9], [12, 10], [12, 11], [12, 12], [12, 13], [12, 14], [12, 15], [12, 16], [12, 17], [12, 18], [12, 19], [13, 0], [13, 1], [13, 2], [13, 3], [13, 4], [13, 5], [13, 6], [13, 7], [13, 8], [13, 9], [13, 10], [13, 11], [13, 12], [13, 13], [13, 14], [13, 15], [13, 16], [13, 17], [13, 18], [13, 19], [14, 0], [14, 1], [14, 2], [14, 3], [14, 4], [14, 5], [14, 6], [14, 7], [14, 8], [14, 9], [14, 10], [14, 11], [14, 12], [14, 13], [14, 14], [14, 15], [14, 16], [14, 17], [14, 18], [14, 19], [15, 0], [15, 1], [15, 2], [15, 3], [15, 4], [15, 5], [15, 6], [15, 7], [15, 8], [15, 9], [15, 10], [15, 11], [15, 12], [15, 13], [15, 14], [15, 15], [15, 16], [15, 17], [15, 18], [15, 19], [16, 0], [16, 1], [16, 2], [16, 3], [16, 4], [16, 5], [16, 6], [16, 7], [16, 8], [16, 9], [16, 10], [16, 11], [16, 12], [16, 13], [16, 14], [16, 15], [16, 16], [16, 17], [16, 18], [16, 19], [17, 0], [17, 1], [17, 2], [17, 3], [17, 4], [17, 5], [17, 6], [17, 7], [17, 8], [17, 9], [17, 10], [17, 11], [17, 12], [17, 13], [17, 14], [17, 15], [17, 16], [17, 17], [17, 18], [17, 19], [18, 0], [18, 1], [18, 2], [18, 3], [18, 4], [18, 5], [18, 6], [18, 7], [18, 8], [18, 9], [18, 10], [18, 11], [18, 12], [18, 13], [18, 14], [18, 15], [18, 16], [18, 17], [18, 18], [18, 19], [19, 0], [19, 1], [19, 2], [19, 3], [19, 4], [19, 5], [19, 6], [19, 7], [19, 8], [19, 9], [19, 10], [19, 11], [19, 12], [19, 13], [19, 14], [19, 15], [19, 16], [19, 17], [19, 18], [19, 19]]
    },
    {
        ""input"": [
         [3,3,3,3,3,3,3,3,3,3],
         [3,3,3,3,3,3,3,3,3,3],
         [3,3,3,3,3,3,3,3,3,3],
         [3,3,3,3,3,3,3,3,3,3],
         [3,3,3,3,3,3,3,3,3,3],
         [3,3,3,3,3,3,3,3,3,3],
         [3,3,3,3,3,3,3,3,3,3],
         [3,3,3,3,3,3,3,3,3,3],
         [3,3,3,3,3,3,3,3,3,3],
         [3,3,3,3,3,3,3,3,3,3]], 
        ""output"": [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [5, 9], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [7, 0], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [7, 9], [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [9, 0], [9, 1], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8], [9, 9]]
    },
    {
        ""input"": [
         [1,2,2,3,5,6,7,8,9,10],
         [3,2,3,4,4,6,7,8,9,10],
         [2,4,5,3,1,6,7,8,9,10],
         [6,7,1,4,5,6,7,8,9,10],
         [5,1,1,2,4,6,7,8,9,10],
         [5,1,1,2,4,6,7,8,9,10]],
         ""output"": [[0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [2, 2], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [3, 0], [3, 1], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 0], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [5, 0], [5, 5], [5, 6], [5, 7], [5, 8], [5, 9]]
    },
    {
        ""input"": [
         [1,2,2,3,5,6,7,8,9,10],
         [3,2,3,4,4,6,7,8,9,10],
         [2,4,5,5,5,5,5,5,5, 5],
         [6,7,1,4,2,2,2,2,9,10],
         [5,1,1,45,4,6,7,8,9,10],
         [5,1,1,2,4,6,7,8,9,10]],
         ""output"": [[0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [3, 0], [3, 1], [3, 8], [3, 9], [4, 0], [4, 8], [4, 9], [5, 0], [5, 8], [5, 9]]
    }
]

obj = Solution()
for param in params:
    result = obj.pacificAtlantic(param[""input""])
    expected_output = param[""output""]
    if result == expected_output:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input: {param['input']} Expected output: {expected_output} but got {result}"")","let params = [    
    {  
        ""input"": [[1]], 
        ""output"": [[0,0]]
    },
    {
        ""input"": [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]], 
        ""output"": [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]
    },
    {
        ""input"": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 
        ""output"": [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 15], [0, 16], [0, 17], [0, 18], [0, 19], [0, 20], [0, 21], [0, 22], [0, 23], [0, 24], [0, 25], [0, 26], [0, 27], [0, 28], [0, 29], [0, 30], [0, 31], [0, 32], [0, 33], [0, 34], [0, 35], [0, 36], [0, 37], [0, 38], [0, 39], [0, 40], [0, 41], [0, 42], [0, 43], [0, 44], [0, 45], [0, 46], [0, 47], [0, 48], [0, 49], [0, 50], [0, 51], [0, 52], [0, 53], [0, 54], [0, 55], [0, 56], [0, 57], [0, 58], [0, 59], [0, 60], [0, 61], [0, 62], [0, 63], [0, 64], [0, 65], [0, 66], [0, 67], [0, 68], [0, 69], [0, 70], [0, 71], [0, 72], [0, 73], [0, 74], [0, 75], [0, 76], [0, 77], [0, 78], [0, 79], [0, 80], [0, 81], [0, 82], [0, 83], [0, 84], [0, 85], [0, 86], [0, 87], [0, 88], [0, 89], [0, 90], [0, 91], [0, 92], [0, 93], [0, 94], [0, 95], [0, 96], [0, 97], [0, 98], [0, 99], [0, 100], [0, 101], [0, 102], [0, 103], [0, 104], [0, 105], [0, 106], [0, 107], [0, 108], [0, 109], [0, 110], [0, 111], [0, 112], [0, 113], [0, 114], [0, 115], [0, 116], [0, 117], [0, 118], [0, 119], [0, 120], [0, 121], [0, 122], [0, 123], [0, 124], [0, 125], [0, 126], [0, 127], [0, 128], [0, 129], [0, 130], [0, 131], [0, 132], [0, 133], [0, 134], [0, 135], [0, 136], [0, 137], [0, 138], [0, 139], [0, 140], [0, 141], [0, 142], [0, 143], [0, 144], [0, 145], [0, 146], [0, 147], [0, 148], [0, 149], [0, 150], [0, 151], [0, 152], [0, 153], [0, 154], [0, 155], [0, 156], [0, 157], [0, 158], [0, 159], [0, 160], [0, 161], [0, 162], [0, 163], [0, 164], [0, 165], [0, 166], [0, 167], [0, 168], [0, 169], [0, 170], [0, 171], [0, 172], [0, 173], [0, 174], [0, 175], [0, 176], [0, 177], [0, 178], [0, 179], [0, 180], [0, 181], [0, 182], [0, 183], [0, 184], [0, 185], [0, 186], [0, 187], [0, 188], [0, 189], [0, 190], [0, 191], [0, 192], [0, 193], [0, 194], [0, 195], [0, 196], [0, 197], [0, 198], [0, 199], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [1, 10], [1, 11], [1, 12], [1, 13], [1, 14], [1, 15], [1, 16], [1, 17], [1, 18], [1, 19], [1, 20], [1, 21], [1, 22], [1, 23], [1, 24], [1, 25], [1, 26], [1, 27], [1, 28], [1, 29], [1, 30], [1, 31], [1, 32], [1, 33], [1, 34], [1, 35], [1, 36], [1, 37], [1, 38], [1, 39], [1, 40], [1, 41], [1, 42], [1, 43], [1, 44], [1, 45], [1, 46], [1, 47], [1, 48], [1, 49], [1, 50], [1, 51], [1, 52], [1, 53], [1, 54], [1, 55], [1, 56], [1, 57], [1, 58], [1, 59], [1, 60], [1, 61], [1, 62], [1, 63], [1, 64], [1, 65], [1, 66], [1, 67], [1, 68], [1, 69], [1, 70], [1, 71], [1, 72], [1, 73], [1, 74], [1, 75], [1, 76], [1, 77], [1, 78], [1, 79], [1, 80], [1, 81], [1, 82], [1, 83], [1, 84], [1, 85], [1, 86], [1, 87], [1, 88], [1, 89], [1, 90], [1, 91], [1, 92], [1, 93], [1, 94], [1, 95], [1, 96], [1, 97], [1, 98], [1, 99], [1, 100], [1, 101], [1, 102], [1, 103], [1, 104], [1, 105], [1, 106], [1, 107], [1, 108], [1, 109], [1, 110], [1, 111], [1, 112], [1, 113], [1, 114], [1, 115], [1, 116], [1, 117], [1, 118], [1, 119], [1, 120], [1, 121], [1, 122], [1, 123], [1, 124], [1, 125], [1, 126], [1, 127], [1, 128], [1, 129], [1, 130], [1, 131], [1, 132], [1, 133], [1, 134], [1, 135], [1, 136], [1, 137], [1, 138], [1, 139], [1, 140], [1, 141], [1, 142], [1, 143], [1, 144], [1, 145], [1, 146], [1, 147], [1, 148], [1, 149], [1, 150], [1, 151], [1, 152], [1, 153], [1, 154], [1, 155], [1, 156], [1, 157], [1, 158], [1, 159], [1, 160], [1, 161], [1, 162], [1, 163], [1, 164], [1, 165], [1, 166], [1, 167], [1, 168], [1, 169], [1, 170], [1, 171], [1, 172], [1, 173], [1, 174], [1, 175], [1, 176], [1, 177], [1, 178], [1, 179], [1, 180], [1, 181], [1, 182], [1, 183], [1, 184], [1, 185], [1, 186], [1, 187], [1, 188], [1, 189], [1, 190], [1, 191], [1, 192], [1, 193], [1, 194], [1, 195], [1, 196], [1, 197], [1, 198], [1, 199], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [2, 10], [2, 11], [2, 12], [2, 13], [2, 14], [2, 15], [2, 16], [2, 17], [2, 18], [2, 19], [2, 20], [2, 21], [2, 22], [2, 23], [2, 24], [2, 25], [2, 26], [2, 27], [2, 28], [2, 29], [2, 30], [2, 31], [2, 32], [2, 33], [2, 34], [2, 35], [2, 36], [2, 37], [2, 38], [2, 39], [2, 40], [2, 41], [2, 42], [2, 43], [2, 44], [2, 45], [2, 46], [2, 47], [2, 48], [2, 49], [2, 50], [2, 51], [2, 52], [2, 53], [2, 54], [2, 55], [2, 56], [2, 57], [2, 58], [2, 59], [2, 60], [2, 61], [2, 62], [2, 63], [2, 64], [2, 65], [2, 66], [2, 67], [2, 68], [2, 69], [2, 70], [2, 71], [2, 72], [2, 73], [2, 74], [2, 75], [2, 76], [2, 77], [2, 78], [2, 79], [2, 80], [2, 81], [2, 82], [2, 83], [2, 84], [2, 85], [2, 86], [2, 87], [2, 88], [2, 89], [2, 90], [2, 91], [2, 92], [2, 93], [2, 94], [2, 95], [2, 96], [2, 97], [2, 98], [2, 99], [2, 100], [2, 101], [2, 102], [2, 103], [2, 104], [2, 105], [2, 106], [2, 107], [2, 108], [2, 109], [2, 110], [2, 111], [2, 112], [2, 113], [2, 114], [2, 115], [2, 116], [2, 117], [2, 118], [2, 119], [2, 120], [2, 121], [2, 122], [2, 123], [2, 124], [2, 125], [2, 126], [2, 127], [2, 128], [2, 129], [2, 130], [2, 131], [2, 132], [2, 133], [2, 134], [2, 135], [2, 136], [2, 137], [2, 138], [2, 139], [2, 140], [2, 141], [2, 142], [2, 143], [2, 144], [2, 145], [2, 146], [2, 147], [2, 148], [2, 149], [2, 150], [2, 151], [2, 152], [2, 153], [2, 154], [2, 155], [2, 156], [2, 157], [2, 158], [2, 159], [2, 160], [2, 161], [2, 162], [2, 163], [2, 164], [2, 165], [2, 166], [2, 167], [2, 168], [2, 169], [2, 170], [2, 171], [2, 172], [2, 173], [2, 174], [2, 175], [2, 176], [2, 177], [2, 178], [2, 179], [2, 180], [2, 181], [2, 182], [2, 183], [2, 184], [2, 185], [2, 186], [2, 187], [2, 188], [2, 189], [2, 190], [2, 191], [2, 192], [2, 193], [2, 194], [2, 195], [2, 196], [2, 197], [2, 198], [2, 199]]
    },
    {
        ""input"": [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]], 
        ""output"": [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 15], [0, 16], [0, 17], [0, 18], [0, 19], [0, 20], [0, 21], [0, 22], [0, 23], [0, 24], [0, 25], [0, 26], [0, 27], [0, 28], [0, 29], [0, 30], [0, 31], [0, 32], [0, 33], [0, 34], [0, 35], [0, 36], [0, 37], [0, 38], [0, 39], [0, 40], [0, 41], [0, 42], [0, 43], [0, 44], [0, 45], [0, 46], [0, 47], [0, 48], [0, 49], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [1, 10], [1, 11], [1, 12], [1, 13], [1, 14], [1, 15], [1, 16], [1, 17], [1, 18], [1, 19], [1, 20], [1, 21], [1, 22], [1, 23], [1, 24], [1, 25], [1, 26], [1, 27], [1, 28], [1, 29], [1, 30], [1, 31], [1, 32], [1, 33], [1, 34], [1, 35], [1, 36], [1, 37], [1, 38], [1, 39], [1, 40], [1, 41], [1, 42], [1, 43], [1, 44], [1, 45], [1, 46], [1, 47], [1, 48], [1, 49], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [2, 10], [2, 11], [2, 12], [2, 13], [2, 14], [2, 15], [2, 16], [2, 17], [2, 18], [2, 19], [2, 20], [2, 21], [2, 22], [2, 23], [2, 24], [2, 25], [2, 26], [2, 27], [2, 28], [2, 29], [2, 30], [2, 31], [2, 32], [2, 33], [2, 34], [2, 35], [2, 36], [2, 37], [2, 38], [2, 39], [2, 40], [2, 41], [2, 42], [2, 43], [2, 44], [2, 45], [2, 46], [2, 47], [2, 48], [2, 49], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [3, 10], [3, 11], [3, 12], [3, 13], [3, 14], [3, 15], [3, 16], [3, 17], [3, 18], [3, 19], [3, 20], [3, 21], [3, 22], [3, 23], [3, 24], [3, 25], [3, 26], [3, 27], [3, 28], [3, 29], [3, 30], [3, 31], [3, 32], [3, 33], [3, 34], [3, 35], [3, 36], [3, 37], [3, 38], [3, 39], [3, 40], [3, 41], [3, 42], [3, 43], [3, 44], [3, 45], [3, 46], [3, 47], [3, 48], [3, 49], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [4, 10], [4, 11], [4, 12], [4, 13], [4, 14], [4, 15], [4, 16], [4, 17], [4, 18], [4, 19], [4, 20], [4, 21], [4, 22], [4, 23], [4, 24], [4, 25], [4, 26], [4, 27], [4, 28], [4, 29], [4, 30], [4, 31], [4, 32], [4, 33], [4, 34], [4, 35], [4, 36], [4, 37], [4, 38], [4, 39], [4, 40], [4, 41], [4, 42], [4, 43], [4, 44], [4, 45], [4, 46], [4, 47], [4, 48], [4, 49], [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [5, 9], [5, 10], [5, 11], [5, 12], [5, 13], [5, 14], [5, 15], [5, 16], [5, 17], [5, 18], [5, 19], [5, 20], [5, 21], [5, 22], [5, 23], [5, 24], [5, 25], [5, 26], [5, 27], [5, 28], [5, 29], [5, 30], [5, 31], [5, 32], [5, 33], [5, 34], [5, 35], [5, 36], [5, 37], [5, 38], [5, 39], [5, 40], [5, 41], [5, 42], [5, 43], [5, 44], [5, 45], [5, 46], [5, 47], [5, 48], [5, 49], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [6, 10], [6, 11], [6, 12], [6, 13], [6, 14], [6, 15], [6, 16], [6, 17], [6, 18], [6, 19], [6, 20], [6, 21], [6, 22], [6, 23], [6, 24], [6, 25], [6, 26], [6, 27], [6, 28], [6, 29], [6, 30], [6, 31], [6, 32], [6, 33], [6, 34], [6, 35], [6, 36], [6, 37], [6, 38], [6, 39], [6, 40], [6, 41], [6, 42], [6, 43], [6, 44], [6, 45], [6, 46], [6, 47], [6, 48], [6, 49], [7, 0], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [7, 9], [7, 10], [7, 11], [7, 12], [7, 13], [7, 14], [7, 15], [7, 16], [7, 17], [7, 18], [7, 19], [7, 20], [7, 21], [7, 22], [7, 23], [7, 24], [7, 25], [7, 26], [7, 27], [7, 28], [7, 29], [7, 30], [7, 31], [7, 32], [7, 33], [7, 34], [7, 35], [7, 36], [7, 37], [7, 38], [7, 39], [7, 40], [7, 41], [7, 42], [7, 43], [7, 44], [7, 45], [7, 46], [7, 47], [7, 48], [7, 49], [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [8, 10], [8, 11], [8, 12], [8, 13], [8, 14], [8, 15], [8, 16], [8, 17], [8, 18], [8, 19], [8, 20], [8, 21], [8, 22], [8, 23], [8, 24], [8, 25], [8, 26], [8, 27], [8, 28], [8, 29], [8, 30], [8, 31], [8, 32], [8, 33], [8, 34], [8, 35], [8, 36], [8, 37], [8, 38], [8, 39], [8, 40], [8, 41], [8, 42], [8, 43], [8, 44], [8, 45], [8, 46], [8, 47], [8, 48], [8, 49], [9, 0], [9, 1], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8], [9, 9], [9, 10], [9, 11], [9, 12], [9, 13], [9, 14], [9, 15], [9, 16], [9, 17], [9, 18], [9, 19], [9, 20], [9, 21], [9, 22], [9, 23], [9, 24], [9, 25], [9, 26], [9, 27], [9, 28], [9, 29], [9, 30], [9, 31], [9, 32], [9, 33], [9, 34], [9, 35], [9, 36], [9, 37], [9, 38], [9, 39], [9, 40], [9, 41], [9, 42], [9, 43], [9, 44], [9, 45], [9, 46], [9, 47], [9, 48], [9, 49], [10, 0], [10, 1], [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [10, 10], [10, 11], [10, 12], [10, 13], [10, 14], [10, 15], [10, 16], [10, 17], [10, 18], [10, 19], [10, 20], [10, 21], [10, 22], [10, 23], [10, 24], [10, 25], [10, 26], [10, 27], [10, 28], [10, 29], [10, 30], [10, 31], [10, 32], [10, 33], [10, 34], [10, 35], [10, 36], [10, 37], [10, 38], [10, 39], [10, 40], [10, 41], [10, 42], [10, 43], [10, 44], [10, 45], [10, 46], [10, 47], [10, 48], [10, 49], [11, 0], [11, 1], [11, 2], [11, 3], [11, 4], [11, 5], [11, 6], [11, 7], [11, 8], [11, 9], [11, 10], [11, 11], [11, 12], [11, 13], [11, 14], [11, 15], [11, 16], [11, 17], [11, 18], [11, 19], [11, 20], [11, 21], [11, 22], [11, 23], [11, 24], [11, 25], [11, 26], [11, 27], [11, 28], [11, 29], [11, 30], [11, 31], [11, 32], [11, 33], [11, 34], [11, 35], [11, 36], [11, 37], [11, 38], [11, 39], [11, 40], [11, 41], [11, 42], [11, 43], [11, 44], [11, 45], [11, 46], [11, 47], [11, 48], [11, 49], [12, 0], [12, 1], [12, 2], [12, 3], [12, 4], [12, 5], [12, 6], [12, 7], [12, 8], [12, 9], [12, 10], [12, 11], [12, 12], [12, 13], [12, 14], [12, 15], [12, 16], [12, 17], [12, 18], [12, 19], [12, 20], [12, 21], [12, 22], [12, 23], [12, 24], [12, 25], [12, 26], [12, 27], [12, 28], [12, 29], [12, 30], [12, 31], [12, 32], [12, 33], [12, 34], [12, 35], [12, 36], [12, 37], [12, 38], [12, 39], [12, 40], [12, 41], [12, 42], [12, 43], [12, 44], [12, 45], [12, 46], [12, 47], [12, 48], [12, 49]]
    },
    {
        ""input"": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11], [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12], [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13], [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14], [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15], [16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16], [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17], [18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18], [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]], 
        ""output"": [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 15], [0, 16], [0, 17], [0, 18], [0, 19], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [1, 10], [1, 11], [1, 12], [1, 13], [1, 14], [1, 15], [1, 16], [1, 17], [1, 18], [1, 19], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [2, 10], [2, 11], [2, 12], [2, 13], [2, 14], [2, 15], [2, 16], [2, 17], [2, 18], [2, 19], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [3, 10], [3, 11], [3, 12], [3, 13], [3, 14], [3, 15], [3, 16], [3, 17], [3, 18], [3, 19], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [4, 10], [4, 11], [4, 12], [4, 13], [4, 14], [4, 15], [4, 16], [4, 17], [4, 18], [4, 19], [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [5, 9], [5, 10], [5, 11], [5, 12], [5, 13], [5, 14], [5, 15], [5, 16], [5, 17], [5, 18], [5, 19], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [6, 10], [6, 11], [6, 12], [6, 13], [6, 14], [6, 15], [6, 16], [6, 17], [6, 18], [6, 19], [7, 0], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [7, 9], [7, 10], [7, 11], [7, 12], [7, 13], [7, 14], [7, 15], [7, 16], [7, 17], [7, 18], [7, 19], [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [8, 10], [8, 11], [8, 12], [8, 13], [8, 14], [8, 15], [8, 16], [8, 17], [8, 18], [8, 19], [9, 0], [9, 1], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8], [9, 9], [9, 10], [9, 11], [9, 12], [9, 13], [9, 14], [9, 15], [9, 16], [9, 17], [9, 18], [9, 19], [10, 0], [10, 1], [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [10, 10], [10, 11], [10, 12], [10, 13], [10, 14], [10, 15], [10, 16], [10, 17], [10, 18], [10, 19], [11, 0], [11, 1], [11, 2], [11, 3], [11, 4], [11, 5], [11, 6], [11, 7], [11, 8], [11, 9], [11, 10], [11, 11], [11, 12], [11, 13], [11, 14], [11, 15], [11, 16], [11, 17], [11, 18], [11, 19], [12, 0], [12, 1], [12, 2], [12, 3], [12, 4], [12, 5], [12, 6], [12, 7], [12, 8], [12, 9], [12, 10], [12, 11], [12, 12], [12, 13], [12, 14], [12, 15], [12, 16], [12, 17], [12, 18], [12, 19], [13, 0], [13, 1], [13, 2], [13, 3], [13, 4], [13, 5], [13, 6], [13, 7], [13, 8], [13, 9], [13, 10], [13, 11], [13, 12], [13, 13], [13, 14], [13, 15], [13, 16], [13, 17], [13, 18], [13, 19], [14, 0], [14, 1], [14, 2], [14, 3], [14, 4], [14, 5], [14, 6], [14, 7], [14, 8], [14, 9], [14, 10], [14, 11], [14, 12], [14, 13], [14, 14], [14, 15], [14, 16], [14, 17], [14, 18], [14, 19], [15, 0], [15, 1], [15, 2], [15, 3], [15, 4], [15, 5], [15, 6], [15, 7], [15, 8], [15, 9], [15, 10], [15, 11], [15, 12], [15, 13], [15, 14], [15, 15], [15, 16], [15, 17], [15, 18], [15, 19], [16, 0], [16, 1], [16, 2], [16, 3], [16, 4], [16, 5], [16, 6], [16, 7], [16, 8], [16, 9], [16, 10], [16, 11], [16, 12], [16, 13], [16, 14], [16, 15], [16, 16], [16, 17], [16, 18], [16, 19], [17, 0], [17, 1], [17, 2], [17, 3], [17, 4], [17, 5], [17, 6], [17, 7], [17, 8], [17, 9], [17, 10], [17, 11], [17, 12], [17, 13], [17, 14], [17, 15], [17, 16], [17, 17], [17, 18], [17, 19], [18, 0], [18, 1], [18, 2], [18, 3], [18, 4], [18, 5], [18, 6], [18, 7], [18, 8], [18, 9], [18, 10], [18, 11], [18, 12], [18, 13], [18, 14], [18, 15], [18, 16], [18, 17], [18, 18], [18, 19], [19, 0], [19, 1], [19, 2], [19, 3], [19, 4], [19, 5], [19, 6], [19, 7], [19, 8], [19, 9], [19, 10], [19, 11], [19, 12], [19, 13], [19, 14], [19, 15], [19, 16], [19, 17], [19, 18], [19, 19]]
    },
    {
        ""input"": [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], 
        ""output"": [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 15], [0, 16], [0, 17], [0, 18], [0, 19], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [1, 10], [1, 11], [1, 12], [1, 13], [1, 14], [1, 15], [1, 16], [1, 17], [1, 18], [1, 19], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [2, 10], [2, 11], [2, 12], [2, 13], [2, 14], [2, 15], [2, 16], [2, 17], [2, 18], [2, 19], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [3, 10], [3, 11], [3, 12], [3, 13], [3, 14], [3, 15], [3, 16], [3, 17], [3, 18], [3, 19], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [4, 10], [4, 11], [4, 12], [4, 13], [4, 14], [4, 15], [4, 16], [4, 17], [4, 18], [4, 19], [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [5, 9], [5, 10], [5, 11], [5, 12], [5, 13], [5, 14], [5, 15], [5, 16], [5, 17], [5, 18], [5, 19], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [6, 10], [6, 11], [6, 12], [6, 13], [6, 14], [6, 15], [6, 16], [6, 17], [6, 18], [6, 19], [7, 0], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [7, 9], [7, 10], [7, 11], [7, 12], [7, 13], [7, 14], [7, 15], [7, 16], [7, 17], [7, 18], [7, 19], [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [8, 10], [8, 11], [8, 12], [8, 13], [8, 14], [8, 15], [8, 16], [8, 17], [8, 18], [8, 19], [9, 0], [9, 1], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8], [9, 9], [9, 10], [9, 11], [9, 12], [9, 13], [9, 14], [9, 15], [9, 16], [9, 17], [9, 18], [9, 19], [10, 0], [10, 1], [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [10, 10], [10, 11], [10, 12], [10, 13], [10, 14], [10, 15], [10, 16], [10, 17], [10, 18], [10, 19], [11, 0], [11, 1], [11, 2], [11, 3], [11, 4], [11, 5], [11, 6], [11, 7], [11, 8], [11, 9], [11, 10], [11, 11], [11, 12], [11, 13], [11, 14], [11, 15], [11, 16], [11, 17], [11, 18], [11, 19], [12, 0], [12, 1], [12, 2], [12, 3], [12, 4], [12, 5], [12, 6], [12, 7], [12, 8], [12, 9], [12, 10], [12, 11], [12, 12], [12, 13], [12, 14], [12, 15], [12, 16], [12, 17], [12, 18], [12, 19], [13, 0], [13, 1], [13, 2], [13, 3], [13, 4], [13, 5], [13, 6], [13, 7], [13, 8], [13, 9], [13, 10], [13, 11], [13, 12], [13, 13], [13, 14], [13, 15], [13, 16], [13, 17], [13, 18], [13, 19], [14, 0], [14, 1], [14, 2], [14, 3], [14, 4], [14, 5], [14, 6], [14, 7], [14, 8], [14, 9], [14, 10], [14, 11], [14, 12], [14, 13], [14, 14], [14, 15], [14, 16], [14, 17], [14, 18], [14, 19], [15, 0], [15, 1], [15, 2], [15, 3], [15, 4], [15, 5], [15, 6], [15, 7], [15, 8], [15, 9], [15, 10], [15, 11], [15, 12], [15, 13], [15, 14], [15, 15], [15, 16], [15, 17], [15, 18], [15, 19], [16, 0], [16, 1], [16, 2], [16, 3], [16, 4], [16, 5], [16, 6], [16, 7], [16, 8], [16, 9], [16, 10], [16, 11], [16, 12], [16, 13], [16, 14], [16, 15], [16, 16], [16, 17], [16, 18], [16, 19], [17, 0], [17, 1], [17, 2], [17, 3], [17, 4], [17, 5], [17, 6], [17, 7], [17, 8], [17, 9], [17, 10], [17, 11], [17, 12], [17, 13], [17, 14], [17, 15], [17, 16], [17, 17], [17, 18], [17, 19], [18, 0], [18, 1], [18, 2], [18, 3], [18, 4], [18, 5], [18, 6], [18, 7], [18, 8], [18, 9], [18, 10], [18, 11], [18, 12], [18, 13], [18, 14], [18, 15], [18, 16], [18, 17], [18, 18], [18, 19], [19, 0], [19, 1], [19, 2], [19, 3], [19, 4], [19, 5], [19, 6], [19, 7], [19, 8], [19, 9], [19, 10], [19, 11], [19, 12], [19, 13], [19, 14], [19, 15], [19, 16], [19, 17], [19, 18], [19, 19]]
    },
    {
        ""input"": [
         [3,3,3,3,3,3,3,3,3,3],
         [3,3,3,3,3,3,3,3,3,3],
         [3,3,3,3,3,3,3,3,3,3],
         [3,3,3,3,3,3,3,3,3,3],
         [3,3,3,3,3,3,3,3,3,3],
         [3,3,3,3,3,3,3,3,3,3],
         [3,3,3,3,3,3,3,3,3,3],
         [3,3,3,3,3,3,3,3,3,3],
         [3,3,3,3,3,3,3,3,3,3],
         [3,3,3,3,3,3,3,3,3,3]], 
        ""output"": [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [5, 9], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [7, 0], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [7, 9], [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [9, 0], [9, 1], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8], [9, 9]]
    },
    {
        ""input"": [
         [1,2,2,3,5,6,7,8,9,10],
         [3,2,3,4,4,6,7,8,9,10],
         [2,4,5,3,1,6,7,8,9,10],
         [6,7,1,4,5,6,7,8,9,10],
         [5,1,1,2,4,6,7,8,9,10],
         [5,1,1,2,4,6,7,8,9,10]],
         ""output"": [[0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [2, 2], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [3, 0], [3, 1], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 0], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [5, 0], [5, 5], [5, 6], [5, 7], [5, 8], [5, 9]]
    },
    {
        ""input"": [
         [1,2,2,3,5,6,7,8,9,10],
         [3,2,3,4,4,6,7,8,9,10],
         [2,4,5,5,5,5,5,5,5, 5],
         [6,7,1,4,2,2,2,2,9,10],
         [5,1,1,45,4,6,7,8,9,10],
         [5,1,1,2,4,6,7,8,9,10]],
         ""output"": [[0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [3, 0], [3, 1], [3, 8], [3, 9], [4, 0], [4, 8], [4, 9], [5, 0], [5, 8], [5, 9]]
    }
]

for (let param of params) {
  let result = pacificAtlantic(param[""input""]);
  let expected_output = param[""output""];
  if (result.toString() === expected_output.toString()) {
    console.log(""\u2705 Test passed."");
  } else {
    console.log(`\u274C Test failed. Input: ${JSON.stringify(param['input'])} Expected output: ${JSON.stringify(expected_output)} but got ${JSON.stringify(result)}`);
  }
}",,
63b59a938ad4593d6b7b023d,surrounded-regions,"params = [    
    {        
        ""input"": [[""X"",""X"",""X"",""X""],[""X"",""O"",""O"",""X""],[""X"",""X"",""O"",""X""],[""X"",""O"",""X"",""X""]],
        ""output"": [[""X"",""X"",""X"",""X""],[""X"",""X"",""X"",""X""],[""X"",""X"",""X"",""X""],[""X"",""O"",""X"",""X""]]
    },
    {
        ""input"": [[""X""]],
        ""output"": [[""X""]]
    },
    {
        ""input"": [[""O"", ""X"", ""O""], [""X"", ""O"", ""X""], [""O"", ""X"", ""O""]],
        ""output"": [[""O"", ""X"", ""O""], [""X"", ""X"", ""X""], [""O"", ""X"", ""O""]]
    },
    {
        ""input"": [[""X"", ""X"", ""X"", ""X""], [""X"", ""O"", ""O"", ""X""], [""X"", ""X"", ""O"", ""X""]],
        ""output"": [['X', 'X', 'X', 'X'], ['X', 'O', 'O', 'X'], ['X', 'X', 'O', 'X']]
    },
    {
        ""input"": [[""X"", ""O"", ""X"", ""X""], [""O"", ""O"", ""O"", ""X""], [""X"", ""O"", ""X"", ""X""]],
        ""output"": [[""X"", ""O"", ""X"", ""X""], [""O"", ""O"", ""O"", ""X""], [""X"", ""O"", ""X"", ""X""]]
    },
    {
        ""input"": [[""O"", ""X""], [""X"", ""O""]],
        ""output"": [[""O"", ""X""], [""X"", ""O""]]
    },
    {
        ""input"": [[""X"", ""O""], [""O"", ""X""]],
        ""output"": [['X', 'O'], ['O', 'X']]
    },
    {
        ""input"": [[""O"", ""O"", ""O""], [""O"", ""O"", ""O""], [""O"", ""O"", ""O""]],
        ""output"": [[""O"", ""O"", ""O""], [""O"", ""O"", ""O""], [""O"", ""O"", ""O""]]
    },
    {
        ""input"": [[""X"", ""X"", ""X""], [""X"", ""O"", ""X""], [""X"", ""X"", ""X""]],
        ""output"": [[""X"", ""X"", ""X""], [""X"", ""X"", ""X""], [""X"", ""X"", ""X""]]
    },
    {
        ""input"": [[""O"", ""O""], [""O"", ""O""]],
        ""output"": [[""O"", ""O""], [""O"", ""O""]]
    },
]

obj = Solution()
for param in params:
    board = param[""input""]
    expected_output = param[""output""]
    obj.solve(board)
    if board == expected_output:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input: {param['input']} Expected output: {expected_output} but got {board}"")","let params = [    
    {        
        ""input"": [[""X"",""X"",""X"",""X""],[""X"",""O"",""O"",""X""],[""X"",""X"",""O"",""X""],[""X"",""O"",""X"",""X""]],
        ""output"": [[""X"",""X"",""X"",""X""],[""X"",""X"",""X"",""X""],[""X"",""X"",""X"",""X""],[""X"",""O"",""X"",""X""]]
    },
    {
        ""input"": [[""X""]],
        ""output"": [[""X""]]
    },
    {
        ""input"": [[""O"", ""X"", ""O""], [""X"", ""O"", ""X""], [""O"", ""X"", ""O""]],
        ""output"": [[""O"", ""X"", ""O""], [""X"", ""X"", ""X""], [""O"", ""X"", ""O""]]
    },
    {
        ""input"": [[""X"", ""X"", ""X"", ""X""], [""X"", ""O"", ""O"", ""X""], [""X"", ""X"", ""O"", ""X""]],
        ""output"": [['X', 'X', 'X', 'X'], ['X', 'O', 'O', 'X'], ['X', 'X', 'O', 'X']]
    },
    {
        ""input"": [[""X"", ""O"", ""X"", ""X""], [""O"", ""O"", ""O"", ""X""], [""X"", ""O"", ""X"", ""X""]],
        ""output"": [[""X"", ""O"", ""X"", ""X""], [""O"", ""O"", ""O"", ""X""], [""X"", ""O"", ""X"", ""X""]]
    },
    {
        ""input"": [[""O"", ""X""], [""X"", ""O""]],
        ""output"": [[""O"", ""X""], [""X"", ""O""]]
    },
    {
        ""input"": [[""X"", ""O""], [""O"", ""X""]],
        ""output"": [['X', 'O'], ['O', 'X']]
    },
    {
        ""input"": [[""O"", ""O"", ""O""], [""O"", ""O"", ""O""], [""O"", ""O"", ""O""]],
        ""output"": [[""O"", ""O"", ""O""], [""O"", ""O"", ""O""], [""O"", ""O"", ""O""]]
    },
    {
        ""input"": [[""X"", ""X"", ""X""], [""X"", ""O"", ""X""], [""X"", ""X"", ""X""]],
        ""output"": [[""X"", ""X"", ""X""], [""X"", ""X"", ""X""], [""X"", ""X"", ""X""]]
    },
    {
        ""input"": [[""O"", ""O""], [""O"", ""O""]],
        ""output"": [[""O"", ""O""], [""O"", ""O""]]
    },
]

for (let param of params) {
    let board = param.input;
    let expected_output = param.output;
    solve(board);
    if (JSON.stringify(board) === JSON.stringify(expected_output)) {
        console.log(""\u2705 Test passed."");
    } else {
        console.log(`\u274C Test failed. Input: ${JSON.stringify(param.input)} Expected output: ${JSON.stringify(expected_output)} but got ${JSON.stringify(board)}`);
    }
}    ",,
63b59a948ad4593d6b7b023e,rotting-oranges,"params = [
  {
    ""input"": [[2,1,1],[1,1,0],[0,1,1]],
    ""output"": 4
  },
  {
    ""input"": [[2,1,1],[0,1,1],[1,0,1]],
    ""output"": -1
  },
  {
    ""input"": [[0,2]],
    ""output"": 0
  },
  {
    ""input"": [[2,2,2,1,1],[1,1,1,1,1],[1,1,1,0,2]],
    ""output"": 2
  },
  {
    ""input"": [[2]],
    ""output"": 0
  },
  {
    ""input"": [[1,1,1,1,2,1,1,1,1,1,1,1,1,1,2]],
    ""output"": 5
  },
  {
    ""input"": [[1,1,1,1],[2,2,2,2],[1,1,1,1],[1,1,1,1]],
    ""output"": 2
  },
  {
    ""input"": [[1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2]],
    ""output"": 13
  },
  {
    ""input"": [[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],
    ""output"": 1
  },
  {
    ""input"": [[2,2,2,2],[2,2,2,2],[2,2,2,2],[1,1,1,1]],
    ""output"": 1
  }
]

obj = Solution()
for param in params:
    grid = param[""input""]
    expected_output = param[""output""]
    result = obj.orangesRotting(grid)
    if result == expected_output:
        print(""\u2705 Test passed."")
    else:
        print(f""\u274C Test failed. Input: {grid} Expected output: {expected_output} but got {result}"")","let params = [
    {
      ""input"": [[2,1,1],[1,1,0],[0,1,1]],
      ""output"": 4
    },
    {
      ""input"": [[2,1,1],[0,1,1],[1,0,1]],
      ""output"": -1
    },
    {
      ""input"": [[0,2]],
      ""output"": 0
    },
    {
      ""input"": [[2,2,2,1,1],[1,1,1,1,1],[1,1,1,0,2]],
      ""output"": 2
    },
    {
      ""input"": [[2]],
      ""output"": 0
    },
    {
      ""input"": [[1,1,1,1,2,1,1,1,1,1,1,1,1,1,2]],
      ""output"": 5
    },
    {
      ""input"": [[1,1,1,1],[2,2,2,2],[1,1,1,1],[1,1,1,1]],
      ""output"": 2
    },
    {
      ""input"": [[1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2]],
      ""output"": 13
    },
    {
      ""input"": [[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],
      ""output"": 1
    },
    {
      ""input"": [[2,2,2,2],[2,2,2,2],[2,2,2,2],[1,1,1,1]],
      ""output"": 1
    }
]

for (let i = 0; i < params.length; i++) {
  const {input: grid, output: expected_output} = params[i];
  const result = orangesRotting(grid);
  if (result === expected_output) {
    console.log(""\u2705 Test passed."");
  } else {
    console.log(`\u274C Test failed. Input: ${JSON.stringify(grid)} Expected output: ${expected_output} but got ${result}`);
  }
}",,
63b59a958ad4593d6b7b023f,walls-and-gates,"params = [
    {
        ""input"": [[2147483647, -1, 0, 2147483647], [2147483647, 2147483647, 2147483647, -1], [2147483647, -1, 2147483647, -1], [0, -1, 2147483647, 2147483647]],
        ""output"": [[3, -1, 0, 1], [2, 2, 1, -1], [1, -1, 2, -1], [0, -1, 3, 4]]
    },
    {
        ""input"": [[0, -1],[2147483647, 2147483647]],
        ""output"": [[0, -1], [1, 2]]
    },
    {
        ""input"": [[2147483647, 2147483647, 2147483647], [2147483647, -1, 0], [2147483647, 2147483647, 2147483647]],
        ""output"": [[3, 2, 1], [4, -1, 0], [3, 2, 1]]
    },
    {
        ""input"": [[0, 2147483647], [2147483647, -1]],
        ""output"": [[0, 1], [1, -1]]
    },
    {
        ""input"": [[0]],
        ""output"": [[0]]
    },
    {
        ""input"": [[2147483647, 0, 2147483647], [2147483647, 0, 2147483647], [2147483647, 2147483647, 2147483647]],
        ""output"": [[1, 0, 1], [1, 0, 1], [2, 1, 2]]
    },
    {
        ""input"": [[-1, 0, 2147483647, -1], [2147483647, 2147483647, -1, 2147483647], [2147483647, -1, 2147483647, -1], [-1, 2147483647, 2147483647, -1]],
        ""output"": [[-1, 0, 1, -1], [2, 1, -1, 2147483647], [3, -1, 2147483647, -1], [-1, 2147483647, 2147483647, -1]]
    },
    {
        ""input"": [[2147483647, 2147483647], [2147483647, 2147483647]],
        ""output"": [[2147483647, 2147483647], [2147483647, 2147483647]]
    },
    {
        ""input"": [[-1, 0, 2147483647, -1], [2147483647, 2147483647, -1, 2147483647], [2147483647, -1, 2147483647, -1], [-1, 2147483647, 2147483647, -1]],
        ""output"": [[-1, 0, 1, -1], [2, 1, -1, 2147483647], [3, -1, 2147483647, -1], [-1, 2147483647, 2147483647, -1]]
    },
    {
        ""input"": [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
        ""output"": [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
    },
    {
        ""input"": [[0, 2147483647, 2147483647], [2147483647, -1, 2147483647], [2147483647, 2147483647, 0]],
        ""output"": [[0, 1, 2], [1, -1, 1], [2, 1, 0]]
    },
    {
        ""input"": [[0, 2147483647, -1],[-1, -1, 2147483647],[2147483647, 2147483647, 0]],
        ""output"": [[0, 1, -1], [-1, -1, 1], [2, 1, 0]]
    }
]

obj = Solution()
for i, test in enumerate(params):
    input_data = test['input']
    expected_output = test['output']
    got_output = obj.walls_and_gates(input_data)

    if expected_output != input_data:
        print(f""\u274C Test {i} failed: input = {input_data}, expected = {expected_output}, but got {input_data}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","let params = [
    {
        ""input"": [[2147483647, -1, 0, 2147483647], [2147483647, 2147483647, 2147483647, -1], [2147483647, -1, 2147483647, -1], [0, -1, 2147483647, 2147483647]],
        ""output"": [[3, -1, 0, 1], [2, 2, 1, -1], [1, -1, 2, -1], [0, -1, 3, 4]]
    },
    {
        ""input"": [[0, -1],[2147483647, 2147483647]],
        ""output"": [[0, -1], [1, 2]]
    },
    {
        ""input"": [[2147483647, 2147483647, 2147483647], [2147483647, -1, 0], [2147483647, 2147483647, 2147483647]],
        ""output"": [[3, 2, 1], [4, -1, 0], [3, 2, 1]]
    },
    {
        ""input"": [[0, 2147483647], [2147483647, -1]],
        ""output"": [[0, 1], [1, -1]]
    },
    {
        ""input"": [[0]],
        ""output"": [[0]]
    },
    {
        ""input"": [[2147483647, 0, 2147483647], [2147483647, 0, 2147483647], [2147483647, 2147483647, 2147483647]],
        ""output"": [[1, 0, 1], [1, 0, 1], [2, 1, 2]]
    },
    {
        ""input"": [[-1, 0, 2147483647, -1], [2147483647, 2147483647, -1, 2147483647], [2147483647, -1, 2147483647, -1], [-1, 2147483647, 2147483647, -1]],
        ""output"": [[-1, 0, 1, -1], [2, 1, -1, 2147483647], [3, -1, 2147483647, -1], [-1, 2147483647, 2147483647, -1]]
    },
    {
        ""input"": [[2147483647, 2147483647], [2147483647, 2147483647]],
        ""output"": [[2147483647, 2147483647], [2147483647, 2147483647]]
    },
    {
        ""input"": [[-1, 0, 2147483647, -1], [2147483647, 2147483647, -1, 2147483647], [2147483647, -1, 2147483647, -1], [-1, 2147483647, 2147483647, -1]],
        ""output"": [[-1, 0, 1, -1], [2, 1, -1, 2147483647], [3, -1, 2147483647, -1], [-1, 2147483647, 2147483647, -1]]
    },
    {
        ""input"": [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
        ""output"": [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
    },
    {
        ""input"": [[0, 2147483647, 2147483647], [2147483647, -1, 2147483647], [2147483647, 2147483647, 0]],
        ""output"": [[0, 1, 2], [1, -1, 1], [2, 1, 0]]
    },
    {
        ""input"": [[0, 2147483647, -1],[-1, -1, 2147483647],[2147483647, 2147483647, 0]],
        ""output"": [[0, 1, -1], [-1, -1, 1], [2, 1, 0]]
    }
]

params.forEach((test, i) => {
  const input_data = test.input;
  const expected_output = test.output;
  const got_output = wallsAndGates(input_data);
  
  if (JSON.stringify(expected_output) != JSON.stringify(input_data)) {
    console.log(`\u274C Test ${i} failed: input = ${JSON.stringify(input_data)}, expected = ${JSON.stringify(expected_output)}, but got ${JSON.stringify(got_output)}`);
  } else {
    console.log(`\u2705 Test ${i} succeeded`);
  }
});",,
63b59a968ad4593d6b7b0240,course-schedule,"params = [
    {
        'numCourses': 2,
        'prerequisites': [[1, 0]],
        'expected': True
    },
    {
        'numCourses': 2,
        'prerequisites': [[1, 0], [0, 1]],
        'expected': False
    },
    {
        'numCourses': 4,
        'prerequisites': [[1, 0], [2, 1], [3, 2]],
        'expected': True
    },
    {
        'numCourses': 4,
        'prerequisites': [[1, 0], [0, 2], [2, 1]],
        'expected': False
    },
    {
        'numCourses': 1,
        'prerequisites': [],
        'expected': True
    },
    {
        'numCourses': 2,
        'prerequisites': [[0, 1]],
        'expected': True
    },
    {
        'numCourses': 3,
        'prerequisites': [[0, 1], [1, 2]],
        'expected': True
    },
    {
        'numCourses': 3,
        'prerequisites': [[0, 2], [2, 1]],
        'expected': True
    },
    {
        'numCourses': 5,
        'prerequisites': [[0, 1], [1, 2], [2, 3], [3, 4]],
        'expected': True
    },
    {
        'numCourses': 5,
        'prerequisites': [[0, 1], [1, 2], [2, 3], [3, 4], [4, 0]],
        'expected': False
    },
        {
        'numCourses': 3,
        'prerequisites': [[2, 0], [2, 1]],
        'expected': True
    },
    {
        'numCourses': 4,
        'prerequisites': [[2, 0], [1, 0], [3, 2]],
        'expected': True
    },
    {
        'numCourses': 4,
        'prerequisites': [[2, 0], [1, 0], [2, 3]],
        'expected': True
    },
    {
        'numCourses': 5,
        'prerequisites': [[4, 2], [1, 0], [2, 0], [3, 1]],
        'expected': True
    },
    {
        'numCourses': 5,
        'prerequisites': [[4, 2], [1, 0], [2, 0], [3, 1], [1, 4]],
        'expected': True
    },
    {
        'numCourses': 2,
        'prerequisites': [[0, 1], [1, 0]],
        'expected': False
    },
    {
        'numCourses': 6,
        'prerequisites': [[2, 0], [5, 4], [0, 1], [1, 3]],
        'expected': True
    },
    {
        'numCourses': 6,
        'prerequisites': [[2, 0], [5, 4], [0, 1], [1, 3], [3, 2]],
        'expected': False
    },
    {
        'numCourses': 4,
        'prerequisites': [[1, 2], [2, 3]],
        'expected': True
    },
    {
        'numCourses': 4,
        'prerequisites': [[1, 2], [2, 3], [3, 1]],
        'expected': False
    }
]

obj = Solution()
for i in range(len(params)):
    numCourses = params[i]['numCourses']
    prerequisites = params[i]['prerequisites']
    expected = params[i]['expected']
    gotOutput = obj.canFinish(numCourses, prerequisites)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: numCourses = {numCourses}, prerequisites = {prerequisites}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","let params = [
    {
        'numCourses': 2,
        'prerequisites': [[1, 0]],
        'expected': true
    },
    {
        'numCourses': 2,
        'prerequisites': [[1, 0], [0, 1]],
        'expected': false
    },
    {
        'numCourses': 4,
        'prerequisites': [[1, 0], [2, 1], [3, 2]],
        'expected': true
    },
    {
        'numCourses': 4,
        'prerequisites': [[1, 0], [0, 2], [2, 1]],
        'expected': false
    },
    {
        'numCourses': 1,
        'prerequisites': [],
        'expected': true
    },
    {
        'numCourses': 2,
        'prerequisites': [[0, 1]],
        'expected': true
    },
    {
        'numCourses': 3,
        'prerequisites': [[0, 1], [1, 2]],
        'expected': true
    },
    {
        'numCourses': 3,
        'prerequisites': [[0, 2], [2, 1]],
        'expected': true
    },
    {
        'numCourses': 5,
        'prerequisites': [[0, 1], [1, 2], [2, 3], [3, 4]],
        'expected': true
    },
    {
        'numCourses': 5,
        'prerequisites': [[0, 1], [1, 2], [2, 3], [3, 4], [4, 0]],
        'expected': false
    },
        {
        'numCourses': 3,
        'prerequisites': [[2, 0], [2, 1]],
        'expected': true
    },
    {
        'numCourses': 4,
        'prerequisites': [[2, 0], [1, 0], [3, 2]],
        'expected': true
    },
    {
        'numCourses': 4,
        'prerequisites': [[2, 0], [1, 0], [2, 3]],
        'expected': true
    },
    {
        'numCourses': 5,
        'prerequisites': [[4, 2], [1, 0], [2, 0], [3, 1]],
        'expected': true
    },
    {
        'numCourses': 5,
        'prerequisites': [[4, 2], [1, 0], [2, 0], [3, 1], [1, 4]],
        'expected': true
    },
    {
        'numCourses': 2,
        'prerequisites': [[0, 1], [1, 0]],
        'expected': false
    },
    {
        'numCourses': 6,
        'prerequisites': [[2, 0], [5, 4], [0, 1], [1, 3]],
        'expected': true
    },
    {
        'numCourses': 6,
        'prerequisites': [[2, 0], [5, 4], [0, 1], [1, 3], [3, 2]],
        'expected': false
    },
    {
        'numCourses': 4,
        'prerequisites': [[1, 2], [2, 3]],
        'expected': true
    },
    {
        'numCourses': 4,
        'prerequisites': [[1, 2], [2, 3], [3, 1]],
        'expected': false
    }
]

for (let i = 0; i < params.length; i++) {
    const { numCourses, prerequisites, expected } = params[i];
    const gotOutput = canFinish(numCourses, prerequisites);
    if (expected !== gotOutput) {
        console.log(`\u274C Test ${i} failed: numCourses = ${numCourses}, prerequisites = ${JSON.stringify(prerequisites)}, expected = ${expected}, but got ${gotOutput}`);
    } else {
        console.log(`\u2705 Test ${i} succeeded`);
    }
}",,
63b59a978ad4593d6b7b0241,course-schedule-ii,"params = [
    {
        'numCourses': 2,
        'prerequisites': [[1, 0]],
        'expected': [0, 1]
    },
    {
        'numCourses': 2,
        'prerequisites': [[1, 0], [0, 1]],
        'expected': []
    },
    {
        'numCourses': 4,
        'prerequisites': [[1, 0], [2, 1], [3, 2]],
        'expected': [0, 1, 2, 3]
    },
    {
        'numCourses': 4,
        'prerequisites': [[1, 0], [0, 2], [2, 1]],
        'expected': []
    },
    {
        'numCourses': 1,
        'prerequisites': [],
        'expected': [0]
    },
    {
        'numCourses': 2,
        'prerequisites': [[0, 1]],
        'expected': [1, 0]
    },
    {
        'numCourses': 3,
        'prerequisites': [[0, 1], [1, 2]],
        'expected': [2, 1, 0]
    },
    {
        'numCourses': 3,
        'prerequisites': [[0, 2], [2, 1]],
        'expected': [1, 2, 0]
    },
    {
        'numCourses': 5,
        'prerequisites': [[0, 1], [1, 2], [2, 3], [3, 4]],
        'expected': [4, 3, 2, 1, 0]
    },
    {
        'numCourses': 5,
        'prerequisites': [[0, 1], [1, 2], [2, 3], [3, 4], [4, 0]],
        'expected': []
    },
    {
        'numCourses': 4,
        'prerequisites': [[2, 0], [1, 0], [3, 2]],
        'expected': [0, 1, 2, 3]
    },
    {
        'numCourses': 5,
        'prerequisites': [[4, 2], [1, 0], [2, 0], [3, 1], [1, 4]],
        'expected': [0, 2, 4, 1, 3]
    },
    {
        'numCourses': 2,
        'prerequisites': [[0, 1], [1, 0]],
        'expected': []
    },
    {
        'numCourses': 6,
        'prerequisites': [[2, 0], [5, 4], [0, 1], [1, 3], [3, 2]],
        'expected': []
    },
    {
        'numCourses': 4,
        'prerequisites': [[1, 2], [2, 3], [3, 1]],
        'expected': []
    },
    {
        'numCourses': 2,
        'prerequisites': [[1, 0]],
        'expected': [0, 1]
    },
    {
        'numCourses': 1,
        'prerequisites': [],
        'expected': [0]
    },
    {
        'numCourses': 4,
        'prerequisites': [[1, 0], [2, 0], [3, 1], [2, 3]],
        'expected': [0, 1, 3, 2]
    },
    {
        'numCourses': 3,
        'prerequisites': [[1, 2], [0, 1]],
        'expected': [2, 1, 0]
    },
    {
        'numCourses': 0,
        'prerequisites': [],
        'expected': []
    },
    {
        'numCourses': 3,
        'prerequisites': [[0, 1], [0, 2], [1, 2]],
        'expected': [2, 1, 0]
    },
    {
        'numCourses': 5,
        'prerequisites': [[0, 1], [1, 2], [2, 3], [3, 4]],
        'expected': [4, 3, 2, 1, 0]
    }
]

obj = Solution()
for i in range(len(params)):
    numCourses = params[i]['numCourses']
    prerequisites = params[i]['prerequisites']
    expected = params[i]['expected']
    gotOutput = obj.findOrder(numCourses, prerequisites)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: numCourses = {numCourses}, prerequisites = {prerequisites}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","let params = [
    {
        'numCourses': 2,
        'prerequisites': [[1, 0]],
        'expected': [0, 1]
    },
    {
        'numCourses': 2,
        'prerequisites': [[1, 0], [0, 1]],
        'expected': []
    },
    {
        'numCourses': 4,
        'prerequisites': [[1, 0], [2, 1], [3, 2]],
        'expected': [0, 1, 2, 3]
    },
    {
        'numCourses': 4,
        'prerequisites': [[1, 0], [0, 2], [2, 1]],
        'expected': []
    },
    {
        'numCourses': 1,
        'prerequisites': [],
        'expected': [0]
    },
    {
        'numCourses': 2,
        'prerequisites': [[0, 1]],
        'expected': [1, 0]
    },
    {
        'numCourses': 3,
        'prerequisites': [[0, 1], [1, 2]],
        'expected': [2, 1, 0]
    },
    {
        'numCourses': 3,
        'prerequisites': [[0, 2], [2, 1]],
        'expected': [1, 2, 0]
    },
    {
        'numCourses': 5,
        'prerequisites': [[0, 1], [1, 2], [2, 3], [3, 4]],
        'expected': [4, 3, 2, 1, 0]
    },
    {
        'numCourses': 5,
        'prerequisites': [[0, 1], [1, 2], [2, 3], [3, 4], [4, 0]],
        'expected': []
    },
    {
        'numCourses': 4,
        'prerequisites': [[2, 0], [1, 0], [3, 2]],
        'expected': [0, 1, 2, 3]
    },
    {
        'numCourses': 5,
        'prerequisites': [[4, 2], [1, 0], [2, 0], [3, 1], [1, 4]],
        'expected': [0, 2, 4, 1, 3]
    },
    {
        'numCourses': 2,
        'prerequisites': [[0, 1], [1, 0]],
        'expected': []
    },
    {
        'numCourses': 6,
        'prerequisites': [[2, 0], [5, 4], [0, 1], [1, 3], [3, 2]],
        'expected': []
    },
    {
        'numCourses': 4,
        'prerequisites': [[1, 2], [2, 3], [3, 1]],
        'expected': []
    },
    {
        'numCourses': 2,
        'prerequisites': [[1, 0]],
        'expected': [0, 1]
    },
    {
        'numCourses': 1,
        'prerequisites': [],
        'expected': [0]
    },
    {
        'numCourses': 4,
        'prerequisites': [[1, 0], [2, 0], [3, 1], [2, 3]],
        'expected': [0, 1, 3, 2]
    },
    {
        'numCourses': 3,
        'prerequisites': [[1, 2], [0, 1]],
        'expected': [2, 1, 0]
    },
    {
        'numCourses': 0,
        'prerequisites': [],
        'expected': []
    },
    {
        'numCourses': 3,
        'prerequisites': [[0, 1], [0, 2], [1, 2]],
        'expected': [2, 1, 0]
    },
    {
        'numCourses': 5,
        'prerequisites': [[0, 1], [1, 2], [2, 3], [3, 4]],
        'expected': [4, 3, 2, 1, 0]
    }
]

for (let i = 0; i < params.length; i++) {
    const { numCourses, prerequisites, expected } = params[i];
    const gotOutput = findOrder(numCourses, prerequisites);
    if (JSON.stringify(expected) !== JSON.stringify(gotOutput)) {
        console.log(`\u274C Test ${i} failed: numCourses = ${numCourses}, prerequisites = ${JSON.stringify(prerequisites)}, expected = ${JSON.stringify(expected)}, but got ${JSON.stringify(gotOutput)}`);
    } else {
        console.log(`\u2705 Test ${i} succeeded`);
    }
}",,
63b59a988ad4593d6b7b0242,redundant-connection,"params = [    
    {        
        ""edges"": [[1,2],[1,3],[2,3]],
        ""expected"": [2,3]
    },
    {
        ""edges"": [[1,2],[2,3],[3,4],[1,4],[1,5]],
        ""expected"": [1,4]
    },
    {
        ""edges"": [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[1,7]],
        ""expected"": [1,7]
    },
    {
        ""edges"": [[1,2],[2,3],[3,1]],
        ""expected"": [3,1]
    },
    {
        ""edges"": [[1,2],[2,3],[3,4],[4,1]],
        ""expected"": [4,1]
    },
    {
        ""edges"": [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[1,8]],
        ""expected"": [1,8]
    },
    {
        ""edges"": [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[1,9]],
        ""expected"": [1,9]
    },
    {
        ""edges"": [[1,2],[2,3],[3,1],[3,4],[4,5],[5,6],[6,7],[7,3]],
        ""expected"": [3, 1]
    },
    {
        ""edges"": [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,1]],
        ""expected"": [10,1]
    },
    {
        ""edges"": [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,1]],
        ""expected"": [11,1]
    },
]

obj = Solution()
for i in range(len(params)):
    edges = params[i]['edges']
    expected = params[i]['expected']
    gotOutput = obj.findRedundantConnection(edges)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: edges = {edges}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","let params = [    
    {        
        ""edges"": [[1,2],[1,3],[2,3]],
        ""expected"": [2,3]
    },
    {
        ""edges"": [[1,2],[2,3],[3,4],[1,4],[1,5]],
        ""expected"": [1,4]
    },
    {
        ""edges"": [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[1,7]],
        ""expected"": [1,7]
    },
    {
        ""edges"": [[1,2],[2,3],[3,1]],
        ""expected"": [3,1]
    },
    {
        ""edges"": [[1,2],[2,3],[3,4],[4,1]],
        ""expected"": [4,1]
    },
    {
        ""edges"": [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[1,8]],
        ""expected"": [1,8]
    },
    {
        ""edges"": [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[1,9]],
        ""expected"": [1,9]
    },
    {
        ""edges"": [[1,2],[2,3],[3,1],[3,4],[4,5],[5,6],[6,7],[7,3]],
        ""expected"": [3, 1]
    },
    {
        ""edges"": [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,1]],
        ""expected"": [10,1]
    },
    {
        ""edges"": [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,1]],
        ""expected"": [11,1]
    },
]

for (let i = 0; i < params.length; i++) {
  let edges = params[i]['edges'];
  let expected = params[i]['expected'];
  let gotOutput = findRedundantConnection(edges);
  if (expected.toString() !== gotOutput.toString()) {
    console.log(`\u274C Test ${i} failed: edges = ${JSON.stringify(edges)}, expected = ${JSON.stringify(expected)}, but got ${JSON.stringify(gotOutput)}`);
  } else {
    console.log(`\u2705 Test ${i} succeeded`);
  }
}",,
63b59a998ad4593d6b7b0243,number-of-connected-components-in-an-undirected-graph,,,,
63b59a9b8ad4593d6b7b0244,graph-valid-tree,"params = [
    {'n': 5, 'edges': [[0, 1], [0, 2], [2, 3], [2, 4]], 'expected': True},
    {'n': 5, 'edges': [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], 'expected': False},
    {'n': 1, 'edges': [], 'expected': True},
    {'n': 2, 'edges': [[0, 1]], 'expected': True},
    {'n': 3, 'edges': [[0, 1], [1, 2]], 'expected': True},
    {'n': 3, 'edges': [[0, 1], [2, 1]], 'expected': True},
    {'n': 4, 'edges': [[0, 1], [1, 2], [2, 3]], 'expected': True},
    {'n': 4, 'edges': [[0, 1], [1, 2], [2, 3], [3, 0]], 'expected': False},
    {'n': 4, 'edges': [[0, 1], [0, 2], [0, 3]], 'expected': True},
    {'n': 5, 'edges': [[0, 1], [1, 2], [2, 3], [3, 4], [4, 0]], 'expected': False},
    {'n': 6, 'edges': [[0, 1], [0, 2], [2, 3], [3, 4], [3, 5]], 'expected': True},
    {'n': 6, 'edges': [[0, 1], [1, 2], [2, 3], [3, 4], [3, 5], [5, 0]], 'expected': False},
    {'n': 4, 'edges': [[0, 1], [0, 2], [1, 2]], 'expected': False},
    {'n': 5, 'edges': [[0, 1], [1, 2], [2, 3], [3, 4], [4, 0], [4, 2]], 'expected': False},
    {'n': 3, 'edges': [[0, 1], [1, 2], [2, 0], [2, 1]], 'expected': False},
    {'n': 2, 'edges': [[0, 1], [1, 0]], 'expected': False},
    {'n': 4, 'edges': [[0, 1], [1, 2], [2, 3]], 'expected': True},
    {'n': 6, 'edges': [[0, 1], [0, 2], [1, 2], [2, 3], [3, 4], [4, 5]], 'expected': False},
    {'n': 7, 'edges': [[0, 1], [0, 2], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]], 'expected': False},
    {'n': 5, 'edges': [[0, 1], [0, 2], [0, 3], [3, 4]], 'expected': True},
]

obj = Solution()
for i in range(len(params)):
    edges = params[i]['edges']
    n = params[i]['n']
    expected = params[i]['expected']
    gotOutput = obj.validTree(n, edges)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: edges = {edges}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","params = [
  {'n': 5, 'edges': [[0, 1], [0, 2], [2, 3], [2, 4]], 'expected': true},
  {'n': 5, 'edges': [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], 'expected': false},
  {'n': 1, 'edges': [], 'expected': true},
  {'n': 2, 'edges': [[0, 1]], 'expected': true},
  {'n': 3, 'edges': [[0, 1], [1, 2]], 'expected': true},
  {'n': 3, 'edges': [[0, 1], [2, 1]], 'expected': true},
  {'n': 4, 'edges': [[0, 1], [1, 2], [2, 3]], 'expected': true},
  {'n': 4, 'edges': [[0, 1], [1, 2], [2, 3], [3, 0]], 'expected': false},
  {'n': 4, 'edges': [[0, 1], [0, 2], [0, 3]], 'expected': true},
  {'n': 5, 'edges': [[0, 1], [1, 2], [2, 3], [3, 4], [4, 0]], 'expected': false},
  {'n': 6, 'edges': [[0, 1], [0, 2], [2, 3], [3, 4], [3, 5]], 'expected': true},
  {'n': 6, 'edges': [[0, 1], [1, 2], [2, 3], [3, 4], [3, 5], [5, 0]], 'expected': false},
  {'n': 4, 'edges': [[0, 1], [0, 2], [1, 2]], 'expected': false},
  {'n': 5, 'edges': [[0, 1], [1, 2], [2, 3], [3, 4], [4, 0], [4, 2]], 'expected': false},
  {'n': 3, 'edges': [[0, 1], [1, 2], [2, 0], [2, 1]], 'expected': false},
  {'n': 2, 'edges': [[0, 1], [1, 0]], 'expected': false},
  {'n': 4, 'edges': [[0, 1], [1, 2], [2, 3]], 'expected': true},
  {'n': 6, 'edges': [[0, 1], [0, 2], [1, 2], [2, 3], [3, 4], [4, 5]], 'expected': false},
  {'n': 7, 'edges': [[0, 1], [0, 2], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]], 'expected': false},
  {'n': 5, 'edges': [[0, 1], [0, 2], [0, 3], [3, 4]], 'expected': true},
]

for (var i = 0; i < params.length; i++) {
    var edges = params[i]['edges'];
    var n = params[i]['n'];
    var expected = params[i]['expected'];
    var gotOutput = validTree(n, edges);
    if (expected != gotOutput) {
        console.log(""\u274C Test "" + i + "" failed: edges = "" + JSON.stringify(edges) + "", expected = "" + expected + "", but got "" + gotOutput);
    } else {
        console.log(""\u2705 Test "" + i + "" succeeded"");
    }
}",,
63b59a9c8ad4593d6b7b0245,word-ladder,"params = [
    {'beginWord': 'hit', 'endWord': 'cog', 'wordList': [""hot"",""dot"",""dog"",""lot"",""log"",""cog""], 'expected': 5},
    {'beginWord': 'hit', 'endWord': 'cog', 'wordList': [""hot"",""dot"",""dog"",""lot"",""log""], 'expected': 0},
    {'beginWord': 'hot', 'endWord': 'dog', 'wordList': [""hot"",""dot"",""dog"",""lot"",""log""], 'expected': 3},
    {'beginWord': 'a', 'endWord': 'c', 'wordList': [""a"",""b"",""c""], 'expected': 2},
    {'beginWord': 'red', 'endWord': 'tax', 'wordList': [""ted"",""tex"",""red"",""tax"",""tad"",""den"",""rex""], 'expected': 4},
    {'beginWord': 'hot', 'endWord': 'dog', 'wordList': [], 'expected': 0},
    {'beginWord': 'hot', 'endWord': 'dog', 'wordList': [""hot""], 'expected': 0},
    {'beginWord': 'hot', 'endWord': 'dog', 'wordList': [""dog""], 'expected': 0},
    {'beginWord': '', 'endWord': 'dog', 'wordList': [""dog""], 'expected': 0},
    {'beginWord': 'hot', 'endWord': 'hot', 'wordList': [""hot""], 'expected': 1},
    {'beginWord': 'at', 'endWord': 'cog', 'wordList': [""hot"",""dot"",""dog"",""lot"",""log"",""cog""], 'expected': 0},
    {'beginWord': 'stone', 'endWord': 'money', 'wordList': [""stand"", ""stain"", ""stony"", ""money""], 'expected': 0},
    {'beginWord': 'stone', 'endWord': 'money', 'wordList': [""stand"", ""stain"", ""stony"", ""money"", ""store""], 'expected': 0},
    {'beginWord': 'move', 'endWord': 'money', 'wordList': [""love"", ""lost"", ""most"", ""mist"", ""cost"", ""cast"", ""mast"", ""mint"", ""mile"", ""male"", ""mile"", ""mole"", ""mode"", ""muse"", ""meat"", ""meal"", ""meet"", ""mead"", ""made"", ""mend"", ""many"", ""mane"", ""mage"", ""page"", ""pale"", ""pike"", ""pile"", ""pole"", ""pone"", ""pint"", ""puce"", ""pace"", ""pain"", ""pane"", ""pair"", ""hare"", ""hive"", ""hole"", ""hone"", ""hate"", ""hate"", ""hale"", ""have"", ""wake"", ""weak"", ""wine"", ""wile"", ""will"", ""weal"", ""wear"", ""weir"", ""wasp"", ""was"", ""ware"", ""warn"", ""war"", ""wand"", ""want"", ""ward"", ""warm"", ""wary"", ""waste"", ""fast"", ""fist"", ""fish"", ""fans"", ""fane"", ""fare"", ""farm"", ""fart"", ""feat"", ""fend"", ""fens"", ""font"", ""cent"", ""cast"", ""cats"", ""cart"", ""car"", ""cape"", ""cake"", ""cafe"", ""cage"", ""case"", ""cash"", ""care"", ""carp"", ""cars"", ""card"", ""ward"", ""warm"", ""warn"", ""war"", ""wand"", ""want"", ""ward"", ""warm"", ""wary"", ""waste""], 'expected': 0},
    {'beginWord': 'cog', 'endWord': 'dog', 'wordList': [""dog"",""cog"",""bog"",""fog"",""log""], 'expected': 2},
    {'beginWord': 'dog', 'endWord': 'cog', 'wordList': [""dog"",""cog"",""bog"",""fog"",""log""], 'expected': 2},
    {'beginWord': 'at', 'endWord': 'cog', 'wordList': [], 'expected': 0},
    {'beginWord': 'at', 'endWord': 'cog', 'wordList': [""cog""], 'expected': 0},
    {'beginWord': 'at', 'endWord': 'cat', 'wordList': [""cat""], 'expected': 0},
    {'beginWord': '', 'endWord': 'cog', 'wordList': [], 'expected': 0},
    {'beginWord': 'dog', 'endWord': 'dog', 'wordList': [""dog""], 'expected': 1}
]

obj = Solution()
for i in range(len(params)):
    beginWord = params[i]['beginWord']
    endWord = params[i]['endWord']
    wordList = params[i]['wordList']
    expected = params[i]['expected']
    gotOutput = obj.ladderLength(beginWord, endWord, wordList)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: beginWord = {beginWord}, endWord = {endWord}, wordList = {wordList}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","let params = [
  {'beginWord': 'hit', 'endWord': 'cog', 'wordList': [""hot"",""dot"",""dog"",""lot"",""log"",""cog""], 'expected': 5},
  {'beginWord': 'hit', 'endWord': 'cog', 'wordList': [""hot"",""dot"",""dog"",""lot"",""log""], 'expected': 0},
  {'beginWord': 'hot', 'endWord': 'dog', 'wordList': [""hot"",""dot"",""dog"",""lot"",""log""], 'expected': 3},
  {'beginWord': 'a', 'endWord': 'c', 'wordList': [""a"",""b"",""c""], 'expected': 2},
  {'beginWord': 'red', 'endWord': 'tax', 'wordList': [""ted"",""tex"",""red"",""tax"",""tad"",""den"",""rex""], 'expected': 4},
  {'beginWord': 'hot', 'endWord': 'dog', 'wordList': [], 'expected': 0},
  {'beginWord': 'hot', 'endWord': 'dog', 'wordList': [""hot""], 'expected': 0},
  {'beginWord': 'hot', 'endWord': 'dog', 'wordList': [""dog""], 'expected': 0},
  {'beginWord': '', 'endWord': 'dog', 'wordList': [""dog""], 'expected': 0},
  {'beginWord': 'hot', 'endWord': 'hot', 'wordList': [""hot""], 'expected': 1},
  {'beginWord': 'at', 'endWord': 'cog', 'wordList': [""hot"",""dot"",""dog"",""lot"",""log"",""cog""], 'expected': 0},
  {'beginWord': 'stone', 'endWord': 'money', 'wordList': [""stand"", ""stain"", ""stony"", ""money""], 'expected': 0},
  {'beginWord': 'stone', 'endWord': 'money', 'wordList': [""stand"", ""stain"", ""stony"", ""money"", ""store""], 'expected': 0},
  {'beginWord': 'move', 'endWord': 'money', 'wordList': [""love"", ""lost"", ""most"", ""mist"", ""cost"", ""cast"", ""mast"", ""mint"", ""mile"", ""male"", ""mile"", ""mole"", ""mode"", ""muse"", ""meat"", ""meal"", ""meet"", ""mead"", ""made"", ""mend"", ""many"", ""mane"", ""mage"", ""page"", ""pale"", ""pike"", ""pile"", ""pole"", ""pone"", ""pint"", ""puce"", ""pace"", ""pain"", ""pane"", ""pair"", ""hare"", ""hive"", ""hole"", ""hone"", ""hate"", ""hate"", ""hale"", ""have"", ""wake"", ""weak"", ""wine"", ""wile"", ""will"", ""weal"", ""wear"", ""weir"", ""wasp"", ""was"", ""ware"", ""warn"", ""war"", ""wand"", ""want"", ""ward"", ""warm"", ""wary"", ""waste"", ""fast"", ""fist"", ""fish"", ""fans"", ""fane"", ""fare"", ""farm"", ""fart"", ""feat"", ""fend"", ""fens"", ""font"", ""cent"", ""cast"", ""cats"", ""cart"", ""car"", ""cape"", ""cake"", ""cafe"", ""cage"", ""case"", ""cash"", ""care"", ""carp"", ""cars"", ""card"", ""ward"", ""warm"", ""warn"", ""war"", ""wand"", ""want"", ""ward"", ""warm"", ""wary"", ""waste""], 'expected': 0},
  {'beginWord': 'cog', 'endWord': 'dog', 'wordList': [""dog"",""cog"",""bog"",""fog"",""log""], 'expected': 2},
  {'beginWord': 'dog', 'endWord': 'cog', 'wordList': [""dog"",""cog"",""bog"",""fog"",""log""], 'expected': 2},
  {'beginWord': 'at', 'endWord': 'cog', 'wordList': [], 'expected': 0},
  {'beginWord': 'at', 'endWord': 'cog', 'wordList': [""cog""], 'expected': 0},
  {'beginWord': 'at', 'endWord': 'cat', 'wordList': [""cat""], 'expected': 0},
  {'beginWord': '', 'endWord': 'cog', 'wordList': [], 'expected': 0},
  {'beginWord': 'dog', 'endWord': 'dog', 'wordList': [""dog""], 'expected': 1}
]

for (let i = 0; i < params.length; i++) {
  let beginWord = params[i]['beginWord'];
  let endWord = params[i]['endWord'];
  let wordList = params[i]['wordList'];
  let expected = params[i]['expected'];
  let gotOutput = ladderLength(beginWord, endWord, wordList);
  if (expected !== gotOutput) {
    console.log(`\u274C Test ${i} failed: beginWord = ${beginWord}, endWord = ${endWord}, wordList = ${JSON.stringify(wordList)}, expected = ${expected}, but got ${gotOutput}`);
  } else {
    console.log(`\u2705 Test ${i} succeeded`);
  }
}",,
63b59a9d8ad4593d6b7b0246,reconstruct-itinerary,"params = [    
  {'tickets': [[""MUC"",""LHR""],[""JFK"",""MUC""],[""SFO"",""SJC""],[""LHR"",""SFO""]], 'expected': [""JFK"",""MUC"",""LHR"",""SFO"",""SJC""]},
  {'tickets': [[""JFK"",""SFO""],[""JFK"",""ATL""],[""SFO"",""ATL""],[""ATL"",""JFK""],[""ATL"",""SFO""]], 'expected': [""JFK"",""ATL"",""JFK"",""SFO"",""ATL"",""SFO""]},
  {'tickets': [[""JFK"",""LGA""]], 'expected': [""JFK"", ""LGA""]},
  {'tickets': [[""JFK"",""AAA""], [""AAA"",""BBB""], [""BBB"",""CCC""], [""CCC"",""DDD""], [""DDD"", ""EEE""], [""EEE"", ""FFF""]], 'expected': [""JFK"",""AAA"",""BBB"",""CCC"",""DDD"",""EEE"",""FFF""]},
  {'tickets': [[""JFK"",""AAA""], [""AAA"",""JFK""], [""JFK"",""BBB""], [""BBB"",""JFK""]], 'expected': ['JFK', 'AAA', 'JFK', 'BBB', 'JFK']},
  {'tickets': [[""AAA"",""BBB""], [""BBB"",""CCC""], [""CCC"",""DDD""], [""DDD"", ""EEE""], [""EEE"", ""FFF""], [""FFF"",""GGG""]], 'expected': ['JFK']},
  {'tickets': [], 'expected': [""JFK""]},
  {'tickets': [[""JFK"", ""JFK""]], 'expected': [""JFK"", ""JFK""]},
  {'tickets': [[""JFK"", ""AAA""], [""AAA"", ""JFK""], [""JFK"", ""BBB""], [""BBB"", ""AAA""], [""AAA"", ""BBB""]], 'expected': ['JFK', 'AAA', 'BBB', 'AAA', 'JFK', 'BBB']},
  {'tickets': [[""JFK"", ""AAA""], [""AAA"", ""BBB""], [""BBB"", ""CCC""], [""CCC"", ""DDD""], [""DDD"", ""EEE""], [""EEE"", ""BBB""], [""BBB"", ""DDD""], [""DDD"", ""CCC""], [""CCC"", ""BBB""], [""BBB"", ""AAA""]], 'expected': ['JFK', 'AAA', 'BBB', 'CCC', 'BBB', 'DDD', 'CCC', 'DDD', 'EEE', 'BBB', 'AAA']},
  {'tickets': [[""JFK"",""LAX""],[""LAX"",""SFO""],[""SFO"",""HKG""],[""HKG"",""JFK""],[""JFK"",""HKO""],[""HKO"",""LAX""]], 'expected': ['JFK', 'HKO', 'LAX', 'SFO', 'HKG', 'JFK', 'LAX']},
  {'tickets': [[""JFK"",""SFO""],[""SFO"",""LAX""],[""LAX"",""HKG""],[""HKG"",""JFK""],[""JFK"",""HKO""],[""HKO"",""SFO""]], 'expected': ['JFK', 'HKO', 'SFO', 'LAX', 'HKG', 'JFK', 'SFO']},
  {'tickets': [[""JFK"",""LAX""],[""LAX"",""HKG""],[""HKG"",""JFK""],[""JFK"",""SFO""],[""SFO"",""LAX""],[""LAX"",""HKG""]], 'expected': ['JFK', 'LAX', 'HKG', 'JFK', 'SFO', 'LAX', 'HKG']},
  {'tickets': [[""LAX"",""JFK""],[""JFK"",""HKG""],[""HKG"",""SFO""],[""SFO"",""LAX""]], 'expected': ['JFK', 'HKG', 'SFO', 'LAX', 'JFK']},
  {'tickets': [[""JFK"",""HKG""],[""HKG"",""SFO""],[""SFO"",""LAX""],[""LAX"",""JFK""]], 'expected': [""JFK"",""HKG"",""SFO"",""LAX"",""JFK""]},
  {'tickets': [[""SFO"",""JFK""],[""JFK"",""LAX""],[""LAX"",""HKG""],[""HKG"",""SFO""]], 'expected': ['JFK', 'LAX', 'HKG', 'SFO', 'JFK']},
  {'tickets': [[""HKG"",""JFK""],[""JFK"",""LAX""],[""LAX"",""SFO""],[""SFO"",""HKG""]], 'expected': ['JFK', 'LAX', 'SFO', 'HKG', 'JFK']}
]

obj = Solution()
for i in range(len(params)):
    tickets = params[i]['tickets']
    expected = params[i]['expected']
    gotOutput = obj.findItinerary(tickets)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: tickets = {tickets}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","let params = [    
  {'tickets': [[""MUC"",""LHR""],[""JFK"",""MUC""],[""SFO"",""SJC""],[""LHR"",""SFO""]], 'expected': [""JFK"",""MUC"",""LHR"",""SFO"",""SJC""]},
  {'tickets': [[""JFK"",""SFO""],[""JFK"",""ATL""],[""SFO"",""ATL""],[""ATL"",""JFK""],[""ATL"",""SFO""]], 'expected': [""JFK"",""ATL"",""JFK"",""SFO"",""ATL"",""SFO""]},
  {'tickets': [[""JFK"",""LGA""]], 'expected': [""JFK"", ""LGA""]},
  {'tickets': [[""JFK"",""AAA""], [""AAA"",""BBB""], [""BBB"",""CCC""], [""CCC"",""DDD""], [""DDD"", ""EEE""], [""EEE"", ""FFF""]], 'expected': [""JFK"",""AAA"",""BBB"",""CCC"",""DDD"",""EEE"",""FFF""]},
  {'tickets': [[""JFK"",""AAA""], [""AAA"",""JFK""], [""JFK"",""BBB""], [""BBB"",""JFK""]], 'expected': ['JFK', 'AAA', 'JFK', 'BBB', 'JFK']},
  {'tickets': [[""AAA"",""BBB""], [""BBB"",""CCC""], [""CCC"",""DDD""], [""DDD"", ""EEE""], [""EEE"", ""FFF""], [""FFF"",""GGG""]], 'expected': ['JFK']},
  {'tickets': [], 'expected': [""JFK""]},
  {'tickets': [[""JFK"", ""JFK""]], 'expected': [""JFK"", ""JFK""]},
  {'tickets': [[""JFK"", ""AAA""], [""AAA"", ""JFK""], [""JFK"", ""BBB""], [""BBB"", ""AAA""], [""AAA"", ""BBB""]], 'expected': ['JFK', 'AAA', 'BBB', 'AAA', 'JFK', 'BBB']},
  {'tickets': [[""JFK"", ""AAA""], [""AAA"", ""BBB""], [""BBB"", ""CCC""], [""CCC"", ""DDD""], [""DDD"", ""EEE""], [""EEE"", ""BBB""], [""BBB"", ""DDD""], [""DDD"", ""CCC""], [""CCC"", ""BBB""], [""BBB"", ""AAA""]], 'expected': ['JFK', 'AAA', 'BBB', 'CCC', 'BBB', 'DDD', 'CCC', 'DDD', 'EEE', 'BBB', 'AAA']},
  {'tickets': [[""JFK"",""LAX""],[""LAX"",""SFO""],[""SFO"",""HKG""],[""HKG"",""JFK""],[""JFK"",""HKO""],[""HKO"",""LAX""]], 'expected': ['JFK', 'HKO', 'LAX', 'SFO', 'HKG', 'JFK', 'LAX']},
  {'tickets': [[""JFK"",""SFO""],[""SFO"",""LAX""],[""LAX"",""HKG""],[""HKG"",""JFK""],[""JFK"",""HKO""],[""HKO"",""SFO""]], 'expected': ['JFK', 'HKO', 'SFO', 'LAX', 'HKG', 'JFK', 'SFO']},
  {'tickets': [[""JFK"",""LAX""],[""LAX"",""HKG""],[""HKG"",""JFK""],[""JFK"",""SFO""],[""SFO"",""LAX""],[""LAX"",""HKG""]], 'expected': ['JFK', 'LAX', 'HKG', 'JFK', 'SFO', 'LAX', 'HKG']},
  {'tickets': [[""LAX"",""JFK""],[""JFK"",""HKG""],[""HKG"",""SFO""],[""SFO"",""LAX""]], 'expected': ['JFK', 'HKG', 'SFO', 'LAX', 'JFK']},
  {'tickets': [[""JFK"",""HKG""],[""HKG"",""SFO""],[""SFO"",""LAX""],[""LAX"",""JFK""]], 'expected': [""JFK"",""HKG"",""SFO"",""LAX"",""JFK""]},
  {'tickets': [[""SFO"",""JFK""],[""JFK"",""LAX""],[""LAX"",""HKG""],[""HKG"",""SFO""]], 'expected': ['JFK', 'LAX', 'HKG', 'SFO', 'JFK']},
  {'tickets': [[""HKG"",""JFK""],[""JFK"",""LAX""],[""LAX"",""SFO""],[""SFO"",""HKG""]], 'expected': ['JFK', 'LAX', 'SFO', 'HKG', 'JFK']}
]

for (let i = 0; i < params.length; i++) {
    let tickets = params[i]['tickets'];
    let expected = params[i]['expected'];
    let gotOutput = findItinerary(tickets);
    if (JSON.stringify(expected) !== JSON.stringify(gotOutput)) {
        console.log(`\u274C Test ${i} failed: tickets = ${JSON.stringify(tickets)}, expected = ${JSON.stringify(expected)}, but got ${JSON.stringify(gotOutput)}`);
    } else {
        console.log(`\u2705 Test ${i} succeeded`);
    }
}",,
63b59a9e8ad4593d6b7b0247,min-cost-to-connect-all-points,"params = [
    {'points': [[0,0],[2,2],[3,10],[5,2],[7,0]], 'expected': 20},
    {'points': [[3,12],[-2,5],[-4,1]], 'expected': 18},
    {'points': [[0,0],[1,1]], 'expected': 2},
    {'points': [[1,1],[1,2],[3,4],[-1,0]], 'expected': 8},
    {'points': [[-1,-2],[3,4],[6,1],[-1,-6]], 'expected': 20},
    {'points': [[-1,-1],[1,1],[1,-1],[-1,1]], 'expected': 6},
    {'points': [[-1,0],[0,0],[1,0]], 'expected': 2},
    {'points': [[0,0],[1,1],[1,0]], 'expected': 2},
    {'points': [[0,0],[0,1],[1,1],[1,0]], 'expected': 3},
    {'points': [[0,0],[1,1]], 'expected': 2},
    {'points': [[-1000000,-1000000],[1000000,1000000]], 'expected': 4000000},
    {'points': [[-1000000,-1000000],[1000000,-1000000],[1000000,1000000],[-1000000,1000000]], 'expected': 6000000},
    {'points': [[1,1]], 'expected': 0},
    {'points': [[-1000000,0],[1000000,0]], 'expected': 2000000},
    {'points': [[0,0],[0,1000],[1000,0],[1000,1000]], 'expected': 3000},
    {'points': [[-2,-2],[-1,-1],[0,0],[1,1],[2,2]], 'expected': 8},
    {'points': [[-1,0],[0,0],[1,0]], 'expected': 2},
]

obj = Solution()
for i in range(len(params)):
    points = params[i]['points']
    expected = params[i]['expected']
    gotOutput = obj.minCostConnectPoints(points)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: points = {points}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","let params = [
        {'points': [[0,0],[2,2],[3,10],[5,2],[7,0]], 'expected': 20},
        {'points': [[3,12],[-2,5],[-4,1]], 'expected': 18},
        {'points': [[0,0],[1,1]], 'expected': 2},
        {'points': [[1,1],[1,2],[3,4],[-1,0]], 'expected': 8},
        {'points': [[-1,-2],[3,4],[6,1],[-1,-6]], 'expected': 20},
        {'points': [[-1,-1],[1,1],[1,-1],[-1,1]], 'expected': 6},
        {'points': [[-1,0],[0,0],[1,0]], 'expected': 2},
        {'points': [[0,0],[1,1],[1,0]], 'expected': 2},
        {'points': [[0,0],[0,1],[1,1],[1,0]], 'expected': 3},
        {'points': [[0,0],[1,1]], 'expected': 2},
        {'points': [[-1000000,-1000000],[1000000,1000000]], 'expected': 4000000},
        {'points': [[-1000000,-1000000],[1000000,-1000000],[1000000,1000000],[-1000000,1000000]], 'expected': 6000000},
        {'points': [[1,1]], 'expected': 0},
        {'points': [[-1000000,0],[1000000,0]], 'expected': 2000000},
        {'points': [[0,0],[0,1000],[1000,0],[1000,1000]], 'expected': 3000},
        {'points': [[-2,-2],[-1,-1],[0,0],[1,1],[2,2]], 'expected': 8},
        {'points': [[-1,0],[0,0],[1,0]], 'expected': 2},
]

for (let i = 0; i < params.length; i++) {
        const points = params[i]['points'];
        const expected = params[i]['expected'];
        const gotOutput = minCostConnectPoints(points);
        if (expected !== gotOutput) {
        console.log(`\u274C Test ${i} failed: points = ${JSON.stringify(points)}, expected = ${expected}, but got ${gotOutput}`);
        } else {
        console.log(`\u2705 Test ${i} succeeded`);
        }
}    ",,
63b59a9f8ad4593d6b7b0248,network-delay-time,"params = [
    {'times': [[2,1,1],[2,3,1],[3,4,1]], 'n': 4, 'k': 2, 'expected': 2},
    {'times': [[1,2,1]], 'n': 2, 'k': 1, 'expected': 1},
    {'times': [[1,2,1]], 'n': 2, 'k': 2, 'expected': -1},
    {'times': [[1,2,3],[2,3,3],[3,4,2],[4,5,1]], 'n': 5, 'k': 1, 'expected': 9},
    {'times': [[1,2,1],[1,3,1],[2,4,1],[3,4,1]], 'n': 4, 'k': 1, 'expected': 2},
    {'times': [[1,2,1],[2,1,1]], 'n': 2, 'k': 2, 'expected': 1},
    {'times': [[1,2,0]], 'n': 2, 'k': 1, 'expected': 0},
    {'times': [[1,2,3],[1,3,1],[3,2,1]], 'n': 3, 'k': 2, 'expected': -1},
    {'times': [[1,2,1],[2,3,7],[2,5,5],[5,3,1],[5,4,1],[4,3,1]], 'n': 5, 'k': 1, 'expected': 7},
    {'times': [[1,2,3]], 'n': 2, 'k': 1, 'expected': 3},
    {'times': [[1,2,1],[2,3,2]], 'n': 3, 'k': 1, 'expected': 3},
    {'times': [[1,2,1],[1,3,2],[2,4,2],[3,4,4]], 'n': 4, 'k': 1, 'expected': 3},
    {'times': [[1,2,1],[2,3,1],[3,4,1],[4,5,1]], 'n': 5, 'k': 1, 'expected': 4},
    {'times': [[1,2,1],[2,1,1],[1,3,1],[3,1,1]], 'n': 3, 'k': 1, 'expected': 1},
    {'times': [[1,2,1],[2,3,2]], 'n': 3, 'k': 3, 'expected': -1},
    {'times': [[1,2,1],[2,3,1],[1,3,2]], 'n': 3, 'k': 1, 'expected': 2},
    {'times': [[1,2,1],[2,3,1],[1,3,1]], 'n': 3, 'k': 1, 'expected': 1},
    {'times': [[1,2,1],[2,3,1],[3,1,1]], 'n': 3, 'k': 3, 'expected': 2},
    {'times': [[1,2,5],[2,3,5],[3,4,5],[4,5,5],[5,1,5]], 'n': 5, 'k': 1, 'expected': 20},
]

obj = Solution()
for i in range(len(params)):
    times = params[i]['times']
    n = params[i]['n']
    k = params[i]['k']
    expected = params[i]['expected']
    gotOutput = obj.networkDelayTime(times, n, k)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: times = {times}, n = {n}, k = {k}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","let params = [
        {'times': [[2,1,1],[2,3,1],[3,4,1]], 'n': 4, 'k': 2, 'expected': 2},
        {'times': [[1,2,1]], 'n': 2, 'k': 1, 'expected': 1},
        {'times': [[1,2,1]], 'n': 2, 'k': 2, 'expected': -1},
        {'times': [[1,2,3],[2,3,3],[3,4,2],[4,5,1]], 'n': 5, 'k': 1, 'expected': 9},
        {'times': [[1,2,1],[1,3,1],[2,4,1],[3,4,1]], 'n': 4, 'k': 1, 'expected': 2},
        {'times': [[1,2,1],[2,1,1]], 'n': 2, 'k': 2, 'expected': 1},
        {'times': [[1,2,0]], 'n': 2, 'k': 1, 'expected': 0},
        {'times': [[1,2,3],[1,3,1],[3,2,1]], 'n': 3, 'k': 2, 'expected': -1},
        {'times': [[1,2,1],[2,3,7],[2,5,5],[5,3,1],[5,4,1],[4,3,1]], 'n': 5, 'k': 1, 'expected': 7},
        {'times': [[1,2,3]], 'n': 2, 'k': 1, 'expected': 3},
        {'times': [[1,2,1],[2,3,2]], 'n': 3, 'k': 1, 'expected': 3},
        {'times': [[1,2,1],[1,3,2],[2,4,2],[3,4,4]], 'n': 4, 'k': 1, 'expected': 3},
        {'times': [[1,2,1],[2,3,1],[3,4,1],[4,5,1]], 'n': 5, 'k': 1, 'expected': 4},
        {'times': [[1,2,1],[2,1,1],[1,3,1],[3,1,1]], 'n': 3, 'k': 1, 'expected': 1},
        {'times': [[1,2,1],[2,3,2]], 'n': 3, 'k': 3, 'expected': -1},
        {'times': [[1,2,1],[2,3,1],[1,3,2]], 'n': 3, 'k': 1, 'expected': 2},
        {'times': [[1,2,1],[2,3,1],[1,3,1]], 'n': 3, 'k': 1, 'expected': 1},
        {'times': [[1,2,1],[2,3,1],[3,1,1]], 'n': 3, 'k': 3, 'expected': 2},
        {'times': [[1,2,5],[2,3,5],[3,4,5],[4,5,5],[5,1,5]], 'n': 5, 'k': 1, 'expected': 20},
]

for (let i = 0; i < params.length; i++) {
  const times = params[i]['times'];
  const n = params[i]['n'];
  const k = params[i]['k'];
  const expected = params[i]['expected'];
  const gotOutput = networkDelayTime(times, n, k);
  if (expected !== gotOutput) {
    console.log(`\u274C Test ${i} failed: times = ${JSON.stringify(times)}, n = ${n}, k = ${k}, expected = ${expected}, but got ${gotOutput}`);
  } else {
    console.log(`\u2705 Test ${i} succeeded`);
  }
}",,
63b59aa08ad4593d6b7b0249,swim-in-rising-water,"params = [
    {'grid': [[0,2],[1,3]], 'expected': 3},
    {'grid': [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]], 'expected': 16},
    {'grid': [[0,1],[2,3]], 'expected': 3},
    {'grid': [[0,1,2],[5,4,3],[6,7,8]], 'expected': 8},
    {'grid': [[0]], 'expected': 0},
    {'grid': [[0,5,10],[5,10,15],[10,15,20]], 'expected': 20},
    {'grid': [[1,0],[0,1]], 'expected': 1},
    {'grid': [[3,2,1],[2,1,0],[1,0,2]], 'expected': 3},
    {'grid': [[0,0,0],[0,0,0],[0,0,0]], 'expected': 0},
    {'grid': [[1,2,3],[8,9,4],[7,6,5]], 'expected': 5}
]

obj = Solution()
for i in range(len(params)):
    grid = params[i]['grid']
    expected = params[i]['expected']
    gotOutput = obj.swimInWater(grid)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: grid = {grid}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","let params = [
        {'grid': [[0,2],[1,3]], 'expected': 3},
        {'grid': [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]], 'expected': 16},
        {'grid': [[0,1],[2,3]], 'expected': 3},
        {'grid': [[0,1,2],[5,4,3],[6,7,8]], 'expected': 8},
        {'grid': [[0]], 'expected': 0},
        {'grid': [[0,5,10],[5,10,15],[10,15,20]], 'expected': 20},
        {'grid': [[1,0],[0,1]], 'expected': 1},
        {'grid': [[3,2,1],[2,1,0],[1,0,2]], 'expected': 3},
        {'grid': [[0,0,0],[0,0,0],[0,0,0]], 'expected': 0},
        {'grid': [[1,2,3],[8,9,4],[7,6,5]], 'expected': 5}
]

for (let i = 0; i < params.length; i++) {
  const grid = params[i]['grid'];
  const expected = params[i]['expected'];
  const gotOutput = swimInWater(grid);
  if (expected !== gotOutput) {
    console.log(`\u274C Test ${i} failed: grid = ${grid}, expected = ${expected}, but got ${gotOutput}`);
  } else {
    console.log(`\u2705 Test ${i} succeeded`);
  }
}",,
63b59aa08ad4593d6b7b024a,alien-dictionary,"params = [
    {
        'words': [""wrt"",""wrf"",""er"",""ett"",""rftt""],
        'expected': 'wertf'
    },
    {
        'words': [""z"",""x""],
        'expected': 'zx'
    },
    {
        'words': [""abc"", ""ab""],
        'expected': ''
    },
    {
        'words': [""zy"", ""zx""],
        'expected': 'yxz'
    },
    {
        'words': [""za"", ""zb"", ""ca"", ""cb""],
        'expected': 'abzc'
    },
    {
        'words': [""aa"", ""ab"", ""ac"", ""ba"", ""bb"", ""bc"", ""ca"", ""cb"", ""cc""],
        'expected': 'abc'
    },
    {
        'words': [""a"", ""a""],
        'expected': 'a'
    },
    {
        'words': [""a""],
        'expected': 'a'
    },
    {
        'words': [""hello"", ""world""],
        'expected': 'drolehw'
    },
    {
        'words': [""aaa"", ""aab"", ""baa"", ""bab""],
        'expected': 'ab'
    },
    {
        'words': [""za"", ""zb"", ""ca"", ""cb""],
        'expected': 'abzc'
    },
    {
        'words': [""xz"", ""xy"", ""yz""],
        'expected': 'zxy'
    },
    {
        'words': [""abc"", ""abd"", ""acd"", ""aee""],
        'expected': 'bceda'
    },
    {
        'words': [""a"", ""aa""],
        'expected': 'a'
    },
    {
        'words': [""aaa"", ""aa""],
        'expected': ''
    },
    {
        'words': [""a"", ""b"", ""c"", ""d""],
        'expected': 'abcd'
    },
    {
        'words': [""ab"", ""ba""],
        'expected': 'ab'
    }
]

obj = Solution()
for i in range(len(params)):
    words = params[i]['words']
    expected = params[i]['expected']
    gotOutput = obj.alienOrder(words)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: words = {words}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","let params = [
        {
            'words': [""wrt"",""wrf"",""er"",""ett"",""rftt""],
            'expected': 'wertf'
        },
        {
            'words': [""z"",""x""],
            'expected': 'zx'
        },
        {
            'words': [""abc"", ""ab""],
            'expected': ''
        },
        {
            'words': [""zy"", ""zx""],
            'expected': 'yxz'
        },
        {
            'words': [""za"", ""zb"", ""ca"", ""cb""],
            'expected': 'abzc'
        },
        {
            'words': [""aa"", ""ab"", ""ac"", ""ba"", ""bb"", ""bc"", ""ca"", ""cb"", ""cc""],
            'expected': 'abc'
        },
        {
            'words': [""a"", ""a""],
            'expected': 'a'
        },
        {
            'words': [""a""],
            'expected': 'a'
        },
        {
            'words': [""hello"", ""world""],
            'expected': 'drolehw'
        },
        {
            'words': [""aaa"", ""aab"", ""baa"", ""bab""],
            'expected': 'ab'
        },
        {
            'words': [""za"", ""zb"", ""ca"", ""cb""],
            'expected': 'abzc'
        },
        {
            'words': [""xz"", ""xy"", ""yz""],
            'expected': 'zxy'
        },
        {
            'words': [""abc"", ""abd"", ""acd"", ""aee""],
            'expected': 'bceda'
        },
        {
            'words': [""a"", ""aa""],
            'expected': 'a'
        },
        {
            'words': [""aaa"", ""aa""],
            'expected': ''
        },
        {
            'words': [""a"", ""b"", ""c"", ""d""],
            'expected': 'abcd'
        },
        {
            'words': [""ab"", ""ba""],
            'expected': 'ab'
        }
]

for (let i = 0; i < params.length; i++) {
    const words = params[i]['words'];
    const expected = params[i]['expected'];
    const gotOutput = alienOrder(words);
    if (expected !== gotOutput) {
        console.log(`\u274C Test ${i} failed: words = ${JSON.stringify(words)}, expected = ${expected}, but got ${gotOutput}`);
    } else {
        console.log(`\u2705 Test ${i} succeeded`);
    }
}",,
63b59aa18ad4593d6b7b024b,cheapest-flights-within-k-stops,"params = [
  {
    ""n"": 4,
    ""flights"": [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]],
    ""src"": 0,
    ""dst"": 3,
    ""k"": 1,
    ""expected"": 700
  },
  {
    ""n"": 3,
    ""flights"": [[0,1,100],[1,2,100],[0,2,500]],
    ""src"": 0,
    ""dst"": 2,
    ""k"": 1,
    ""expected"": 200
  },
  {
    ""n"": 3,
    ""flights"": [[0,1,100],[1,2,100],[0,2,500]],
    ""src"": 0,
    ""dst"": 2,
    ""k"": 0,
    ""expected"": 500
  },
  {
    ""n"": 1,
    ""flights"": [],
    ""src"": 0,
    ""dst"": 0,
    ""k"": 0,
    ""expected"": 0
  },
  {
    ""n"": 3,
    ""flights"": [[0,1,5],[0,2,10],[1,2,1]],
    ""src"": 0,
    ""dst"": 2,
    ""k"": 1,
    ""expected"": 6
  },
  {
    ""n"": 3,
    ""flights"": [[0,1,2],[1,2,1],[2,0,10]],
    ""src"": 1,
    ""dst"": 2,
    ""k"": 1,
    ""expected"": 1
  },
  {
    ""n"": 5,
    ""flights"": [[0,1,5],[1,2,5],[2,3,5],[3,4,5],[4,0,5]],
    ""src"": 0,
    ""dst"": 3,
    ""k"": 3,
    ""expected"": 15
  },
  {
    ""n"": 3,
    ""flights"": [[0,1,100],[1,2,100],[0,2,100]],
    ""src"": 1,
    ""dst"": 2,
    ""k"": 2,
    ""expected"": 100
  },
  {
    ""n"": 5,
    ""flights"": [[0,1,10],[1,2,5]],
    ""src"": 0,
    ""dst"": 1,
    ""k"": 1,
    ""expected"": 10
  },
  {
    ""n"": 5,
    ""flights"": [[0,1,5],[1,2,5],[2,3,5],[3,4,5],[4,0,5]],
    ""src"": 0,
    ""dst"": 3,
    ""k"": 1,
    ""expected"": -1
  }
]

obj = Solution()
for i in range(len(params)):
    n = params[i]['n']
    flights = params[i]['flights']
    src = params[i]['src']
    dst = params[i]['dst']
    k = params[i]['k']
    expected = params[i]['expected']
    gotOutput = obj.findCheapestPrice(n, flights, src, dst, k)
    if expected != gotOutput:
        print(f""\u274C Test {i} failed: n = {n}, flights = {flights}, src = {src}, dst = {dst}, k = {k}, expected = {expected}, but got {gotOutput}"")
    else:
        print(f""\u2705 Test {i} succeeded"")","let params = [
        {
          ""n"": 4,
          ""flights"": [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]],
          ""src"": 0,
          ""dst"": 3,
          ""k"": 1,
          ""expected"": 700
        },
        {
          ""n"": 3,
          ""flights"": [[0,1,100],[1,2,100],[0,2,500]],
          ""src"": 0,
          ""dst"": 2,
          ""k"": 1,
          ""expected"": 200
        },
        {
          ""n"": 3,
          ""flights"": [[0,1,100],[1,2,100],[0,2,500]],
          ""src"": 0,
          ""dst"": 2,
          ""k"": 0,
          ""expected"": 500
        },
        {
          ""n"": 1,
          ""flights"": [],
          ""src"": 0,
          ""dst"": 0,
          ""k"": 0,
          ""expected"": 0
        },
        {
          ""n"": 3,
          ""flights"": [[0,1,5],[0,2,10],[1,2,1]],
          ""src"": 0,
          ""dst"": 2,
          ""k"": 1,
          ""expected"": 6
        },
        {
          ""n"": 3,
          ""flights"": [[0,1,2],[1,2,1],[2,0,10]],
          ""src"": 1,
          ""dst"": 2,
          ""k"": 1,
          ""expected"": 1
        },
        {
          ""n"": 5,
          ""flights"": [[0,1,5],[1,2,5],[2,3,5],[3,4,5],[4,0,5]],
          ""src"": 0,
          ""dst"": 3,
          ""k"": 3,
          ""expected"": 15
        },
        {
          ""n"": 3,
          ""flights"": [[0,1,100],[1,2,100],[0,2,100]],
          ""src"": 1,
          ""dst"": 2,
          ""k"": 2,
          ""expected"": 100
        },
        {
          ""n"": 5,
          ""flights"": [[0,1,10],[1,2,5]],
          ""src"": 0,
          ""dst"": 1,
          ""k"": 1,
          ""expected"": 10
        },
        {
          ""n"": 5,
          ""flights"": [[0,1,5],[1,2,5],[2,3,5],[3,4,5],[4,0,5]],
          ""src"": 0,
          ""dst"": 3,
          ""k"": 1,
          ""expected"": -1
        }
      ]

for (let i = 0; i < params.length; i++) {
  const n = params[i]['n'];
  const flights = params[i]['flights'];
  const src = params[i]['src'];
  const dst = params[i]['dst'];
  const k = params[i]['k'];
  const expected = params[i]['expected'];
  const gotOutput = findCheapestPrice(n, flights, src, dst, k);
  if (expected !== gotOutput) {
    console.log(`\u274C Test ${i} failed: n = ${n}, flights = ${JSON.stringify(flights)}, src = ${src}, dst = ${dst}, k = ${k}, expected = ${expected}, but got ${gotOutput}`);
  } else {
    console.log(`\u2705 Test ${i} succeeded`);
  }
}",,
63b59aa28ad4593d6b7b024c,valid-parenthesis-string,,,,
63b59aa38ad4593d6b7b024d,insert-interval,,,,
63b59aa48ad4593d6b7b024e,merge-intervals,,,,
63b59aa48ad4593d6b7b024f,non-overlapping-intervals,,,,
63b59aa58ad4593d6b7b0250,meeting-rooms,,,,
63b59aa68ad4593d6b7b0251,meeting-rooms-ii,,,,
63b59aa78ad4593d6b7b0252,minimum-interval-to-include-each-query,,,,
63b59aa88ad4593d6b7b0253,rotate-image,,,,
63b59aa88ad4593d6b7b0254,spiral-matrix,,,,
63b59aa98ad4593d6b7b0255,set-matrix-zeroes,,,,
63b59aaa8ad4593d6b7b0256,happy-number,,,,
63b59aab8ad4593d6b7b0257,plus-one,,,,
63b59aac8ad4593d6b7b0258,powx-n,,,,
63b59aad8ad4593d6b7b0259,multiply-strings,,,,
63b59aae8ad4593d6b7b025a,detect-squares,,,,
63b59aaf8ad4593d6b7b025b,single-number,,,,
63b59ab08ad4593d6b7b025c,number-of-1-bits,,,,
63b59ab08ad4593d6b7b025d,counting-bits,,,,
63b59ab18ad4593d6b7b025e,reverse-bits,,,,
63b59ab38ad4593d6b7b025f,missing-number,,,,
63b59ab48ad4593d6b7b0260,sum-of-two-integers,,,,
63b59ab58ad4593d6b7b0261,reverse-integer,,,,